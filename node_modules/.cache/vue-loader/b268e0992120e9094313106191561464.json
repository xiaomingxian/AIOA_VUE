{"remainingRequest":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\layouts\\TabLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\layouts\\TabLayout.vue","mtime":1568535209000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport GlobalLayout from '@/components/page/GlobalLayout'\nimport Contextmenu from '@/components/menu/Contextmenu'\nimport { mixin, mixinDevice } from '@/utils/mixin.js'\n\nconst indexKey = '/dashboard/analysis'\n\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout,\n    Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [\n        { key: '1', icon: 'arrow-left', text: '关闭左侧' },\n        { key: '2', icon: 'arrow-right', text: '关闭右侧' },\n        { key: '3', icon: 'close', text: '关闭其它' }\n      ]\n    }\n  },\n  computed: {\n    multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false\n      } else {\n        return this.$store.state.app.multipage\n      }\n    }\n  },\n  created() {\n    if (this.$route.path != indexKey) {\n      this.pageList.push({\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      })\n      this.linkList.push(indexKey)\n    }\n    this.pageList.push(this.$route)\n    this.linkList.push(this.$route.fullPath)\n    this.activePage = this.$route.fullPath\n  },\n  watch: {\n    '$route': function(newRoute) {\n      this.activePage = newRoute.fullPath\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath]\n        this.pageList = [Object.assign({},newRoute)]\n      } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath)\n        this.pageList.push(Object.assign({},newRoute))\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        let oldIndex = this.linkList.indexOf(newRoute.fullPath)\n        let oldPositionRoute = this.pageList[oldIndex]\n        this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\n      }\n    },\n    'activePage': function(key) {\n      let index = this.linkList.lastIndexOf(key)\n      let waitRouter = this.pageList[index]\n      this.$router.push(Object.assign({},waitRouter));\n    },\n    'multipage': function(newVal) {\n      if (!newVal) {\n        this.linkList = [this.$route.fullPath]\n        this.pageList = [this.$route]\n      }\n    }\n  },\n  methods: {\n    changePage(key) {\n      this.activePage = key\n    },\n    editPage(key, action) {\n      this[action](key)\n    },\n    remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!')\n        return\n      }\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦')\n        return\n      }\n      this.pageList = this.pageList.filter(item => item.fullPath !== key)\n      let index = this.linkList.indexOf(key)\n      this.linkList = this.linkList.filter(item => item !== key)\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index\n      this.activePage = this.linkList[index]\n    },\n    onContextmenu(e) {\n      const pagekey = this.getPageKey(e.target)\n      if (pagekey !== null) {\n        e.preventDefault()\n        this.menuVisible = true\n      }\n    },\n    getPageKey(target, depth) {\n      depth = depth || 0\n      if (depth > 2) {\n        return null\n      }\n      let pageKey = target.getAttribute('pagekey')\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\n    },\n    onMenuSelect(key, target) {\n      let pageKey = this.getPageKey(target)\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey)\n          break\n        case '2':\n          this.closeRight(pageKey)\n          break\n        case '3':\n          this.closeOthers(pageKey)\n          break\n        default:\n          break\n      }\n    },\n    closeOthers(pageKey) {\n      let index = this.linkList.indexOf(pageKey)\n      if (pageKey == indexKey) {\n        this.linkList = this.linkList.slice(index, index + 1)\n        this.pageList = this.pageList.slice(index, index + 1)\n        this.activePage = this.linkList[0]\n      } else {\n        let indexContent = this.pageList.slice(0, 1)[0]\n        this.linkList = this.linkList.slice(index, index + 1)\n        this.pageList = this.pageList.slice(index, index + 1)\n        this.linkList.unshift(indexKey)\n        this.pageList.unshift(indexContent)\n        this.activePage = this.linkList[1]\n      }\n    },\n    closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return\n      }\n      let tempList = [...this.pageList]\n      let indexContent = tempList.slice(0, 1)[0]\n      let index = this.linkList.indexOf(pageKey)\n      this.linkList = this.linkList.slice(index)\n      this.pageList = this.pageList.slice(index)\n      this.linkList.unshift(indexKey)\n      this.pageList.unshift(indexContent)\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0]\n      }\n    },\n    closeRight(pageKey) {\n      let index = this.linkList.indexOf(pageKey)\n      this.linkList = this.linkList.slice(0, index + 1)\n      this.pageList = this.pageList.slice(0, index + 1)\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1]\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow(key,title){\n      let keyIndex = this.linkList.indexOf(key)\n      if(keyIndex>=0){\n        let currRouter = this.pageList[keyIndex]\n        let meta = Object.assign({},currRouter.meta,{title:title})\n        this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\n      }\n    }\n    //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n  }\n}\n",{"version":3,"sources":["TabLayout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TabLayout.vue","sourceRoot":"src/components/layouts","sourcesContent":["<template>\r\n  <global-layout @dynamicRouterShow=\"dynamicRouterShow\">\r\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" @select=\"onMenuSelect\"/>\r\n    <a-tabs\r\n      @contextmenu.native=\"e => onContextmenu(e)\"\r\n      v-if=\"multipage\"\r\n      :active-key=\"activePage\"\r\n      class=\"tab-layout-tabs\"\r\n      style=\"height:52px\"\r\n      :hide-add=\"true\"\r\n      type=\"editable-card\"\r\n      @change=\"changePage\"\r\n      @edit=\"editPage\">\r\n      <a-tab-pane :id=\"page.fullPath\" :key=\"page.fullPath\" v-for=\"page in pageList\">\r\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{ page.meta.title }}</span>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n    <div style=\"margin: 12px 12px 0;\">\r\n      <transition name=\"page-toggle\">\r\n        <keep-alive v-if=\"multipage\">\r\n          <router-view/>\r\n        </keep-alive>\r\n        <router-view v-else/>\r\n      </transition>\r\n    </div>\r\n  </global-layout>\r\n</template>\r\n\r\n<script>\r\n  import GlobalLayout from '@/components/page/GlobalLayout'\r\n  import Contextmenu from '@/components/menu/Contextmenu'\r\n  import { mixin, mixinDevice } from '@/utils/mixin.js'\r\n\r\n  const indexKey = '/dashboard/analysis'\r\n\r\n  export default {\r\n    name: 'TabLayout',\r\n    components: {\r\n      GlobalLayout,\r\n      Contextmenu\r\n    },\r\n    mixins: [mixin, mixinDevice],\r\n    data() {\r\n      return {\r\n        pageList: [],\r\n        linkList: [],\r\n        activePage: '',\r\n        menuVisible: false,\r\n        menuItemList: [\r\n          { key: '1', icon: 'arrow-left', text: '关闭左侧' },\r\n          { key: '2', icon: 'arrow-right', text: '关闭右侧' },\r\n          { key: '3', icon: 'close', text: '关闭其它' }\r\n        ]\r\n      }\r\n    },\r\n    computed: {\r\n      multipage() {\r\n        //判断如果是手机模式，自动切换为单页面模式\r\n        if (this.isMobile()) {\r\n          return false\r\n        } else {\r\n          return this.$store.state.app.multipage\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      if (this.$route.path != indexKey) {\r\n        this.pageList.push({\r\n          name: 'dashboard-analysis',\r\n          path: indexKey,\r\n          fullPath: indexKey,\r\n          meta: {\r\n            icon: 'dashboard',\r\n            title: '首页'\r\n          }\r\n        })\r\n        this.linkList.push(indexKey)\r\n      }\r\n      this.pageList.push(this.$route)\r\n      this.linkList.push(this.$route.fullPath)\r\n      this.activePage = this.$route.fullPath\r\n    },\r\n    watch: {\r\n      '$route': function(newRoute) {\r\n        this.activePage = newRoute.fullPath\r\n        if (!this.multipage) {\r\n          this.linkList = [newRoute.fullPath]\r\n          this.pageList = [Object.assign({},newRoute)]\r\n        } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\r\n          this.linkList.push(newRoute.fullPath)\r\n          this.pageList.push(Object.assign({},newRoute))\r\n        } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\r\n          let oldIndex = this.linkList.indexOf(newRoute.fullPath)\r\n          let oldPositionRoute = this.pageList[oldIndex]\r\n          this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\r\n        }\r\n      },\r\n      'activePage': function(key) {\r\n        let index = this.linkList.lastIndexOf(key)\r\n        let waitRouter = this.pageList[index]\r\n        this.$router.push(Object.assign({},waitRouter));\r\n      },\r\n      'multipage': function(newVal) {\r\n        if (!newVal) {\r\n          this.linkList = [this.$route.fullPath]\r\n          this.pageList = [this.$route]\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      changePage(key) {\r\n        this.activePage = key\r\n      },\r\n      editPage(key, action) {\r\n        this[action](key)\r\n      },\r\n      remove(key) {\r\n        if (key == indexKey) {\r\n          this.$message.warning('首页不能关闭!')\r\n          return\r\n        }\r\n        if (this.pageList.length === 1) {\r\n          this.$message.warning('这是最后一页，不能再关闭了啦')\r\n          return\r\n        }\r\n        this.pageList = this.pageList.filter(item => item.fullPath !== key)\r\n        let index = this.linkList.indexOf(key)\r\n        this.linkList = this.linkList.filter(item => item !== key)\r\n        index = index >= this.linkList.length ? this.linkList.length - 1 : index\r\n        this.activePage = this.linkList[index]\r\n      },\r\n      onContextmenu(e) {\r\n        const pagekey = this.getPageKey(e.target)\r\n        if (pagekey !== null) {\r\n          e.preventDefault()\r\n          this.menuVisible = true\r\n        }\r\n      },\r\n      getPageKey(target, depth) {\r\n        depth = depth || 0\r\n        if (depth > 2) {\r\n          return null\r\n        }\r\n        let pageKey = target.getAttribute('pagekey')\r\n        pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\r\n        return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\r\n      },\r\n      onMenuSelect(key, target) {\r\n        let pageKey = this.getPageKey(target)\r\n        switch (key) {\r\n          case '1':\r\n            this.closeLeft(pageKey)\r\n            break\r\n          case '2':\r\n            this.closeRight(pageKey)\r\n            break\r\n          case '3':\r\n            this.closeOthers(pageKey)\r\n            break\r\n          default:\r\n            break\r\n        }\r\n      },\r\n      closeOthers(pageKey) {\r\n        let index = this.linkList.indexOf(pageKey)\r\n        if (pageKey == indexKey) {\r\n          this.linkList = this.linkList.slice(index, index + 1)\r\n          this.pageList = this.pageList.slice(index, index + 1)\r\n          this.activePage = this.linkList[0]\r\n        } else {\r\n          let indexContent = this.pageList.slice(0, 1)[0]\r\n          this.linkList = this.linkList.slice(index, index + 1)\r\n          this.pageList = this.pageList.slice(index, index + 1)\r\n          this.linkList.unshift(indexKey)\r\n          this.pageList.unshift(indexContent)\r\n          this.activePage = this.linkList[1]\r\n        }\r\n      },\r\n      closeLeft(pageKey) {\r\n        if (pageKey == indexKey) {\r\n          return\r\n        }\r\n        let tempList = [...this.pageList]\r\n        let indexContent = tempList.slice(0, 1)[0]\r\n        let index = this.linkList.indexOf(pageKey)\r\n        this.linkList = this.linkList.slice(index)\r\n        this.pageList = this.pageList.slice(index)\r\n        this.linkList.unshift(indexKey)\r\n        this.pageList.unshift(indexContent)\r\n        if (this.linkList.indexOf(this.activePage) < 0) {\r\n          this.activePage = this.linkList[0]\r\n        }\r\n      },\r\n      closeRight(pageKey) {\r\n        let index = this.linkList.indexOf(pageKey)\r\n        this.linkList = this.linkList.slice(0, index + 1)\r\n        this.pageList = this.pageList.slice(0, index + 1)\r\n        if (this.linkList.indexOf(this.activePage < 0)) {\r\n          this.activePage = this.linkList[this.linkList.length - 1]\r\n        }\r\n      },\r\n      //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\r\n      dynamicRouterShow(key,title){\r\n        let keyIndex = this.linkList.indexOf(key)\r\n        if(keyIndex>=0){\r\n          let currRouter = this.pageList[keyIndex]\r\n          let meta = Object.assign({},currRouter.meta,{title:title})\r\n          this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\r\n        }\r\n      }\r\n      //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n  /*\r\n * The following styles are auto-applied to elements with\r\n * transition=\"page-transition\" when their visibility is toggled\r\n * by Vue.js.\r\n *\r\n * You can easily play with the page transition by editing\r\n * these styles.\r\n */\r\n\r\n  .page-transition-enter {\r\n    opacity: 0;\r\n  }\r\n\r\n  .page-transition-leave-active {\r\n    opacity: 0;\r\n  }\r\n\r\n  .page-transition-enter .page-transition-container,\r\n  .page-transition-leave-active .page-transition-container {\r\n    -webkit-transform: scale(1.1);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  /*美化弹出Tab样式*/\r\n  .ant-tabs-nav-container {\r\n    margin-top: 4px;\r\n  }\r\n\r\n  /* 修改 ant-tabs 样式 */\r\n  .tab-layout-tabs.ant-tabs {\r\n    border-bottom: 1px solid #ccc;\r\n    border-left: 1px solid #ccc;\r\n    background-color: white;\r\n    padding: 0 20px;\r\n\r\n    .ant-tabs-bar {\r\n      margin: 4px 0 0;\r\n      border: none;\r\n    }\r\n\r\n  }\r\n\r\n  .ant-tabs {\r\n\r\n    &.ant-tabs-card .ant-tabs-tab {\r\n\r\n      padding: 0 24px !important;\r\n      background-color: white !important;\r\n      margin-right: 10px !important;\r\n\r\n      .ant-tabs-close-x {\r\n        width: 12px !important;\r\n        height: 12px !important;\r\n        opacity: 0 !important;\r\n        cursor: pointer !important;\r\n        font-size: 12px !important;\r\n        margin: 0 !important;\r\n        position: absolute;\r\n        top: 36%;\r\n        right: 6px;\r\n      }\r\n\r\n      &:hover .ant-tabs-close-x {\r\n        opacity: 1 !important;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  .ant-tabs.ant-tabs-card > .ant-tabs-bar {\r\n    .ant-tabs-tab {\r\n      border: none !important;\r\n      border-bottom: 1px solid transparent !important;\r\n    }\r\n    .ant-tabs-tab-active {\r\n      border-color: #1890ff !important;\r\n    }\r\n  }\r\n\r\n\r\n</style>"]}]}