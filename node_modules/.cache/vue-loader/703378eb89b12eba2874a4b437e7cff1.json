{"remainingRequest":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xxm\\work\\jd\\fore\\src\\views\\modules\\monitor\\JvmInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xxm\\work\\jd\\fore\\src\\views\\modules\\monitor\\JvmInfo.vue","mtime":1577687869294},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\babel-loader\\lib\\index.js","mtime":1570779245522},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js","mtime":1570779225726}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { getAction } from '@/api/manage'\n\nmoment.locale('zh-cn')\n\nexport default {\n  data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        align:\"center\",\n        scopedSlots: { customRender: 'param' }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        align:\"center\",\n        scopedSlots: { customRender: 'text' }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        align:\"center\",\n        scopedSlots: { customRender: 'value' }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'jvm.memory.max': { color: 'purple', text: 'JVM 最大内存', unit: 'MB' },\n        'jvm.memory.committed': { color: 'purple', text: 'JVM 可用内存', unit: 'MB' },\n        'jvm.memory.used': { color: 'purple', text: 'JVM 已用内存', unit: 'MB' },\n        'jvm.buffer.memory.used': { color: 'cyan', text: 'JVM 缓冲区已用内存', unit: 'MB' },\n        'jvm.buffer.count': { color: 'cyan', text: '当前缓冲区数量', unit: '个' },\n        'jvm.threads.daemon': { color: 'green', text: 'JVM 守护线程数量', unit: '个' },\n        'jvm.threads.live': { color: 'green', text: 'JVM 当前活跃线程数量', unit: '个' },\n        'jvm.threads.peak': { color: 'green', text: 'JVM 峰值线程数量', unit: '个' },\n        'jvm.classes.loaded': { color: 'orange', text: 'JVM 已加载 Class 数量', unit: '个' },\n        'jvm.classes.unloaded': { color: 'orange', text: 'JVM 未加载 Class 数量', unit: '个' },\n        'jvm.gc.memory.allocated': { color: 'pink', text: 'GC 时, 年轻代分配的内存空间', unit: 'MB' },\n        'jvm.gc.memory.promoted': { color: 'pink', text: 'GC 时, 老年代分配的内存空间', unit: 'MB' },\n        'jvm.gc.max.data.size': { color: 'pink', text: 'GC 时, 老年代的最大内存空间', unit: 'MB' },\n        'jvm.gc.live.data.size': { color: 'pink', text: 'FullGC 时, 老年代的内存空间', unit: 'MB' },\n        'jvm.gc.pause.count': { color: 'blue', text: '系统启动以来GC 次数', unit: '次' },\n        'jvm.gc.pause.totalTime': { color: 'blue', text: '系统启动以来GC 总耗时', unit: '秒' }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'jvm.gc.pause': ['.count', '.totalTime']\n      }\n    }\n  },\n  mounted() {\n    this.loadTomcatInfo()\n  },\n  methods: {\n\n    handleClickUpdate() {\n      this.loadTomcatInfo()\n    },\n\n    loadTomcatInfo() {\n      this.tableLoading = true\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\n      Promise.all([\n        getAction('actuator/metrics/jvm.memory.max'),\n        getAction('actuator/metrics/jvm.memory.committed'),\n        getAction('actuator/metrics/jvm.memory.used'),\n        getAction('actuator/metrics/jvm.buffer.memory.used'),\n        getAction('actuator/metrics/jvm.buffer.count'),\n        getAction('actuator/metrics/jvm.threads.daemon'),\n        getAction('actuator/metrics/jvm.threads.live'),\n        getAction('actuator/metrics/jvm.threads.peak'),\n        getAction('actuator/metrics/jvm.classes.loaded'),\n        getAction('actuator/metrics/jvm.classes.unloaded'),\n        getAction('actuator/metrics/jvm.gc.memory.allocated'),\n        getAction('actuator/metrics/jvm.gc.memory.promoted'),\n        getAction('actuator/metrics/jvm.gc.max.data.size'),\n        getAction('actuator/metrics/jvm.gc.live.data.size'),\n        getAction('actuator/metrics/jvm.gc.pause')\n      ]).then((res) => {\n\n        let info = []\n        res.forEach((value, id) => {\n          let more = this.moreInfo[value.name]\n          if (!(more instanceof Array)) {\n            more = ['']\n          }\n          more.forEach((item, idx) => {\n            let param = value.name + item\n            let val = value.measurements[idx].value\n\n            if (param === 'jvm.memory.max'\n              || param === 'jvm.memory.committed'\n              || param === 'jvm.memory.used'\n              || param === 'jvm.buffer.memory.used'\n              || param === 'jvm.gc.memory.allocated'\n              || param === 'jvm.gc.memory.promoted'\n              || param === 'jvm.gc.max.data.size'\n              || param === 'jvm.gc.live.data.size'\n            ) {\n              val = this.convert(val, Number)\n            }\n            info.push({ id: param + id, param, text: 'false value', value: val })\n          })\n        })\n        this.dataSource = info\n\n\n      }).catch((e) => {\n        console.error(e)\n        this.$message.error('获取JVM信息失败')\n      }).finally(() => {\n        this.loading = false\n        this.tableLoading = false\n      })\n    },\n\n    convert(value, type) {\n      if (type === Number) {\n        return Number(value / 1048576).toFixed(3)\n      } else if (type === Date) {\n        return moment(value * 1000).format('YYYY-MM-DD HH:mm:ss')\n      }\n      return value\n    }\n  }\n}\n",{"version":3,"sources":["JvmInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JvmInfo.vue","sourceRoot":"src/views/modules/monitor","sourcesContent":["<template>\r\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\r\n    <a-card :bordered=\"false\">\r\n\r\n      <a-alert type=\"info\" :showIcon=\"true\">\r\n        <div slot=\"message\">\r\n          上次更新时间：{{ this.time }}\r\n          <a-divider type=\"vertical\"/>\r\n          <a @click=\"handleClickUpdate\">立即更新</a>\r\n        </div>\r\n      </a-alert>\r\n\r\n      <a-table\r\n        rowKey=\"id\"\r\n        size=\"middle\"\r\n        :columns=\"columns\"\r\n        :dataSource=\"dataSource\"\r\n        :pagination=\"false\"\r\n        :loading=\"tableLoading\"\r\n        style=\"margin-top: 20px;\"\r\n        :rowClassName=\"(record,index) => {\r\n              let className  = 'light-row';\r\n              if (index % 2 === 1) className = 'dark-row';\r\n              return className;\r\n          }\"\r\n      >\r\n\r\n        <template slot=\"param\" slot-scope=\"text, record\">\r\n          <a-tag :color=\"textInfo[record.param].color\">{{ text }}</a-tag>\r\n        </template>\r\n\r\n        <template slot=\"text\" slot-scope=\"text, record\">\r\n          {{ textInfo[record.param].text }}\r\n        </template>\r\n\r\n        <template slot=\"value\" slot-scope=\"text, record\">\r\n          {{ text }} {{ textInfo[record.param].unit }}\r\n        </template>\r\n\r\n      </a-table>\r\n    </a-card>\r\n  </a-skeleton>\r\n</template>\r\n<script>\r\n  import moment from 'moment'\r\n  import { getAction } from '@/api/manage'\r\n\r\n  moment.locale('zh-cn')\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        time: '',\r\n        loading: true,\r\n        tableLoading: true,\r\n        columns: [{\r\n          title: '参数',\r\n          width: '30%',\r\n          dataIndex: 'param',\r\n          align:\"center\",\r\n          scopedSlots: { customRender: 'param' }\r\n        }, {\r\n          title: '描述',\r\n          width: '40%',\r\n          dataIndex: 'text',\r\n          align:\"center\",\r\n          scopedSlots: { customRender: 'text' }\r\n        }, {\r\n          title: '当前值',\r\n          width: '30%',\r\n          dataIndex: 'value',\r\n          align:\"center\",\r\n          scopedSlots: { customRender: 'value' }\r\n        }],\r\n        dataSource: [],\r\n        // 列表通过 textInfo 渲染出颜色、描述和单位\r\n        textInfo: {\r\n          'jvm.memory.max': { color: 'purple', text: 'JVM 最大内存', unit: 'MB' },\r\n          'jvm.memory.committed': { color: 'purple', text: 'JVM 可用内存', unit: 'MB' },\r\n          'jvm.memory.used': { color: 'purple', text: 'JVM 已用内存', unit: 'MB' },\r\n          'jvm.buffer.memory.used': { color: 'cyan', text: 'JVM 缓冲区已用内存', unit: 'MB' },\r\n          'jvm.buffer.count': { color: 'cyan', text: '当前缓冲区数量', unit: '个' },\r\n          'jvm.threads.daemon': { color: 'green', text: 'JVM 守护线程数量', unit: '个' },\r\n          'jvm.threads.live': { color: 'green', text: 'JVM 当前活跃线程数量', unit: '个' },\r\n          'jvm.threads.peak': { color: 'green', text: 'JVM 峰值线程数量', unit: '个' },\r\n          'jvm.classes.loaded': { color: 'orange', text: 'JVM 已加载 Class 数量', unit: '个' },\r\n          'jvm.classes.unloaded': { color: 'orange', text: 'JVM 未加载 Class 数量', unit: '个' },\r\n          'jvm.gc.memory.allocated': { color: 'pink', text: 'GC 时, 年轻代分配的内存空间', unit: 'MB' },\r\n          'jvm.gc.memory.promoted': { color: 'pink', text: 'GC 时, 老年代分配的内存空间', unit: 'MB' },\r\n          'jvm.gc.max.data.size': { color: 'pink', text: 'GC 时, 老年代的最大内存空间', unit: 'MB' },\r\n          'jvm.gc.live.data.size': { color: 'pink', text: 'FullGC 时, 老年代的内存空间', unit: 'MB' },\r\n          'jvm.gc.pause.count': { color: 'blue', text: '系统启动以来GC 次数', unit: '次' },\r\n          'jvm.gc.pause.totalTime': { color: 'blue', text: '系统启动以来GC 总耗时', unit: '秒' }\r\n        },\r\n        // 当一条记录中需要取出多条数据的时候需要配置该字段\r\n        moreInfo: {\r\n          'jvm.gc.pause': ['.count', '.totalTime']\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      this.loadTomcatInfo()\r\n    },\r\n    methods: {\r\n\r\n      handleClickUpdate() {\r\n        this.loadTomcatInfo()\r\n      },\r\n\r\n      loadTomcatInfo() {\r\n        this.tableLoading = true\r\n        this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\r\n        Promise.all([\r\n          getAction('actuator/metrics/jvm.memory.max'),\r\n          getAction('actuator/metrics/jvm.memory.committed'),\r\n          getAction('actuator/metrics/jvm.memory.used'),\r\n          getAction('actuator/metrics/jvm.buffer.memory.used'),\r\n          getAction('actuator/metrics/jvm.buffer.count'),\r\n          getAction('actuator/metrics/jvm.threads.daemon'),\r\n          getAction('actuator/metrics/jvm.threads.live'),\r\n          getAction('actuator/metrics/jvm.threads.peak'),\r\n          getAction('actuator/metrics/jvm.classes.loaded'),\r\n          getAction('actuator/metrics/jvm.classes.unloaded'),\r\n          getAction('actuator/metrics/jvm.gc.memory.allocated'),\r\n          getAction('actuator/metrics/jvm.gc.memory.promoted'),\r\n          getAction('actuator/metrics/jvm.gc.max.data.size'),\r\n          getAction('actuator/metrics/jvm.gc.live.data.size'),\r\n          getAction('actuator/metrics/jvm.gc.pause')\r\n        ]).then((res) => {\r\n\r\n          let info = []\r\n          res.forEach((value, id) => {\r\n            let more = this.moreInfo[value.name]\r\n            if (!(more instanceof Array)) {\r\n              more = ['']\r\n            }\r\n            more.forEach((item, idx) => {\r\n              let param = value.name + item\r\n              let val = value.measurements[idx].value\r\n\r\n              if (param === 'jvm.memory.max'\r\n                || param === 'jvm.memory.committed'\r\n                || param === 'jvm.memory.used'\r\n                || param === 'jvm.buffer.memory.used'\r\n                || param === 'jvm.gc.memory.allocated'\r\n                || param === 'jvm.gc.memory.promoted'\r\n                || param === 'jvm.gc.max.data.size'\r\n                || param === 'jvm.gc.live.data.size'\r\n              ) {\r\n                val = this.convert(val, Number)\r\n              }\r\n              info.push({ id: param + id, param, text: 'false value', value: val })\r\n            })\r\n          })\r\n          this.dataSource = info\r\n\r\n\r\n        }).catch((e) => {\r\n          console.error(e)\r\n          this.$message.error('获取JVM信息失败')\r\n        }).finally(() => {\r\n          this.loading = false\r\n          this.tableLoading = false\r\n        })\r\n      },\r\n\r\n      convert(value, type) {\r\n        if (type === Number) {\r\n          return Number(value / 1048576).toFixed(3)\r\n        } else if (type === Date) {\r\n          return moment(value * 1000).format('YYYY-MM-DD HH:mm:ss')\r\n        }\r\n        return value\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style></style>\r\n"]}]}