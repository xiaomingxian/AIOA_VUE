{"remainingRequest":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xxm\\work\\jd\\fore\\src\\views\\mytask\\modules\\nextUsers1.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xxm\\work\\jd\\fore\\src\\views\\mytask\\modules\\nextUsers1.vue","mtime":1578382443989},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\babel-loader\\lib\\index.js","mtime":1570779245522},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js","mtime":1570779225726}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getAction, postAction} from \"../../../api/manage\";\nimport {JeecgListMixin} from '@/mixins/JeecgListMixin'\nimport DictItemList from \"../../system/DictItemList\";\n\n\nexport default {\n  name: \"nextUsers\",\n  mixins: [JeecgListMixin],\n  components: {DictItemList},\n  data() {\n    return {\n      title: '下一任务',\n      okText: '确定',\n      //控制组件数据可见\n      isMul: false, //下一任务是单选/多选\n      isDept: false,\n      endType: false,//是否是结束节点\n      nextsActs: [],\n      //节点信息\n      activity: '',\n      endTime: '',\n      //穿梭框数据\n      mockData: [],\n      //部门信息\n      deptsList: [],\n      //部门选择集合\n      departSelect: {},\n      //部门对应用户id\n      departUsersId: {},\n      departUsersMsg: {},\n      //环节分类，从属于 排他，并行，包容网关\n      gateWayTypeSelect: {\n        parallel: {},\n        inclusive: {},\n      },\n      typeCount: {\n        normal: [],\n        inclusive: [],\n        parallel: [],\n      },\n      preCilck: null,\n      timeCheck: false,//是否限制时间\n      columns: [\n        {\n          title: '用户姓名',\n          align: \"center\",\n          dataIndex: 'uname'\n        }, {\n          title: '所在部门',\n          align: \"center\",\n          dataIndex: 'dname'\n        }\n      ],\n      columns2: [\n        {\n          title: '部门名称',\n          align: \"center\",\n          dataIndex: 'departName'\n        }\n      ],\n      dataSource: [],\n      visible: false,\n      confirmLoading: false,\n\n      urls: {\n        departUsetQuery: '/oaBus/taskInAct/deptUsersQuery'\n      }\n    }\n  },\n  computed: {},\n  methods: {\n    // getCheckboxProps(res){\n    //   return res=>({\n    //     props: {\n    //       defaultChecked:res.uid===this.dataSource[0].uid\n    //     }\n    //   })\n    // },\n    departClickCheck(res) {\n      return {\n        on: {\n          click: () => {\n            let rowkeys = this.selectedRowKeys;\n            let selectionRows = this.selectionRows;\n            if (rowkeys.length > 0 && rowkeys.includes(res.id)) {\n              rowkeys.splice(rowkeys.indexOf(res.id), 1);\n              selectionRows.splice(rowkeys.indexOf(res), 1);\n            } else {\n              rowkeys.push(res.id);\n              selectionRows.push(res);\n            }\n            this.selectedRowKeys = rowkeys;\n            this.selectionRows = selectionRows;\n          }\n        }\n      }\n    },\n    setRowRadio(res) {\n      return {\n        on: {\n          click: () => {\n            let keys = [];\n            keys.push(res.uid);\n            this.selectedRowKeys = keys;\n          }\n        }\n      }\n    },\n    setRowCheck(res) {\n      return {\n        on: {\n          click: () => {\n            let rowkeys = this.selectedRowKeys;\n            if (rowkeys.length > 0 && rowkeys.includes(res.uid)) {\n              rowkeys.splice(rowkeys.indexOf(res.uid), 1);\n            } else {\n              rowkeys.push(res.uid);\n            }\n            this.selectedRowKeys = rowkeys;\n          }\n        }\n      }\n    },\n    // onSelectChange(e,d) {\n    //   // alert(JSON.stringify(d))\n    //   this.selectedRowKeys = e;\n    // },\n    onChangeCheck(item) {\n      var id = (item.target.value).split('-')[0]\n      var type = (item.target.value).split('-')[1]\n      //修改数据属性(修改选中状态用来向左边传)\n      for (var i in  this.departSelect[type]) {\n        if (id == this.departSelect[type][i].id) {\n          this.departSelect[type][i].checked = true\n        }\n      }\n    },\n    showNextUsers(nextsActs) {\n      if (nextsActs.length > 0 && nextsActs[0].actMsg.type == 'endEvent') {\n        this.endType = true\n        this.title = '办结'\n        this.okText = '办结'\n        this.activity = nextsActs[0]\n      } else {\n        this.nextsActs = nextsActs\n        //统计数量\n        //---------默认选择 下一任下第一个环节----------\n        this.clickAct(this.nextsActs[0]);\n        for (let i of nextsActs) {\n          let inclusiveGateway = i.actMsg.inclusiveGateway\n          let parallelGateway = i.actMsg.parallelGateway\n          if (inclusiveGateway) {\n            this.typeCount.inclusive.push(i)\n          } else if (parallelGateway) {\n            this.typeCount.parallel.push(i)\n          } else {\n            this.typeCount.normal.push(i)\n          }\n\n        }\n      }\n      this.visible = true\n    },\n    //点击某一节点---选择节点相关信息\n    clickAct(item) {\n      /**\n       *  (包容/并行网关)记录上一节点的选择信息\n       *  TODO 方式待修改\n       */\n      var preType = null\n      if (this.preCilck != null) {\n        preType = (this.preCilck.oaProcActinst.userOrRole) == 'dept'\n      }\n\n      if (this.preCilck != null &&\n        (\n          (preType && Object.keys(this.departSelect).length > 0)\n          ||\n          (!preType && this.selectionRows.length > 0))) {\n        //判断类型是并行还是包容//并记录选择的内容\n        let select = {}\n        select['activity'] = this.preCilck\n        if (preType) {\n          select['deptsList'] = this.deptsList\n          select['departSelect'] = this.departSelect\n          select['departUsersId'] = this.departUsersId\n          select['mockData'] = this.mockData\n        }\n        if (!preType) {\n          select['selectedRowKeys'] = this.selectedRowKeys\n          select['selectionRows'] = this.selectionRows\n        }\n        if (this.preCilck.actMsg.inclusiveGateway) {\n          this.gateWayTypeSelect.inclusive[this.preCilck.actMsg.id] = select\n        }\n        if (this.preCilck.actMsg.parallelGateway) {\n          this.gateWayTypeSelect.parallel[this.preCilck.actMsg.id] = select\n        }\n      }\n\n      //清空旧的选择\n      this.selectedRowKeys = []\n      this.selectionRows = []\n\n      //查看节点信息\n      //复选框还是单选\n      this.isMul = item.oaProcActinst.multAssignee\n      //是否选部门\n      this.isDept = (item.oaProcActinst.userOrRole) == 'dept'\n\n\n      //判断当前节点是否是包容/并行网关 之前是否记录过它的选择信息,记录过就使用\n      if (item.actMsg.inclusiveGateway || item.actMsg.parallelGateway) {//包容/并行\n        let currentAct = this.gateWayTypeSelect.inclusive[item.actMsg.id]\n        if (currentAct != undefined && !this.isDept) {\n          this.selectedRowKeys = currentAct['selectedRowKeys']\n          this.selectionRows = currentAct['selectionRows']\n        }\n      }\n\n\n      if (this.isDept) {\n        //判断是否是包容/并行\n        let currentAct = this.gateWayTypeSelect.inclusive[item.actMsg.id]\n\n        if ((item.actMsg.inclusiveGateway || item.actMsg.parallelGateway) && currentAct != undefined) {\n          this.deptsList = currentAct['deptsList']\n          this.departSelect = currentAct['departSelect']\n          this.departUsersId = currentAct['departUsersId']\n          this.mockData = currentAct['mockData']\n        } else {\n          this.mockData = item.nextUsers\n          this.deptsList = item.oaProcActinst.deptsList\n          for (var x in  this.deptsList) {\n            //构造备选集合\n            this.departSelect[this.deptsList[x]] = []\n            //部门选择用户集合构造\n            this.departUsersId[this.deptsList[x]] = []\n            //备选用户完整信息\n            this.departUsersMsg[this.deptsList[x]] = []\n          }\n        }\n\n      }\n      //节点信息\n      this.activity = item\n      //记录上一环节\n      this.preCilck = item\n      this.dataSource = item.nextUsers\n      if (!this.isDept && this.dataSource.length > 0) {\n        //默认选中表格第一个--------------------------------------\n        let defaultSelected = [];\n        defaultSelected.push(this.dataSource[0].uid);\n        this.selectedRowKeys = defaultSelected;\n      }\n\n    },\n    confirm() {\n\n      //时间校验\n      this.timeCheckMethod()\n      //校验并行与包容\n      let palllen = this.typeCount.parallel.length\n      let ialllen = this.typeCount.inclusive.length\n      if (palllen == 0 && ialllen == 0) {//非包容/并行\n        this.singleType()\n      } else {//包容/并行\n        this.gateWayCheck()\n        this.moreThanOneType()\n      }\n    },\n    //并行或包容\n    moreThanOneType() {\n      console.log('      包容 ::::', JSON.stringify(this.gateWayTypeSelect))\n      this.$emit('confirmNextUsersMore', this.gateWayTypeSelect, this.endTime)\n    },\n    //时间校验\n    timeCheckMethod() {\n      if (this.timeCheck) {\n        if (this.endTime == '') {\n          this.$message.error('请选择办理结束时间')\n          return\n        }\n        if (new Date() > new Date(this.endTime)) {\n          this.$message.error('办理结束时间不得小于当前时间')\n          return\n        }\n      }\n    },\n    //包容/并行网关校验\n    gateWayCheck() {\n      let plen = Object.keys(this.gateWayTypeSelect.parallel).length\n      let ilen = Object.keys(this.gateWayTypeSelect.inclusive).length\n      let palllen = this.typeCount.parallel.length\n      let ialllen = this.typeCount.inclusive.length\n\n      if (palllen == 0 && ialllen == 0) {\n        return\n      }\n      if (plen != palllen) {\n        this.$message.error('当前的所有环节都必须选择用户')\n        return\n      }\n      if (plen == palllen && palllen != 0) {\n        var res = window.confirm(\"已选择所有环节是否检查所选用户\");\n        if (res) {\n          return\n        }\n        //校验用户\n        this.moreThanOneUserCheck('parallel')\n      }\n      if (ilen != ialllen) {\n        if (ilen == 0) {\n          this.$message.error('您没有选择环节或选择的部门没有可办理用户请检查')\n          return\n        }\n        var res = window.confirm(\"可以选择所有环节是否继续选择\");\n        if (res) {\n          return\n        }\n        //校验选择的用户\n        this.moreThanOneUserCheck('inclusive')\n      }\n      if (ilen == ialllen && ialllen != 0) {\n        var res = window.confirm(\"已选择所有环节是否检查所选用户\");\n        if (res) {\n          return\n        }\n        this.moreThanOneUserCheck('inclusive')\n      }\n    },\n    moreThanOneUserCheck(type) {\n      var data = null\n      if (type == 'inclusive') {\n        data = this.gateWayTypeSelect.inclusive\n      }\n      if (type == 'parallel') {\n        data = this.gateWayTypeSelect.parallel\n      }\n\n      for (let index in  data) {\n        let d = data[index]\n        let isDept = d.activity.actMsg.userOrRole == 'dept'\n        if (isDept) {//部门类型\n          let dep = d.departUsersId\n          for (let k in dep) {\n            let v = dep[k]\n            if (k.indexOf(\"主办\") >= 0) {\n              if (v.length <= 0) {\n                this.$message.error('主办部门必须选择办理人')\n                return\n              }\n            }\n          }\n\n        } else {//用户类\n          if (d.selectedRowKeys.length <= 0) {\n            this.$message.error(d.activity.actMsg.name + '环节，请选择办理人')\n            return\n          }\n        }\n      }\n\n\n    },\n    //非包容/并行网关办理方式\n    singleType() {\n      var ids = []\n      if (this.isDept) {\n\n        let ids = []\n        let depMSg = {}\n        for (let i in this.departUsersId) {\n\n          if (i.indexOf(\"主办\") >= 0 && this.departUsersId[i].length == 0) {\n            this.$message.error(i + \"部门必须选择用户\")\n            return\n          }\n\n          if (this.departUsersId[i].length > 0) {\n            ids.push(this.departUsersId[i])\n            depMSg[i] = this.departUsersId[i]\n          }\n        }\n        console.log('==========部门：：：', ids, JSON.stringify(this.activity))\n        //校验\n        this.$emit('func', ids, this.activity, this.endTime, depMSg)\n        this.cancel()\n      } else if (this.endType) {\n        this.$emit('func', ids, this.activity, this.endTime)\n        this.cancel()\n      } else {\n        //办理人校验\n        if (this.selectedRowKeys.length <= 0) {\n          this.$message.error(\"请选择办理人\")\n          return\n        }\n        ids = this.selectedRowKeys\n\n        console.log('------普通：' + ids, JSON.stringify(this.activity))\n        //办理流程\n        this.$emit('func', ids, this.activity, this.endTime)\n        this.cancel()\n      }\n    },\n    //穿梭方法实现\n    toRight: function (item) {\n      //从部门列表中移除--添加到对应的list中\n      //1 主办部门只能有一个\n\n      if (item.indexOf(\"主办\") >= 0) {\n        //判断是否已经有元素了\n        if (((this.departSelect[item].length == 0 && this.selectionRows.length > 1)) || (this.departSelect[item].length > 0)) {\n          this.$message.error(\"主办部门只允许有一个\")\n          return\n        }\n      }\n      //2 添加到右边--移除左边\n      var del = {}\n      for (var i in this.selectionRows) {\n        this.selectionRows[i].checked = false\n        //右边\n        this.departSelect[item].push(this.selectionRows[i])\n        //移除元素\n        del[this.selectionRows[i].id] = 1\n      }\n\n      //移除元素(采用重新赋值的方式)\n      var mockData2 = []\n      for (var j = 0; j < this.mockData.length; j++) {\n        if (del[this.mockData[j].id] != 1) {\n          mockData2.push(this.mockData[j])\n        }\n      }\n      this.mockData = mockData2\n      //清空所选\n      this.selectionRows = []\n      this.selectedRowKeys = []\n      // 更新用户显示\n      this.currentDeptUserQuery(item)\n\n    },\n    toLeft(item) {\n      //添加到部门列表中--从list中移除\n\n      var right = []\n      for (var i in this.departSelect[item]) {\n        var itt = this.departSelect[item][i]\n        if (itt.checked) {\n          itt.checked = false\n          this.mockData.push(itt)\n        } else {\n          right.push(itt)\n        }\n      }\n      //改变右边\n      this.departSelect[item] = right\n      // 更新用户显示\n      this.currentDeptUserQuery(item)\n\n\n    },\n    /**\n     * 选中部门的用户查询\n     * @param item\n     */\n    currentDeptUserQuery(item) {\n\n      var role = this.activity.oaProcActinst.candidates\n      var depts = this.departSelect\n\n      var param = {}\n      param.role = role\n      param.depts = depts\n\n      if (depts[item].length == 0) {\n        this.departUsersId[item] = []\n        this.departUsersMsg[item] = []\n        let keys = []\n        let rows = []\n        this.onSelectChange(keys, rows)\n        return\n      }\n\n      //查询部门对应的用户id 分组\n      postAction(this.urls.departUsetQuery, param).then(res => {\n        if (res.success) {\n          if (res.result[item].length == 0) {\n            this.$message.error('所选' + item + '部门没有对应角色的用户')\n            this.departUsersId[item] = []\n            this.departUsersMsg[item] = []\n            let keys = []\n            let rows = []\n            this.onSelectChange(keys, rows)\n            return\n          } else {\n            let ids = []\n            for (let i in res.result[item]) {\n              ids.push(res.result[item][i].id)\n            }\n            this.departUsersId[item] = ids\n            this.departUsersMsg[item] = res.result[item]\n\n            let keys = []\n            let rows = []\n            this.onSelectChange(keys, rows)\n          }\n        } else {\n          this.$message.error(res.message)\n          return\n        }\n      })\n\n    }\n    ,\n    cancel() {\n      //初始数据\n      this.dataInit()\n\n      this.$emit('close');\n      this.visible = false;\n    }\n    ,\n    onChange(date, dateString) {\n      this.endTime = dateString\n    }\n    ,\n    changeChoice(e) {\n      if (e.target.value == 1) {\n        //不限时间\n        this.timeCheck = false\n      } else {\n        this.timeCheck = true\n      }\n    }\n    ,\n    dataInit() {\n      this.selectionRows = []\n      this.selectedRowKeys = []\n      this.endTime = ''\n    },\n    /**\n     * 全选/不选\n     */\n    onCheckAllChange(e) {\n      let checked = e.target.checked\n      let type = e.target.id\n      if (checked) {\n        //修改数据属性\n        for (var i in  this.departSelect[type]) {\n          this.departSelect[type][i].checked = true\n          this.$refs[type][i].checked = true\n        }\n      } else {\n        for (var i in  this.departSelect[type]) {\n          this.departSelect[type][i].checked = false\n          this.$refs[type][i].checked = false\n\n        }\n      }\n    },\n  },\n\n}\n",{"version":3,"sources":["nextUsers1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"nextUsers1.vue","sourceRoot":"src/views/mytask/modules","sourcesContent":["<template>\r\n  <a-modal\r\n    :title=\"title\"\r\n    :width=\"1300\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"confirm\"\r\n    @cancel=\"cancel\"\r\n    destroyOnClose\r\n    :okText=\"okText\"\r\n    cancelText=\"取消\">\r\n\r\n    <a-layout id=\"components-layout-demo-top-side-2\">\r\n      <a-layout>\r\n        <div v-if=\"endType\">\r\n          <center><h3 style=\"color: red; font-weight: 600; font-size: 20px\">下一节点为结束节点</h3></center>\r\n        </div>\r\n\r\n        <a-layout-sider v-if=\"!endType\" width=\"200\" style=\"background: #fff\">\r\n          <a-menu\r\n            mode=\"inline\"\r\n            :defaultSelectedKeys=\"['1']\"\r\n            :defaultOpenKeys=\"['sub1']\"\r\n            :style=\"{ height: '100%', borderRight: 80 }\">\r\n            <!--...................................................................................................-->\r\n            <a-sub-menu key=\"sub1\">\r\n\r\n              <span slot=\"title\"><a-icon type=\"user\"/>下一任务</span>\r\n\r\n              <a-menu-item :key=\"item.oaProcActinst.actId\" v-for=\"item in nextsActs\" @click=\"clickAct(item)\">\r\n                {{item.oaProcActinst.actName}}\r\n              </a-menu-item>\r\n\r\n            </a-sub-menu>\r\n\r\n            <!--...................................................................................................-->\r\n          </a-menu>\r\n        </a-layout-sider>\r\n        <!--.........................//////////////////////////////////////////..........................................................................-->\r\n        <a-layout v-if=\"!endType\" style=\"padding: 2px 2px 2px\">\r\n\r\n          <a-breadcrumb style=\"margin: 16px 0\">\r\n            <div>\r\n              &nbsp;&nbsp;&nbsp;&nbsp;\r\n              <a-radio-group name=\"radioGroup\" @change=\"changeChoice\" :defaultValue=\"1\">\r\n                <a-radio :value=\"1\">不限时间</a-radio>\r\n                <a-radio :value=\"2\">限制时间</a-radio>\r\n              </a-radio-group>\r\n              &nbsp;&nbsp;&nbsp;&nbsp; 期望任务办理结束时间:\r\n              <a-date-picker @change=\"onChange\" showTime format=\"YYYY-MM-DD HH:mm:ss\"\r\n                             placeholder=\"请选择结束时间\"/>\r\n            </div>\r\n          </a-breadcrumb>\r\n          <a-layout-content\r\n            :style=\"{ background: '#fff', padding: '10px', margin: 0, minHeight: '280px' }\">\r\n            <!--********************************* 下一办理人选用户(区分：普通/并行/包容网关) [仅记录选择记录] ********************************-->\r\n            <!--可多选 1 数据分类(单选/多选/部门选) -->\r\n            <!--1 普通-->\r\n            <div v-if=\"!isDept\">\r\n              <div v-if=\"!isMul\">\r\n                <a-table\r\n                  ref=\"table\"\r\n                  size=\"middle\"\r\n                  bordered\r\n                  :customRow=\"setRowRadio\"\r\n                  rowKey=\"uid\"\r\n                  :columns=\"columns\"\r\n                  :dataSource=\"dataSource\"\r\n                  :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange,type:'radio'}\"\r\n                >\r\n                </a-table>\r\n              </div>\r\n              <div v-if=\"isMul\">\r\n                <a-table\r\n                  ref=\"table\"\r\n                  size=\"middle\"\r\n                  bordered\r\n                  rowKey=\"uid\"\r\n                  :customRow=\"setRowCheck\"\r\n                  :columns=\"columns\"\r\n                  :dataSource=\"dataSource\"\r\n                  :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange,type:'checkbox'}\"\r\n                >\r\n                </a-table>\r\n              </div>\r\n            </div>\r\n\r\n            <!--选部门-->\r\n            <div class=\"box\" v-if=\"isDept\">\r\n              <!--左侧部门-->\r\n              <div class=\"left\">\r\n                <a-table\r\n                  ref=\"table\"\r\n                  size=\"small\"\r\n                  bordered\r\n                  rowKey=\"id\"\r\n                  rowSelection\r\n                  :loading=\"loading\"\r\n                  :columns=\"columns2\"\r\n                  :customRow=\"departClickCheck\"\r\n                  :dataSource=\"mockData\"\r\n                  :pagination=\"ipagination\"\r\n                  :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange}\"\r\n                  @change=\"handleTableChange\"\r\n                >\r\n                </a-table>\r\n              </div>\r\n\r\n              <!--右侧选择-->\r\n              <div class=\"right\">\r\n                <div v-for=\"item in deptsList\">\r\n                  <!--左右布局-->\r\n                  <div class=\"box1\">\r\n                    <div class=\"rightLeft\" style=\"margin-top: 20px;\">\r\n                      <a-button @click=\"toRight(item)\">\r\n                        <a-icon type=\"right\"/>\r\n                        添加到{{item}}\r\n                      </a-button>\r\n                      <a-button @click=\"toLeft(item)\">\r\n                        <a-icon type=\"left\"/>\r\n                        从{{item}}删除\r\n                      </a-button>\r\n                    </div>\r\n                    <div class=\"rightRight\">\r\n\r\n                      <template>\r\n                        <h4 color=\"red\">{{item}}部门</h4>\r\n                        <a-checkbox :id=\"item\" @change=\"onCheckAllChange\"></a-checkbox>\r\n\r\n                        <a-row v-for=\"i in departSelect[item]\">\r\n                          <a-col :span=\"100\">\r\n                            <a-checkbox :ref=\"item\" :key=\"i.id\" :value=\"i.id+'-'+item\" @change=\"onChangeCheck\">\r\n                              {{i.departName}}\r\n                            </a-checkbox>\r\n                          </a-col>\r\n                        </a-row>\r\n                      </template>\r\n                    </div>\r\n\r\n                    <div class=\"rightRight1\">\r\n                      <template>\r\n                        <h4 color=\"red\">{{item}}部门用户</h4>\r\n                        <!--<a-button type=\"primary\" size=\"small\" @click=\"queryUser(item)\">【{{item}}】人员</a-button>-->\r\n                        <a-row v-for=\"i in departUsersMsg[item]\">\r\n                          <a-col :span=\"100\">\r\n                            {{i.username}}\r\n                          </a-col>\r\n                        </a-row>\r\n                      </template>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </a-layout-content>\r\n        </a-layout>\r\n      </a-layout>\r\n    </a-layout>\r\n\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\n  import {getAction, postAction} from \"../../../api/manage\";\r\n  import {JeecgListMixin} from '@/mixins/JeecgListMixin'\r\n  import DictItemList from \"../../system/DictItemList\";\r\n\r\n\r\n  export default {\r\n    name: \"nextUsers\",\r\n    mixins: [JeecgListMixin],\r\n    components: {DictItemList},\r\n    data() {\r\n      return {\r\n        title: '下一任务',\r\n        okText: '确定',\r\n        //控制组件数据可见\r\n        isMul: false, //下一任务是单选/多选\r\n        isDept: false,\r\n        endType: false,//是否是结束节点\r\n        nextsActs: [],\r\n        //节点信息\r\n        activity: '',\r\n        endTime: '',\r\n        //穿梭框数据\r\n        mockData: [],\r\n        //部门信息\r\n        deptsList: [],\r\n        //部门选择集合\r\n        departSelect: {},\r\n        //部门对应用户id\r\n        departUsersId: {},\r\n        departUsersMsg: {},\r\n        //环节分类，从属于 排他，并行，包容网关\r\n        gateWayTypeSelect: {\r\n          parallel: {},\r\n          inclusive: {},\r\n        },\r\n        typeCount: {\r\n          normal: [],\r\n          inclusive: [],\r\n          parallel: [],\r\n        },\r\n        preCilck: null,\r\n        timeCheck: false,//是否限制时间\r\n        columns: [\r\n          {\r\n            title: '用户姓名',\r\n            align: \"center\",\r\n            dataIndex: 'uname'\r\n          }, {\r\n            title: '所在部门',\r\n            align: \"center\",\r\n            dataIndex: 'dname'\r\n          }\r\n        ],\r\n        columns2: [\r\n          {\r\n            title: '部门名称',\r\n            align: \"center\",\r\n            dataIndex: 'departName'\r\n          }\r\n        ],\r\n        dataSource: [],\r\n        visible: false,\r\n        confirmLoading: false,\r\n\r\n        urls: {\r\n          departUsetQuery: '/oaBus/taskInAct/deptUsersQuery'\r\n        }\r\n      }\r\n    },\r\n    computed: {},\r\n    methods: {\r\n      // getCheckboxProps(res){\r\n      //   return res=>({\r\n      //     props: {\r\n      //       defaultChecked:res.uid===this.dataSource[0].uid\r\n      //     }\r\n      //   })\r\n      // },\r\n      departClickCheck(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let rowkeys = this.selectedRowKeys;\r\n              let selectionRows = this.selectionRows;\r\n              if (rowkeys.length > 0 && rowkeys.includes(res.id)) {\r\n                rowkeys.splice(rowkeys.indexOf(res.id), 1);\r\n                selectionRows.splice(rowkeys.indexOf(res), 1);\r\n              } else {\r\n                rowkeys.push(res.id);\r\n                selectionRows.push(res);\r\n              }\r\n              this.selectedRowKeys = rowkeys;\r\n              this.selectionRows = selectionRows;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      setRowRadio(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let keys = [];\r\n              keys.push(res.uid);\r\n              this.selectedRowKeys = keys;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      setRowCheck(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let rowkeys = this.selectedRowKeys;\r\n              if (rowkeys.length > 0 && rowkeys.includes(res.uid)) {\r\n                rowkeys.splice(rowkeys.indexOf(res.uid), 1);\r\n              } else {\r\n                rowkeys.push(res.uid);\r\n              }\r\n              this.selectedRowKeys = rowkeys;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      // onSelectChange(e,d) {\r\n      //   // alert(JSON.stringify(d))\r\n      //   this.selectedRowKeys = e;\r\n      // },\r\n      onChangeCheck(item) {\r\n        var id = (item.target.value).split('-')[0]\r\n        var type = (item.target.value).split('-')[1]\r\n        //修改数据属性(修改选中状态用来向左边传)\r\n        for (var i in  this.departSelect[type]) {\r\n          if (id == this.departSelect[type][i].id) {\r\n            this.departSelect[type][i].checked = true\r\n          }\r\n        }\r\n      },\r\n      showNextUsers(nextsActs) {\r\n        if (nextsActs.length > 0 && nextsActs[0].actMsg.type == 'endEvent') {\r\n          this.endType = true\r\n          this.title = '办结'\r\n          this.okText = '办结'\r\n          this.activity = nextsActs[0]\r\n        } else {\r\n          this.nextsActs = nextsActs\r\n          //统计数量\r\n          //---------默认选择 下一任下第一个环节----------\r\n          this.clickAct(this.nextsActs[0]);\r\n          for (let i of nextsActs) {\r\n            let inclusiveGateway = i.actMsg.inclusiveGateway\r\n            let parallelGateway = i.actMsg.parallelGateway\r\n            if (inclusiveGateway) {\r\n              this.typeCount.inclusive.push(i)\r\n            } else if (parallelGateway) {\r\n              this.typeCount.parallel.push(i)\r\n            } else {\r\n              this.typeCount.normal.push(i)\r\n            }\r\n\r\n          }\r\n        }\r\n        this.visible = true\r\n      },\r\n      //点击某一节点---选择节点相关信息\r\n      clickAct(item) {\r\n        /**\r\n         *  (包容/并行网关)记录上一节点的选择信息\r\n         *  TODO 方式待修改\r\n         */\r\n        var preType = null\r\n        if (this.preCilck != null) {\r\n          preType = (this.preCilck.oaProcActinst.userOrRole) == 'dept'\r\n        }\r\n\r\n        if (this.preCilck != null &&\r\n          (\r\n            (preType && Object.keys(this.departSelect).length > 0)\r\n            ||\r\n            (!preType && this.selectionRows.length > 0))) {\r\n          //判断类型是并行还是包容//并记录选择的内容\r\n          let select = {}\r\n          select['activity'] = this.preCilck\r\n          if (preType) {\r\n            select['deptsList'] = this.deptsList\r\n            select['departSelect'] = this.departSelect\r\n            select['departUsersId'] = this.departUsersId\r\n            select['mockData'] = this.mockData\r\n          }\r\n          if (!preType) {\r\n            select['selectedRowKeys'] = this.selectedRowKeys\r\n            select['selectionRows'] = this.selectionRows\r\n          }\r\n          if (this.preCilck.actMsg.inclusiveGateway) {\r\n            this.gateWayTypeSelect.inclusive[this.preCilck.actMsg.id] = select\r\n          }\r\n          if (this.preCilck.actMsg.parallelGateway) {\r\n            this.gateWayTypeSelect.parallel[this.preCilck.actMsg.id] = select\r\n          }\r\n        }\r\n\r\n        //清空旧的选择\r\n        this.selectedRowKeys = []\r\n        this.selectionRows = []\r\n\r\n        //查看节点信息\r\n        //复选框还是单选\r\n        this.isMul = item.oaProcActinst.multAssignee\r\n        //是否选部门\r\n        this.isDept = (item.oaProcActinst.userOrRole) == 'dept'\r\n\r\n\r\n        //判断当前节点是否是包容/并行网关 之前是否记录过它的选择信息,记录过就使用\r\n        if (item.actMsg.inclusiveGateway || item.actMsg.parallelGateway) {//包容/并行\r\n          let currentAct = this.gateWayTypeSelect.inclusive[item.actMsg.id]\r\n          if (currentAct != undefined && !this.isDept) {\r\n            this.selectedRowKeys = currentAct['selectedRowKeys']\r\n            this.selectionRows = currentAct['selectionRows']\r\n          }\r\n        }\r\n\r\n\r\n        if (this.isDept) {\r\n          //判断是否是包容/并行\r\n          let currentAct = this.gateWayTypeSelect.inclusive[item.actMsg.id]\r\n\r\n          if ((item.actMsg.inclusiveGateway || item.actMsg.parallelGateway) && currentAct != undefined) {\r\n            this.deptsList = currentAct['deptsList']\r\n            this.departSelect = currentAct['departSelect']\r\n            this.departUsersId = currentAct['departUsersId']\r\n            this.mockData = currentAct['mockData']\r\n          } else {\r\n            this.mockData = item.nextUsers\r\n            this.deptsList = item.oaProcActinst.deptsList\r\n            for (var x in  this.deptsList) {\r\n              //构造备选集合\r\n              this.departSelect[this.deptsList[x]] = []\r\n              //部门选择用户集合构造\r\n              this.departUsersId[this.deptsList[x]] = []\r\n              //备选用户完整信息\r\n              this.departUsersMsg[this.deptsList[x]] = []\r\n            }\r\n          }\r\n\r\n        }\r\n        //节点信息\r\n        this.activity = item\r\n        //记录上一环节\r\n        this.preCilck = item\r\n        this.dataSource = item.nextUsers\r\n        if (!this.isDept && this.dataSource.length > 0) {\r\n          //默认选中表格第一个--------------------------------------\r\n          let defaultSelected = [];\r\n          defaultSelected.push(this.dataSource[0].uid);\r\n          this.selectedRowKeys = defaultSelected;\r\n        }\r\n\r\n      },\r\n      confirm() {\r\n\r\n        //时间校验\r\n        this.timeCheckMethod()\r\n        //校验并行与包容\r\n        let palllen = this.typeCount.parallel.length\r\n        let ialllen = this.typeCount.inclusive.length\r\n        if (palllen == 0 && ialllen == 0) {//非包容/并行\r\n          this.singleType()\r\n        } else {//包容/并行\r\n          this.gateWayCheck()\r\n          this.moreThanOneType()\r\n        }\r\n      },\r\n      //并行或包容\r\n      moreThanOneType() {\r\n        console.log('      包容 ::::', JSON.stringify(this.gateWayTypeSelect))\r\n        this.$emit('confirmNextUsersMore', this.gateWayTypeSelect, this.endTime)\r\n      },\r\n      //时间校验\r\n      timeCheckMethod() {\r\n        if (this.timeCheck) {\r\n          if (this.endTime == '') {\r\n            this.$message.error('请选择办理结束时间')\r\n            return\r\n          }\r\n          if (new Date() > new Date(this.endTime)) {\r\n            this.$message.error('办理结束时间不得小于当前时间')\r\n            return\r\n          }\r\n        }\r\n      },\r\n      //包容/并行网关校验\r\n      gateWayCheck() {\r\n        let plen = Object.keys(this.gateWayTypeSelect.parallel).length\r\n        let ilen = Object.keys(this.gateWayTypeSelect.inclusive).length\r\n        let palllen = this.typeCount.parallel.length\r\n        let ialllen = this.typeCount.inclusive.length\r\n\r\n        if (palllen == 0 && ialllen == 0) {\r\n          return\r\n        }\r\n        if (plen != palllen) {\r\n          this.$message.error('当前的所有环节都必须选择用户')\r\n          return\r\n        }\r\n        if (plen == palllen && palllen != 0) {\r\n          var res = window.confirm(\"已选择所有环节是否检查所选用户\");\r\n          if (res) {\r\n            return\r\n          }\r\n          //校验用户\r\n          this.moreThanOneUserCheck('parallel')\r\n        }\r\n        if (ilen != ialllen) {\r\n          if (ilen == 0) {\r\n            this.$message.error('您没有选择环节或选择的部门没有可办理用户请检查')\r\n            return\r\n          }\r\n          var res = window.confirm(\"可以选择所有环节是否继续选择\");\r\n          if (res) {\r\n            return\r\n          }\r\n          //校验选择的用户\r\n          this.moreThanOneUserCheck('inclusive')\r\n        }\r\n        if (ilen == ialllen && ialllen != 0) {\r\n          var res = window.confirm(\"已选择所有环节是否检查所选用户\");\r\n          if (res) {\r\n            return\r\n          }\r\n          this.moreThanOneUserCheck('inclusive')\r\n        }\r\n      },\r\n      moreThanOneUserCheck(type) {\r\n        var data = null\r\n        if (type == 'inclusive') {\r\n          data = this.gateWayTypeSelect.inclusive\r\n        }\r\n        if (type == 'parallel') {\r\n          data = this.gateWayTypeSelect.parallel\r\n        }\r\n\r\n        for (let index in  data) {\r\n          let d = data[index]\r\n          let isDept = d.activity.actMsg.userOrRole == 'dept'\r\n          if (isDept) {//部门类型\r\n            let dep = d.departUsersId\r\n            for (let k in dep) {\r\n              let v = dep[k]\r\n              if (k.indexOf(\"主办\") >= 0) {\r\n                if (v.length <= 0) {\r\n                  this.$message.error('主办部门必须选择办理人')\r\n                  return\r\n                }\r\n              }\r\n            }\r\n\r\n          } else {//用户类\r\n            if (d.selectedRowKeys.length <= 0) {\r\n              this.$message.error(d.activity.actMsg.name + '环节，请选择办理人')\r\n              return\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n      },\r\n      //非包容/并行网关办理方式\r\n      singleType() {\r\n        var ids = []\r\n        if (this.isDept) {\r\n\r\n          let ids = []\r\n          let depMSg = {}\r\n          for (let i in this.departUsersId) {\r\n\r\n            if (i.indexOf(\"主办\") >= 0 && this.departUsersId[i].length == 0) {\r\n              this.$message.error(i + \"部门必须选择用户\")\r\n              return\r\n            }\r\n\r\n            if (this.departUsersId[i].length > 0) {\r\n              ids.push(this.departUsersId[i])\r\n              depMSg[i] = this.departUsersId[i]\r\n            }\r\n          }\r\n          console.log('==========部门：：：', ids, JSON.stringify(this.activity))\r\n          //校验\r\n          this.$emit('func', ids, this.activity, this.endTime, depMSg)\r\n          this.cancel()\r\n        } else if (this.endType) {\r\n          this.$emit('func', ids, this.activity, this.endTime)\r\n          this.cancel()\r\n        } else {\r\n          //办理人校验\r\n          if (this.selectedRowKeys.length <= 0) {\r\n            this.$message.error(\"请选择办理人\")\r\n            return\r\n          }\r\n          ids = this.selectedRowKeys\r\n\r\n          console.log('------普通：' + ids, JSON.stringify(this.activity))\r\n          //办理流程\r\n          this.$emit('func', ids, this.activity, this.endTime)\r\n          this.cancel()\r\n        }\r\n      },\r\n      //穿梭方法实现\r\n      toRight: function (item) {\r\n        //从部门列表中移除--添加到对应的list中\r\n        //1 主办部门只能有一个\r\n\r\n        if (item.indexOf(\"主办\") >= 0) {\r\n          //判断是否已经有元素了\r\n          if (((this.departSelect[item].length == 0 && this.selectionRows.length > 1)) || (this.departSelect[item].length > 0)) {\r\n            this.$message.error(\"主办部门只允许有一个\")\r\n            return\r\n          }\r\n        }\r\n        //2 添加到右边--移除左边\r\n        var del = {}\r\n        for (var i in this.selectionRows) {\r\n          this.selectionRows[i].checked = false\r\n          //右边\r\n          this.departSelect[item].push(this.selectionRows[i])\r\n          //移除元素\r\n          del[this.selectionRows[i].id] = 1\r\n        }\r\n\r\n        //移除元素(采用重新赋值的方式)\r\n        var mockData2 = []\r\n        for (var j = 0; j < this.mockData.length; j++) {\r\n          if (del[this.mockData[j].id] != 1) {\r\n            mockData2.push(this.mockData[j])\r\n          }\r\n        }\r\n        this.mockData = mockData2\r\n        //清空所选\r\n        this.selectionRows = []\r\n        this.selectedRowKeys = []\r\n        // 更新用户显示\r\n        this.currentDeptUserQuery(item)\r\n\r\n      },\r\n      toLeft(item) {\r\n        //添加到部门列表中--从list中移除\r\n\r\n        var right = []\r\n        for (var i in this.departSelect[item]) {\r\n          var itt = this.departSelect[item][i]\r\n          if (itt.checked) {\r\n            itt.checked = false\r\n            this.mockData.push(itt)\r\n          } else {\r\n            right.push(itt)\r\n          }\r\n        }\r\n        //改变右边\r\n        this.departSelect[item] = right\r\n        // 更新用户显示\r\n        this.currentDeptUserQuery(item)\r\n\r\n\r\n      },\r\n      /**\r\n       * 选中部门的用户查询\r\n       * @param item\r\n       */\r\n      currentDeptUserQuery(item) {\r\n\r\n        var role = this.activity.oaProcActinst.candidates\r\n        var depts = this.departSelect\r\n\r\n        var param = {}\r\n        param.role = role\r\n        param.depts = depts\r\n\r\n        if (depts[item].length == 0) {\r\n          this.departUsersId[item] = []\r\n          this.departUsersMsg[item] = []\r\n          let keys = []\r\n          let rows = []\r\n          this.onSelectChange(keys, rows)\r\n          return\r\n        }\r\n\r\n        //查询部门对应的用户id 分组\r\n        postAction(this.urls.departUsetQuery, param).then(res => {\r\n          if (res.success) {\r\n            if (res.result[item].length == 0) {\r\n              this.$message.error('所选' + item + '部门没有对应角色的用户')\r\n              this.departUsersId[item] = []\r\n              this.departUsersMsg[item] = []\r\n              let keys = []\r\n              let rows = []\r\n              this.onSelectChange(keys, rows)\r\n              return\r\n            } else {\r\n              let ids = []\r\n              for (let i in res.result[item]) {\r\n                ids.push(res.result[item][i].id)\r\n              }\r\n              this.departUsersId[item] = ids\r\n              this.departUsersMsg[item] = res.result[item]\r\n\r\n              let keys = []\r\n              let rows = []\r\n              this.onSelectChange(keys, rows)\r\n            }\r\n          } else {\r\n            this.$message.error(res.message)\r\n            return\r\n          }\r\n        })\r\n\r\n      }\r\n      ,\r\n      cancel() {\r\n        //初始数据\r\n        this.dataInit()\r\n\r\n        this.$emit('close');\r\n        this.visible = false;\r\n      }\r\n      ,\r\n      onChange(date, dateString) {\r\n        this.endTime = dateString\r\n      }\r\n      ,\r\n      changeChoice(e) {\r\n        if (e.target.value == 1) {\r\n          //不限时间\r\n          this.timeCheck = false\r\n        } else {\r\n          this.timeCheck = true\r\n        }\r\n      }\r\n      ,\r\n      dataInit() {\r\n        this.selectionRows = []\r\n        this.selectedRowKeys = []\r\n        this.endTime = ''\r\n      },\r\n      /**\r\n       * 全选/不选\r\n       */\r\n      onCheckAllChange(e) {\r\n        let checked = e.target.checked\r\n        let type = e.target.id\r\n        if (checked) {\r\n          //修改数据属性\r\n          for (var i in  this.departSelect[type]) {\r\n            this.departSelect[type][i].checked = true\r\n            this.$refs[type][i].checked = true\r\n          }\r\n        } else {\r\n          for (var i in  this.departSelect[type]) {\r\n            this.departSelect[type][i].checked = false\r\n            this.$refs[type][i].checked = false\r\n\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n  }\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  .box {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n\r\n    .left {\r\n      width: 30%;\r\n    }\r\n\r\n    .right {\r\n      width: 69%;\r\n      height: 400px;\r\n      /*background: #dddddd;*/\r\n      overflow-y: scroll;\r\n\r\n\r\n      .box1 {\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: flex-start;\r\n        justify-content: space-between;\r\n        /*background: darkcyan;*/\r\n\r\n        .rightRight {\r\n          /*width: 90%;*/\r\n          width: 500px;\r\n          height: 120px;\r\n          /*background: #fff;*/\r\n          margin-left: 150px;\r\n          margin-right: 1px;\r\n          margin-top: 12px;\r\n          overflow-y: scroll;\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    .rightRight1 {\r\n      /*width: 90%;*/\r\n      width: 200px;\r\n      height: 120px;\r\n      /*background: #fff;*/\r\n      margin-left: 1px;\r\n      margin-right: 10px;\r\n      margin-top: 10px;\r\n      overflow-y: scroll;\r\n    }\r\n\r\n\r\n    .rightLeft {\r\n      width: 5%;\r\n    }\r\n\r\n\r\n  }\r\n</style>"]}]}