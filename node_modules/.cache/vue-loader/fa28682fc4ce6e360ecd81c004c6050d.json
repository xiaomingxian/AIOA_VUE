{"remainingRequest":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCodeEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCodeEditor.vue","mtime":1568535200518},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858740},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696677}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 引入全局实例\nimport _CodeMirror from 'codemirror'\n\n// 核心样式\nimport 'codemirror/lib/codemirror.css'\n// 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\nimport 'codemirror/theme/panda-syntax.css'\n//提示css\nimport \"codemirror/addon/hint/show-hint.css\";\n\n// 需要引入具体的语法高亮库才会有对应的语法高亮效果\n// codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n// 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\nimport 'codemirror/mode/javascript/javascript.js'\nimport 'codemirror/mode/css/css.js'\nimport 'codemirror/mode/xml/xml.js'\nimport 'codemirror/mode/clike/clike.js'\nimport 'codemirror/mode/markdown/markdown.js'\nimport 'codemirror/mode/python/python.js'\nimport 'codemirror/mode/r/r.js'\nimport 'codemirror/mode/shell/shell.js'\nimport 'codemirror/mode/sql/sql.js'\nimport 'codemirror/mode/swift/swift.js'\nimport 'codemirror/mode/vue/vue.js'\n\n// 尝试获取全局实例\nconst CodeMirror = window.CodeMirror || _CodeMirror\n\nexport default {\n  name: 'JCodeEditor',\n  props: {\n    // 外部传入的内容，用于实现双向绑定\n    value: {\n      type: String,\n      default: ''\n    },\n    // 外部传入的语法类型\n    language: {\n      type: String,\n      default: null\n    },\n   languageChange:{\n     type: Boolean,\n     default:false,\n     required:false\n   },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    // 显示行号\n    lineNumbers: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示全屏按钮\n    fullScreen: {\n      type: Boolean,\n      default: false\n    },\n    // 全屏以后的z-index\n    zIndex: {\n      type: [Number, String],\n      default: 999\n    }\n  },\n  data () {\n    return {\n      // 内部真实的内容\n      code: '',\n      hasCode:false,\n      // 默认的语法类型\n      mode: 'javascript',\n      // 编辑器实例\n      coder: null,\n      // 默认配置\n      options: {\n        // 缩进格式\n        tabSize: 2,\n        // 主题，对应主题库 JS 需要提前引入\n        theme: 'panda-syntax',\n        line: true,\n       // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\n        hintOptions: {\n          tables: {\n            users: ['name', 'score', 'birthDate'],\n            countries: ['name', 'population', 'size']\n          }\n        },\n      },\n      // 支持切换的语法高亮类型，对应 JS 已经提前引入\n      // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n      modes: [{\n        value: 'css',\n        label: 'CSS'\n      }, {\n        value: 'javascript',\n        label: 'Javascript'\n      }, {\n        value: 'html',\n        label: 'XML/HTML'\n      }, {\n        value: 'x-java',\n        label: 'Java'\n      }, {\n        value: 'x-objectivec',\n        label: 'Objective-C'\n      }, {\n        value: 'x-python',\n        label: 'Python'\n      }, {\n        value: 'x-rsrc',\n        label: 'R'\n      }, {\n        value: 'x-sh',\n        label: 'Shell'\n      }, {\n        value: 'x-sql',\n        label: 'SQL'\n      }, {\n        value: 'x-swift',\n        label: 'Swift'\n      }, {\n        value: 'x-vue',\n        label: 'Vue'\n      }, {\n        value: 'markdown',\n        label: 'Markdown'\n      }],\n      // code 编辑器 是否全屏\n      fullCoder: false\n    }\n  },\n  watch: {\n    // value: {\n    //   immediate: false,\n    //   handler(value) {\n    //     this._getCoder().then(() => {\n    //       this.coder.setValue(value)\n    //     })\n    //   }\n    // },\n    language: {\n      immediate: true,\n      handler(language) {\n        this._getCoder().then(() => {\n          // 尝试从父容器获取语法类型\n          if (language) {\n            // 获取具体的语法类型对象\n            let modeObj = this._getLanguage(language)\n\n            // 判断父容器传入的语法是否被支持\n            if (modeObj) {\n              this.mode = modeObj.label\n              this.coder.setOption('mode', `text/${modeObj.value}`)\n            }\n          }\n        })\n      }\n    }\n  },\n  computed: {\n    placeholderShow() {\n      if (this.placeholder == null) {\n        return `请在此输入${this.language}代码`\n      } else {\n        return this.placeholder\n      }\n    },\n    nullTipStyle(){\n      if (this.lineNumbers) {\n        return { left: '36px' }\n      } else {\n        return { left: '12px' }\n      }\n    },\n    // coder 配置\n    coderOptions() {\n      return {\n        tabSize: this.options.tabSize,\n        theme: this.options.theme,\n        lineNumbers: this.lineNumbers,\n        line: true,\n        hintOptions: this.options.hintOptions\n      }\n    },\n    fullScreenParentProps(){\n      let props = {\n        class: ['full-screen-parent', this.fullCoder ? 'full-screen' : ''],\n        style: {}\n      }\n      if (this.fullCoder) {\n        props.style['z-index'] = this.zIndex\n      }\n      return props\n    }\n  },\n  mounted () {\n    // 初始化\n    this._initialize()\n  },\n  methods: {\n    // 初始化\n    _initialize () {\n      // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n      this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions)\n      // 编辑器赋值\n      this.coder.setValue(this.value || this.code)\n      if(this.value||this.code){\n        this.hasCode=true\n      }else{\n        this.hasCode=false\n      }\n      // 支持双向绑定\n      this.coder.on('change', (coder) => {\n        this.code = coder.getValue()\n        if(this.code){\n          this.hasCode=true\n        }else{\n          this.hasCode=false\n        }\n        if (this.$emit) {\n          this.$emit('input', this.code)\n        }\n      })\n      this.coder.on('focus', () => {\n        this.hasCode=true\n      })\n      this.coder.on('blur', () => {\n        if(this.code){\n          this.hasCode=true\n        }else{\n          this.hasCode=false\n        }\n      })\n\n     /* this.coder.on('cursorActivity',()=>{\n        this.coder.showHint()\n      })*/\n\n    },\n    getCodeContent(){\n      return this.code\n    },\n    setCodeContent(val){\n      this.coder.setValue(val)\n    },\n    // 获取当前语法类型\n    _getLanguage (language) {\n      // 在支持的语法类型列表中寻找传入的语法类型\n      return this.modes.find((mode) => {\n        // 所有的值都忽略大小写，方便比较\n        let currentLanguage = language.toLowerCase()\n        let currentLabel = mode.label.toLowerCase()\n        let currentValue = mode.value.toLowerCase()\n\n        // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n        return currentLabel === currentLanguage || currentValue === currentLanguage\n      })\n    },\n    _getCoder() {\n      let _this = this\n      return new Promise((resolve) => {\n        (function get() {\n          if (_this.coder) {\n            resolve(_this.coder)\n          } else {\n            setTimeout(get, 10)\n          }\n        })()\n      })\n    },\n    // 更改模式\n    changeMode (val) {\n      // 修改编辑器的语法配置\n      this.coder.setOption('mode', `text/${val}`)\n\n      // 获取修改后的语法\n      let label = this._getLanguage(val).label.toLowerCase()\n\n      // 允许父容器通过以下函数监听当前的语法值\n      this.$emit('language-change', label)\n    },\n    nullTipClick(){\n      this.coder.focus()\n    }\n  }\n}\n",{"version":3,"sources":["JCodeEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JCodeEditor.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <div v-bind=\"fullScreenParentProps\">\r\n    <a-icon v-if=\"fullScreen\" class=\"full-screen-icon\" type=\"fullscreen\" @click=\"()=>fullCoder=!fullCoder\"/>\r\n\r\n    <div class=\"code-editor-cust full-screen-child\">\r\n      <textarea ref=\"textarea\"></textarea>\r\n      <span @click=\"nullTipClick\" class=\"null-tip\" :class=\"{'null-tip-hidden':hasCode}\" :style=\"nullTipStyle\">{{ placeholderShow }}</span>\r\n      <template v-if=\"languageChange\">\r\n        <a-select v-model=\"mode\" size=\"small\" class=\"code-mode-select\" @change=\"changeMode\" placeholder=\"请选择主题\">\r\n          <a-select-option\r\n            v-for=\"mode in modes\"\r\n            :key=\"mode.value\"\r\n            :value=\"mode.value\">\r\n            {{ mode.label }}\r\n          </a-select-option>\r\n        </a-select>\r\n      </template>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\n  // 引入全局实例\r\n  import _CodeMirror from 'codemirror'\r\n\r\n  // 核心样式\r\n  import 'codemirror/lib/codemirror.css'\r\n  // 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\r\n  import 'codemirror/theme/panda-syntax.css'\r\n  //提示css\r\n  import \"codemirror/addon/hint/show-hint.css\";\r\n\r\n  // 需要引入具体的语法高亮库才会有对应的语法高亮效果\r\n  // codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\r\n  // 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\r\n  import 'codemirror/mode/javascript/javascript.js'\r\n  import 'codemirror/mode/css/css.js'\r\n  import 'codemirror/mode/xml/xml.js'\r\n  import 'codemirror/mode/clike/clike.js'\r\n  import 'codemirror/mode/markdown/markdown.js'\r\n  import 'codemirror/mode/python/python.js'\r\n  import 'codemirror/mode/r/r.js'\r\n  import 'codemirror/mode/shell/shell.js'\r\n  import 'codemirror/mode/sql/sql.js'\r\n  import 'codemirror/mode/swift/swift.js'\r\n  import 'codemirror/mode/vue/vue.js'\r\n\r\n  // 尝试获取全局实例\r\n  const CodeMirror = window.CodeMirror || _CodeMirror\r\n\r\n  export default {\r\n    name: 'JCodeEditor',\r\n    props: {\r\n      // 外部传入的内容，用于实现双向绑定\r\n      value: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      // 外部传入的语法类型\r\n      language: {\r\n        type: String,\r\n        default: null\r\n      },\r\n     languageChange:{\r\n       type: Boolean,\r\n       default:false,\r\n       required:false\r\n     },\r\n      placeholder: {\r\n        type: String,\r\n        default: null\r\n      },\r\n      // 显示行号\r\n      lineNumbers: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      // 是否显示全屏按钮\r\n      fullScreen: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 全屏以后的z-index\r\n      zIndex: {\r\n        type: [Number, String],\r\n        default: 999\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        // 内部真实的内容\r\n        code: '',\r\n        hasCode:false,\r\n        // 默认的语法类型\r\n        mode: 'javascript',\r\n        // 编辑器实例\r\n        coder: null,\r\n        // 默认配置\r\n        options: {\r\n          // 缩进格式\r\n          tabSize: 2,\r\n          // 主题，对应主题库 JS 需要提前引入\r\n          theme: 'panda-syntax',\r\n          line: true,\r\n         // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\r\n          hintOptions: {\r\n            tables: {\r\n              users: ['name', 'score', 'birthDate'],\r\n              countries: ['name', 'population', 'size']\r\n            }\r\n          },\r\n        },\r\n        // 支持切换的语法高亮类型，对应 JS 已经提前引入\r\n        // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\r\n        modes: [{\r\n          value: 'css',\r\n          label: 'CSS'\r\n        }, {\r\n          value: 'javascript',\r\n          label: 'Javascript'\r\n        }, {\r\n          value: 'html',\r\n          label: 'XML/HTML'\r\n        }, {\r\n          value: 'x-java',\r\n          label: 'Java'\r\n        }, {\r\n          value: 'x-objectivec',\r\n          label: 'Objective-C'\r\n        }, {\r\n          value: 'x-python',\r\n          label: 'Python'\r\n        }, {\r\n          value: 'x-rsrc',\r\n          label: 'R'\r\n        }, {\r\n          value: 'x-sh',\r\n          label: 'Shell'\r\n        }, {\r\n          value: 'x-sql',\r\n          label: 'SQL'\r\n        }, {\r\n          value: 'x-swift',\r\n          label: 'Swift'\r\n        }, {\r\n          value: 'x-vue',\r\n          label: 'Vue'\r\n        }, {\r\n          value: 'markdown',\r\n          label: 'Markdown'\r\n        }],\r\n        // code 编辑器 是否全屏\r\n        fullCoder: false\r\n      }\r\n    },\r\n    watch: {\r\n      // value: {\r\n      //   immediate: false,\r\n      //   handler(value) {\r\n      //     this._getCoder().then(() => {\r\n      //       this.coder.setValue(value)\r\n      //     })\r\n      //   }\r\n      // },\r\n      language: {\r\n        immediate: true,\r\n        handler(language) {\r\n          this._getCoder().then(() => {\r\n            // 尝试从父容器获取语法类型\r\n            if (language) {\r\n              // 获取具体的语法类型对象\r\n              let modeObj = this._getLanguage(language)\r\n\r\n              // 判断父容器传入的语法是否被支持\r\n              if (modeObj) {\r\n                this.mode = modeObj.label\r\n                this.coder.setOption('mode', `text/${modeObj.value}`)\r\n              }\r\n            }\r\n          })\r\n        }\r\n      }\r\n    },\r\n    computed: {\r\n      placeholderShow() {\r\n        if (this.placeholder == null) {\r\n          return `请在此输入${this.language}代码`\r\n        } else {\r\n          return this.placeholder\r\n        }\r\n      },\r\n      nullTipStyle(){\r\n        if (this.lineNumbers) {\r\n          return { left: '36px' }\r\n        } else {\r\n          return { left: '12px' }\r\n        }\r\n      },\r\n      // coder 配置\r\n      coderOptions() {\r\n        return {\r\n          tabSize: this.options.tabSize,\r\n          theme: this.options.theme,\r\n          lineNumbers: this.lineNumbers,\r\n          line: true,\r\n          hintOptions: this.options.hintOptions\r\n        }\r\n      },\r\n      fullScreenParentProps(){\r\n        let props = {\r\n          class: ['full-screen-parent', this.fullCoder ? 'full-screen' : ''],\r\n          style: {}\r\n        }\r\n        if (this.fullCoder) {\r\n          props.style['z-index'] = this.zIndex\r\n        }\r\n        return props\r\n      }\r\n    },\r\n    mounted () {\r\n      // 初始化\r\n      this._initialize()\r\n    },\r\n    methods: {\r\n      // 初始化\r\n      _initialize () {\r\n        // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\r\n        this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions)\r\n        // 编辑器赋值\r\n        this.coder.setValue(this.value || this.code)\r\n        if(this.value||this.code){\r\n          this.hasCode=true\r\n        }else{\r\n          this.hasCode=false\r\n        }\r\n        // 支持双向绑定\r\n        this.coder.on('change', (coder) => {\r\n          this.code = coder.getValue()\r\n          if(this.code){\r\n            this.hasCode=true\r\n          }else{\r\n            this.hasCode=false\r\n          }\r\n          if (this.$emit) {\r\n            this.$emit('input', this.code)\r\n          }\r\n        })\r\n        this.coder.on('focus', () => {\r\n          this.hasCode=true\r\n        })\r\n        this.coder.on('blur', () => {\r\n          if(this.code){\r\n            this.hasCode=true\r\n          }else{\r\n            this.hasCode=false\r\n          }\r\n        })\r\n\r\n       /* this.coder.on('cursorActivity',()=>{\r\n          this.coder.showHint()\r\n        })*/\r\n\r\n      },\r\n      getCodeContent(){\r\n        return this.code\r\n      },\r\n      setCodeContent(val){\r\n        this.coder.setValue(val)\r\n      },\r\n      // 获取当前语法类型\r\n      _getLanguage (language) {\r\n        // 在支持的语法类型列表中寻找传入的语法类型\r\n        return this.modes.find((mode) => {\r\n          // 所有的值都忽略大小写，方便比较\r\n          let currentLanguage = language.toLowerCase()\r\n          let currentLabel = mode.label.toLowerCase()\r\n          let currentValue = mode.value.toLowerCase()\r\n\r\n          // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\r\n          return currentLabel === currentLanguage || currentValue === currentLanguage\r\n        })\r\n      },\r\n      _getCoder() {\r\n        let _this = this\r\n        return new Promise((resolve) => {\r\n          (function get() {\r\n            if (_this.coder) {\r\n              resolve(_this.coder)\r\n            } else {\r\n              setTimeout(get, 10)\r\n            }\r\n          })()\r\n        })\r\n      },\r\n      // 更改模式\r\n      changeMode (val) {\r\n        // 修改编辑器的语法配置\r\n        this.coder.setOption('mode', `text/${val}`)\r\n\r\n        // 获取修改后的语法\r\n        let label = this._getLanguage(val).label.toLowerCase()\r\n\r\n        // 允许父容器通过以下函数监听当前的语法值\r\n        this.$emit('language-change', label)\r\n      },\r\n      nullTipClick(){\r\n        this.coder.focus()\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n  .code-editor-cust{\r\n    flex-grow:1;\r\n    display:flex;\r\n    position:relative;\r\n    height:100%;\r\n    .CodeMirror{\r\n      flex-grow:1;\r\n      z-index:1;\r\n      .CodeMirror-code{\r\n        line-height:19px;\r\n      }\r\n\r\n    }\r\n    .code-mode-select{\r\n      position:absolute;\r\n      z-index:2;\r\n      right:10px;\r\n      top:10px;\r\n      max-width:130px;\r\n    }\r\n    .CodeMirror{\r\n      height: auto;\r\n      min-height:100%;\r\n    }\r\n    .null-tip{\r\n      position: absolute;\r\n      top: 4px;\r\n      left: 36px;\r\n      z-index: 10;\r\n      color: #ffffffc9;\r\n      line-height: initial;\r\n    }\r\n    .null-tip-hidden{\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  /* 全屏样式 */\r\n  .full-screen-parent {\r\n    position: relative;\r\n\r\n    .full-screen-icon {\r\n      opacity: 0;\r\n      color: black;\r\n      width: 20px;\r\n      height: 20px;\r\n      line-height: 24px;\r\n      background-color: white;\r\n      position: absolute;\r\n      top: 2px;\r\n      right: 2px;\r\n      z-index: 9;\r\n      cursor: pointer;\r\n      transition: opacity 0.3s;\r\n    }\r\n\r\n    &:hover {\r\n      .full-screen-icon {\r\n        opacity: 1;\r\n\r\n        &:hover {\r\n          background-color: rgba(255, 255, 255, 0.88);\r\n        }\r\n      }\r\n    }\r\n\r\n    &.full-screen {\r\n      position: fixed;\r\n      top: 10px;\r\n      left: 10px;\r\n      width: calc(100% - 20px);\r\n      height: calc(100% - 20px);\r\n      padding: 10px;\r\n      background-color: #f5f5f5;\r\n\r\n      .full-screen-icon {\r\n        top: 12px;\r\n        right: 12px;\r\n      }\r\n      .full-screen-child {\r\n        height: 100%;\r\n        max-height: 100%;\r\n        min-height: 100%;\r\n      }\r\n    }\r\n\r\n    .full-screen-child {\r\n      min-height: 120px;\r\n      max-height: 320px;\r\n    }\r\n\r\n  }\r\n\r\n\r\n</style>"]}]}