{"remainingRequest":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\jeecg\\modules\\JEditableTable\\DefaultTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\jeecg\\modules\\JEditableTable\\DefaultTable.vue","mtime":1568535243693},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858740},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696677}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { FormTypes } from '@/utils/JEditableTableUtil'\nimport { randomUUID, randomNumber } from '@/utils/util'\nimport JEditableTable from '@/components/jeecg/JEditableTable'\n\nexport default {\n  name: 'DefaultTable',\n  components: { JEditableTable },\n  data() {\n    return {\n      loading: false,\n      columns: [\n        {\n          title: '字段名称',\n          key: 'dbFieldName',\n          // width: '19%',\n          width: '300px',\n          type: FormTypes.input,\n          defaultValue: '',\n          placeholder: '请输入${title}',\n          validateRules: [\n            {\n              required: true, // 必填\n              message: '请输入${title}' // 显示的文本\n            },\n            {\n              pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/, // 正则\n              message: '${title}必须以字母开头，可包含数字、下划线、横杠'\n            }\n          ]\n        },\n        {\n          title: '文件域',\n          key: 'upload',\n          type: FormTypes.upload,\n          // width: '19%',\n          width: '300px',\n          placeholder: '点击上传',\n          token: true,\n          responseName: 'message',\n          action: window._CONFIG['domianURL'] + '/sys/common/upload'\n        },\n        {\n          title: '字段类型',\n          key: 'dbFieldType',\n          // width: '18%',\n          width: '300px',\n          type: FormTypes.select,\n          options: [ // 下拉选项\n            { title: 'String', value: 'string' },\n            { title: 'Integer', value: 'int' },\n            { title: 'Double', value: 'double' },\n            { title: 'Boolean', value: 'boolean' }\n          ],\n          allowInput: true,\n          defaultValue: '',\n          placeholder: '请选择${title}',\n          validateRules: [{ required: true, message: '请选择${title}' }]\n        },\n        {\n          title: '性别（字典）',\n          key: 'sex_dict',\n          width: '300px',\n          type: FormTypes.select,\n          options: [],\n          dictCode: 'sex',\n          placeholder: '请选择${title}',\n          validateRules: [{ required: true, message: '请选择${title}' }]\n        },\n        {\n          title: '多选测试',\n          key: 'multipleSelect',\n          // width: '18%',\n          width: '300px',\n          type: FormTypes.select,\n          props: { 'mode': 'multiple' }, // 支持多选\n          options: [\n            { title: 'String', value: 'string' },\n            { title: 'Integer', value: 'int' },\n            { title: 'Double', value: 'double' },\n            { title: 'Boolean', value: 'boolean' }\n          ],\n          defaultValue: ['int', 'boolean'], // 多个默认项\n          // defaultValue: 'string,double,int', // 也可使用这种方式\n          placeholder: '这里可以多选',\n          validateRules: [{ required: true, message: '请选择${title}' }]\n        },\n        {\n          title: '字段长度',\n          key: 'dbLength',\n          // width: '8%',\n          width: '100px',\n          type: FormTypes.inputNumber,\n          defaultValue: 32,\n          placeholder: '${title}',\n          validateRules: [{ required: true, message: '请输入${title}' }]\n        },\n        {\n          title: '日期',\n          key: 'datetime',\n          // width: '22%',\n          width: '320px',\n          type: FormTypes.datetime,\n          defaultValue: '2019-4-30 14:52:22',\n          placeholder: '请选择${title}',\n          validateRules: [{ required: true, message: '请选择${title}' }]\n        },\n        {\n          title: '可以为空',\n          key: 'isNull',\n          // width: '8%',\n          width: '100px',\n          type: FormTypes.checkbox,\n          customValue: ['Y', 'N'], // true ,false\n          defaultChecked: false\n        },\n        {\n          title: '操作',\n          key: 'action',\n          // width: '8%',\n          width: '100px',\n          type: FormTypes.slot,\n          slotName: 'action',\n          defaultValue: '删除'\n        }\n\n      ],\n      dataSource: [],\n      selectedRowIds: []\n    }\n  },\n  mounted() {\n    this.randomData(23, false)\n  },\n  methods: {\n\n    /** 表单验证 */\n    handleTableCheck() {\n      this.$refs.editableTable.getValues((error) => {\n        if (error === 0) {\n          this.$message.success('验证通过')\n        } else {\n          this.$message.error('验证未通过')\n        }\n      })\n    },\n    /** 获取值，忽略表单验证 */\n    handleTableGet() {\n      this.$refs.editableTable.getValues((error, values) => {\n        console.log('values:', values)\n      }, false)\n      console.log('deleteIds:', this.$refs.editableTable.getDeleteIds())\n\n      this.$message.info('获取值成功，请看控制台输出')\n\n    },\n    /** 模拟加载1000条数据 */\n    handleTableSet() {\n      this.randomData(1000, true)\n    },\n\n    handleSelectRowChange(selectedRowIds) {\n      this.selectedRowIds = selectedRowIds\n    },\n\n    /* 随机生成数据 */\n    randomData(size, loading = false) {\n      if (loading) {\n        this.loading = true\n      }\n\n      let randomDatetime = () => {\n        let time = parseInt(randomNumber(1000, 9999999999999))\n        return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\n      }\n\n      let begin = Date.now()\n      let values = []\n      for (let i = 0; i < size; i++) {\n        values.push({\n          id: randomUUID(),\n          dbFieldName: `name_${i + 1}`,\n          // dbFieldTxt: randomString(10),\n          multipleSelect: ['string', ['int', 'double', 'boolean'][randomNumber(0, 2)]],\n          dbFieldType: ['string', 'int', 'double', 'boolean'][randomNumber(0, 3)],\n          dbLength: randomNumber(0, 233),\n          datetime: randomDatetime(),\n          isNull: ['Y', 'N'][randomNumber(0, 1)]\n        })\n      }\n\n      this.dataSource = values\n      let end = Date.now()\n      let diff = end - begin\n\n      if (loading && diff < size) {\n        setTimeout(() => {\n          this.loading = false\n        }, size - diff)\n      }\n\n    },\n\n    handleDelete(props) {\n      let { rowId, target } = props\n      target.removeRows(rowId)\n    }\n  }\n}\n",{"version":3,"sources":["DefaultTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"DefaultTable.vue","sourceRoot":"src/views/jeecg/modules/JEditableTable","sourcesContent":["<template>\r\n\r\n  <div>\r\n    <a-button @click=\"handleTableCheck\" type=\"primary\">表单验证</a-button>\r\n    <span style=\"padding-left:8px;\"></span>\r\n    <a-tooltip placement=\"top\" title=\"获取值，忽略表单验证\" :autoAdjustOverflow=\"true\">\r\n      <a-button @click=\"handleTableGet\" type=\"primary\">获取值</a-button>\r\n    </a-tooltip>\r\n    <span style=\"padding-left:8px;\"></span>\r\n    <a-tooltip placement=\"top\" title=\"模拟加载1000条数据\" :autoAdjustOverflow=\"true\">\r\n      <a-button @click=\"handleTableSet\" type=\"primary\">设置值</a-button>\r\n    </a-tooltip>\r\n\r\n\r\n    <j-editable-table\r\n      ref=\"editableTable\"\r\n      :loading=\"loading\"\r\n      :columns=\"columns\"\r\n      :dataSource=\"dataSource\"\r\n      :rowNumber=\"true\"\r\n      :rowSelection=\"true\"\r\n      :actionButton=\"true\"\r\n      :dragSort=\"true\"\r\n      style=\"margin-top: 8px;\"\r\n      @selectRowChange=\"handleSelectRowChange\">\r\n\r\n      <template v-slot:action=\"props\">\r\n        <a @click=\"handleDelete(props)\">{{ props.text }}</a>\r\n      </template>\r\n\r\n    </j-editable-table>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n  import moment from 'moment'\r\n  import { FormTypes } from '@/utils/JEditableTableUtil'\r\n  import { randomUUID, randomNumber } from '@/utils/util'\r\n  import JEditableTable from '@/components/jeecg/JEditableTable'\r\n\r\n  export default {\r\n    name: 'DefaultTable',\r\n    components: { JEditableTable },\r\n    data() {\r\n      return {\r\n        loading: false,\r\n        columns: [\r\n          {\r\n            title: '字段名称',\r\n            key: 'dbFieldName',\r\n            // width: '19%',\r\n            width: '300px',\r\n            type: FormTypes.input,\r\n            defaultValue: '',\r\n            placeholder: '请输入${title}',\r\n            validateRules: [\r\n              {\r\n                required: true, // 必填\r\n                message: '请输入${title}' // 显示的文本\r\n              },\r\n              {\r\n                pattern: /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/, // 正则\r\n                message: '${title}必须以字母开头，可包含数字、下划线、横杠'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            title: '文件域',\r\n            key: 'upload',\r\n            type: FormTypes.upload,\r\n            // width: '19%',\r\n            width: '300px',\r\n            placeholder: '点击上传',\r\n            token: true,\r\n            responseName: 'message',\r\n            action: window._CONFIG['domianURL'] + '/sys/common/upload'\r\n          },\r\n          {\r\n            title: '字段类型',\r\n            key: 'dbFieldType',\r\n            // width: '18%',\r\n            width: '300px',\r\n            type: FormTypes.select,\r\n            options: [ // 下拉选项\r\n              { title: 'String', value: 'string' },\r\n              { title: 'Integer', value: 'int' },\r\n              { title: 'Double', value: 'double' },\r\n              { title: 'Boolean', value: 'boolean' }\r\n            ],\r\n            allowInput: true,\r\n            defaultValue: '',\r\n            placeholder: '请选择${title}',\r\n            validateRules: [{ required: true, message: '请选择${title}' }]\r\n          },\r\n          {\r\n            title: '性别（字典）',\r\n            key: 'sex_dict',\r\n            width: '300px',\r\n            type: FormTypes.select,\r\n            options: [],\r\n            dictCode: 'sex',\r\n            placeholder: '请选择${title}',\r\n            validateRules: [{ required: true, message: '请选择${title}' }]\r\n          },\r\n          {\r\n            title: '多选测试',\r\n            key: 'multipleSelect',\r\n            // width: '18%',\r\n            width: '300px',\r\n            type: FormTypes.select,\r\n            props: { 'mode': 'multiple' }, // 支持多选\r\n            options: [\r\n              { title: 'String', value: 'string' },\r\n              { title: 'Integer', value: 'int' },\r\n              { title: 'Double', value: 'double' },\r\n              { title: 'Boolean', value: 'boolean' }\r\n            ],\r\n            defaultValue: ['int', 'boolean'], // 多个默认项\r\n            // defaultValue: 'string,double,int', // 也可使用这种方式\r\n            placeholder: '这里可以多选',\r\n            validateRules: [{ required: true, message: '请选择${title}' }]\r\n          },\r\n          {\r\n            title: '字段长度',\r\n            key: 'dbLength',\r\n            // width: '8%',\r\n            width: '100px',\r\n            type: FormTypes.inputNumber,\r\n            defaultValue: 32,\r\n            placeholder: '${title}',\r\n            validateRules: [{ required: true, message: '请输入${title}' }]\r\n          },\r\n          {\r\n            title: '日期',\r\n            key: 'datetime',\r\n            // width: '22%',\r\n            width: '320px',\r\n            type: FormTypes.datetime,\r\n            defaultValue: '2019-4-30 14:52:22',\r\n            placeholder: '请选择${title}',\r\n            validateRules: [{ required: true, message: '请选择${title}' }]\r\n          },\r\n          {\r\n            title: '可以为空',\r\n            key: 'isNull',\r\n            // width: '8%',\r\n            width: '100px',\r\n            type: FormTypes.checkbox,\r\n            customValue: ['Y', 'N'], // true ,false\r\n            defaultChecked: false\r\n          },\r\n          {\r\n            title: '操作',\r\n            key: 'action',\r\n            // width: '8%',\r\n            width: '100px',\r\n            type: FormTypes.slot,\r\n            slotName: 'action',\r\n            defaultValue: '删除'\r\n          }\r\n\r\n        ],\r\n        dataSource: [],\r\n        selectedRowIds: []\r\n      }\r\n    },\r\n    mounted() {\r\n      this.randomData(23, false)\r\n    },\r\n    methods: {\r\n\r\n      /** 表单验证 */\r\n      handleTableCheck() {\r\n        this.$refs.editableTable.getValues((error) => {\r\n          if (error === 0) {\r\n            this.$message.success('验证通过')\r\n          } else {\r\n            this.$message.error('验证未通过')\r\n          }\r\n        })\r\n      },\r\n      /** 获取值，忽略表单验证 */\r\n      handleTableGet() {\r\n        this.$refs.editableTable.getValues((error, values) => {\r\n          console.log('values:', values)\r\n        }, false)\r\n        console.log('deleteIds:', this.$refs.editableTable.getDeleteIds())\r\n\r\n        this.$message.info('获取值成功，请看控制台输出')\r\n\r\n      },\r\n      /** 模拟加载1000条数据 */\r\n      handleTableSet() {\r\n        this.randomData(1000, true)\r\n      },\r\n\r\n      handleSelectRowChange(selectedRowIds) {\r\n        this.selectedRowIds = selectedRowIds\r\n      },\r\n\r\n      /* 随机生成数据 */\r\n      randomData(size, loading = false) {\r\n        if (loading) {\r\n          this.loading = true\r\n        }\r\n\r\n        let randomDatetime = () => {\r\n          let time = parseInt(randomNumber(1000, 9999999999999))\r\n          return moment(new Date(time)).format('YYYY-MM-DD HH:mm:ss')\r\n        }\r\n\r\n        let begin = Date.now()\r\n        let values = []\r\n        for (let i = 0; i < size; i++) {\r\n          values.push({\r\n            id: randomUUID(),\r\n            dbFieldName: `name_${i + 1}`,\r\n            // dbFieldTxt: randomString(10),\r\n            multipleSelect: ['string', ['int', 'double', 'boolean'][randomNumber(0, 2)]],\r\n            dbFieldType: ['string', 'int', 'double', 'boolean'][randomNumber(0, 3)],\r\n            dbLength: randomNumber(0, 233),\r\n            datetime: randomDatetime(),\r\n            isNull: ['Y', 'N'][randomNumber(0, 1)]\r\n          })\r\n        }\r\n\r\n        this.dataSource = values\r\n        let end = Date.now()\r\n        let diff = end - begin\r\n\r\n        if (loading && diff < size) {\r\n          setTimeout(() => {\r\n            this.loading = false\r\n          }, size - diff)\r\n        }\r\n\r\n      },\r\n\r\n      handleDelete(props) {\r\n        let { rowId, target } = props\r\n        target.removeRows(rowId)\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}