{"remainingRequest":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue","mtime":1568535200973},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858740},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696677}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\nimport Draggable from 'vuedraggable'\nimport { ACCESS_TOKEN } from '@/store/mutation-types'\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\nimport { cloneObject, randomString } from '@/utils/util'\nimport JDate from '@/components/jeecg/JDate'\nimport { initDictOptions } from '@/components/dict/JDictSelectUtil'\n\n// 行高，需要在实例加载完成前用到\nlet rowHeight = 61\n\nexport default {\n  name: 'JEditableTable',\n  components: { JDate, Draggable },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    },\n  },\n  data() {\n    return {\n      // caseId，用于防止有多个实例的时候会冲突\n      caseId: `_jet-${randomString(6)}-`,\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: { left: '0px' },\n        // 左侧固定td的style\n        tdLeft: { 'min-width': '4%', 'max-width': '45px' },\n        tdLeftDs: { 'min-width': '30px', 'max-width': '35px' },\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // file 信息\n      uploadValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: []\n    }\n  },\n  created() {\n    // 当前显示的tr\n    this.visibleTrEls = []\n    // 用来存储input表单的值\n    // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n    // 示例：\n    // [{\n    //    id: \"_jet-4sp0iu-15541771111770\"\n    //    dbDefaultVal: \"aaa\",\n    //    dbFieldName: \"bbb\",\n    //    dbFieldTxt: \"ccc\",\n    //    dbLength: 32\n    // }]\n    this.inputValues = []\n    this.disabledRowIds = (this.disabledRowIds || [])\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight() {\n      return this.rows.length * this.rowHeight\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate() {\n      return (this.selectedRowIds.length > 0 &&\n        this.selectedRowIds.length < this.rows.length)\n    },\n    // 获取是否选择了全部\n    getSelectAll() {\n      return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\n    },\n    tbodyStyle() {\n      let style = Object.assign({}, this.style.tbody)\n      // style['max-height'] = `${this.maxHeight}px`\n      style['width'] = this.realTrWidth\n      return style\n    },\n    showClearSelectButton() {\n      let count = 0\n      for (let key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++\n      }\n      return count > 0\n    },\n    accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN)\n    },\n    realTrWidth() {\n      let calcWidth = 'calc('\n      this.columns.forEach((column, i) => {\n        let { type, width } = column\n        // 隐藏字段不参与计算\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px'\n          } else if (typeof width === 'string') {\n            calcWidth += width\n          } else {\n            calcWidth += '120px'\n          }\n\n          if (i < this.columns.length - 1) {\n            calcWidth += ' + '\n          }\n        }\n      })\n      calcWidth += ')'\n      // console.log('calcWidth: ', calcWidth)\n      return calcWidth\n    }\n  },\n  // 侦听器\n  watch: {\n    dataSource: {\n      immediate: true,\n      handler: function (newValue) {\n        this.initialize()\n\n        let rows = []\n        let checkboxValues = {}\n        let selectValues = {}\n        let jdateValues = {}\n        // 禁用行的id\n        let disabledRowIds = (this.disabledRowIds || [])\n        newValue.forEach((data, newValueIndex) => {\n          // 判断源数据是否带有id\n          if (data.id == null || data.id === '') {\n            data.id = this.removeCaseId(this.generateId() + newValueIndex)\n          }\n\n          let value = { id: this.caseId + data.id }\n          let row = { id: value.id }\n          let disabled = false\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\n            if (column.type === FormTypes.checkbox) {\n\n              // 判断是否设定了customValue（自定义值）\n              if (column.customValue instanceof Array) {\n                let customValue = (column.customValue[0] || '').toString()\n                checkboxValues[inputId] = (sourceValue === customValue)\n              } else {\n                checkboxValues[inputId] = sourceValue\n              }\n\n            } else if (column.type === FormTypes.select) {\n              if (sourceValue) {\n                // 判断是否是多选\n                selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue\n              } else {\n                selectValues[inputId] = undefined\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              jdateValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.slot) {\n              if (sourceValue !== 0 && !sourceValue) {\n                value[column.key] = column.defaultValue\n              } else {\n                value[column.key] = sourceValue\n              }\n\n            } else {\n              value[column.key] = sourceValue\n            }\n\n            // 解析disabledRows\n            for (let columnKey in this.disabledRows) {\n              // 判断是否有该属性\n              if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                // row[columnKey] =\n\n                if (disabled !== true) {\n                  disabled = this.disabledRows[columnKey] === data[columnKey]\n                  if (disabled) {\n                    disabledRowIds.push(row.id)\n                  }\n                }\n\n              }\n            }\n          })\n          this.inputValues.push(value)\n          rows.push(row)\n        })\n        this.disabledRowIds = disabledRowIds\n        this.checkboxValues = checkboxValues\n        this.selectValues = selectValues\n        this.jdateValues = jdateValues\n        this.rows = rows\n\n        // 更新form表单的值\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n\n      }\n    },\n    columns: {\n      immediate: true,\n      handler(columns) {\n        columns.forEach(column => {\n          if (column.type === FormTypes.select) {\n            // 兼容 旧版本 options\n            if (column.options instanceof Array) {\n              column.options = column.options.map(item => {\n                if (item) {\n                  return {\n                    text: item.text || item.title,\n                    title: item.text || item.title,\n                    value: item.value\n                  }\n                }\n                return {}\n              })\n            }\n            if (column.dictCode) {\n              this._loadDictConcatToOptions(column)\n            }\n          }\n        })\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds(newValue) {\n      this.$emit('selectRowChange', cloneObject(newValue))\n    }\n  },\n  mounted() {\n    // 获取document element对象\n    let elements = {};\n    ['inputTable', 'tbody'].forEach(id => {\n      elements[id] = document.getElementById(this.caseId + id)\n    })\n    this.el = elements\n\n    let vm = this\n    /** 监听滚动条事件 */\n    this.el.inputTable.onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft)\n    }\n    this.el.tbody.onscroll = function (event) {\n      // vm.recalcTrHiddenItem(event.target.scrollTop)\n    }\n\n    let { thead, scrollView } = this.$refs\n    scrollView.onscroll = function (event) {\n\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n      thead.scrollLeft = event.target.scrollLeft\n\n      // vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      vm.recalcTrHiddenItem(event.target.scrollTop)\n\n    }\n\n  },\n  methods: {\n\n    /** 初始化列表 */\n    initialize() {\n      this.visibleTrEls = []\n      this.rows = []\n      this.deleteIds = []\n      this.inputValues = []\n      this.selectValues = {}\n      this.checkboxValues = {}\n      this.jdateValues = {}\n      this.selectedRowIds = []\n      this.tooltips = {}\n      this.notPassedIds = []\n      this.scrollTop = 0\n      this.$nextTick(() => {\n        this.el.tbody.scrollTop = 0\n      })\n    },\n\n    /** 同步滚动条状态 */\n    syncScrollBar(scrollLeft) {\n      // this.style.tbody.left = `${scrollLeft}px`\n      // this.el.tbody.scrollLeft = scrollLeft\n    },\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n    resetScrollTop(top) {\n      let { scrollView } = this.$refs\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top\n      } else {\n        scrollView.scrollTop = this.scrollTop\n      }\n    },\n    /** 重新计算需要隐藏或显示的tr */\n    recalcTrHiddenItem(top) {\n      let diff = top - this.scrollTop\n      if (diff < 0) {\n        diff = this.scrollTop - top\n      }\n      // 只有在滚动了百分之三十的行高的距离时才进行更新\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top\n        // 更新form表单的值\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n      }\n    },\n    /** 生成id */\n    generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || []\n      }\n      let timestamp = new Date().getTime()\n      return `${this.caseId}${timestamp}${rows.length}`\n    },\n    /** push 一条数据 */\n    push(record, update = true, rows) {\n      if (!(rows instanceof Array)) {\n        rows = cloneObject(this.rows) || []\n      }\n\n      if (record.id == null) {\n        record.id = this.generateId(rows)\n        // let timestamp = new Date().getTime()\n        // record.id = `${this.caseId}${timestamp}${rows.length}`\n      }\n      if (record.id.indexOf(this.caseId) === -1) {\n        record.id = this.caseId + record.id\n      }\n      let row = { id: record.id }\n      let value = { id: row.id }\n      let checkboxValues = Object.assign({}, this.checkboxValues)\n      let selectValues = Object.assign({}, this.selectValues)\n      let jdateValues = Object.assign({}, this.jdateValues)\n      this.columns.forEach(column => {\n        let key = column.key\n        let inputId = key + row.id\n        // record中是否有该列的值\n        let recordHasValue = record[key] != null\n        if (column.type === FormTypes.input) {\n          value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\n\n        } else if (column.type === FormTypes.inputNumber) {\n          // 判断是否是排序字段，如果是就赋最大值\n          if (column.isOrder === true) {\n            value[key] = this.getInputNumberMaxValue(column) + 1\n          } else {\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\n          }\n\n        } else if (column.type === FormTypes.checkbox) {\n          checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked\n\n        } else if (column.type === FormTypes.select) {\n          let selected = column.defaultValue\n          if (selected !== 0 && !selected) {\n            selected = undefined\n          }\n          // 判断多选\n          if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\n            selected = selected.split(',')\n          }\n          selectValues[inputId] = recordHasValue ? record[key] : selected\n\n        } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n          jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue\n\n        } else if (column.type === FormTypes.slot) {\n          value[key] = recordHasValue ? record[key] : (column.defaultValue || '')\n\n        } else {\n          value[key] = recordHasValue ? record[key] : ''\n        }\n      })\n      rows.push(row)\n      this.inputValues.push(value)\n      this.checkboxValues = checkboxValues\n      this.selectValues = selectValues\n      this.jdateValues = jdateValues\n\n      if (this.dragSort) {\n        this.inputValues.forEach((item, index) => {\n          item[this.dragSortKey] = (index + 1)\n        })\n      }\n\n      if (update) {\n        this.rows = rows\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n      }\n      return rows\n    },\n    /** 获取某一数字输入框列中的最大的值 */\n    getInputNumberMaxValue(column) {\n      let maxNum = 0\n      this.inputValues.forEach((item, index) => {\n        let val = item[column.key], num\n        try {\n          num = parseInt(val)\n        } catch {\n          num = 0\n        }\n        // 把首次循环的结果当成最大值\n        if (index === 0) {\n          maxNum = num\n        } else {\n          maxNum = (num > maxNum) ? num : maxNum\n        }\n      })\n      return maxNum\n    },\n    /** 添加一行 */\n    add(num = 1, forceScrollToBottom = false) {\n      if (num < 1) return\n      // let timestamp = new Date().getTime()\n      let rows = this.rows\n      let row\n      for (let i = 0; i < num; i++) {\n        // row = { id: `${this.caseId}${timestamp}${rows.length}` }\n        row = { id: this.generateId(rows) }\n        rows = this.push(row, false, rows)\n      }\n      this.rows = rows\n\n      this.$nextTick(() => {\n        this.updateFormValues()\n      })\n      // 触发add事件\n      this.$emit('added', {\n        row: (() => {\n          let r = Object.assign({}, row)\n          r.id = this.removeCaseId(r.id)\n          return r\n        })(),\n        target: this\n      })\n      // 设置滚动条位置\n      let tbody = this.el.tbody\n      let offsetHeight = tbody.offsetHeight\n      let realScrollTop = tbody.scrollTop + offsetHeight\n      if (forceScrollToBottom === false) {\n        // 只有滚动条在底部的时候才自动滚动\n        if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\n          return\n        }\n      }\n      this.$nextTick(() => {\n        tbody.scrollTop = tbody.scrollHeight\n      })\n    },\n    /** 删除被选中的行 */\n    removeSelectedRows() {\n      this.removeRows(this.selectedRowIds)\n      this.selectedRowIds = []\n    },\n    /** 删除一行或多行 */\n    removeRows(id) {\n      let ids = id\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id]\n        } else {\n          throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\n        }\n      }\n\n      let rows = cloneObject(this.rows)\n      ids.forEach(removeId => {\n        // 找到每个id对应的真实index并删除\n        const findAndDelete = (arr) => {\n          for (let i = 0; i < arr.length; i++) {\n            if (arr[i].id === removeId || arr[i].id === this.caseId + removeId) {\n              arr.splice(i, 1)\n              return true\n            }\n          }\n        }\n        // 找到rows对应的index，并删除\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(this.inputValues)\n          // 将caseId去除\n          let id = this.removeCaseId(removeId)\n          this.deleteIds.push(id)\n        }\n      })\n      this.rows = rows\n      this.$emit('deleted', this.getDeleteIds())\n      this.$nextTick(() => {\n        // 更新formValues\n        this.updateFormValues()\n      })\n      return true\n    },\n\n    /** 获取表格表单里的值（同步版） */\n    getValuesSync(options = {}) {\n      let { validate, rowIds } = options\n      if (typeof validate !== 'boolean') validate = true\n      if (!(rowIds instanceof Array)) rowIds = null\n      // console.log('options:', { validate, rowIds })\n\n      let error = 0\n      let inputValues = cloneObject(this.inputValues)\n      let tooltips = Object.assign({}, this.tooltips)\n      let notPassedIds = cloneObject(this.notPassedIds)\n      // 用于存储合并后的值\n      let values = []\n      // 遍历inputValues来获取每行的值\n      for (let value of inputValues) {\n        let rowIdsFlag = false\n        // 如果带有rowIds，那么就只存这几行的数据\n        if (rowIds == null) {\n          rowIdsFlag = true\n        } else {\n          for (let rowId of rowIds) {\n            if (rowId === value.id || `${this.caseId}${rowId}` === value.id) {\n              rowIdsFlag = true\n              break\n            }\n          }\n        }\n\n        if (!rowIdsFlag) continue\n\n        this.columns.forEach(column => {\n          let inputId = column.key + value.id\n          if (column.type === FormTypes.checkbox) {\n            let checked = this.checkboxValues[inputId]\n            if (column.customValue instanceof Array) {\n              value[column.key] = checked ? column.customValue[0] : column.customValue[1]\n            } else {\n              value[column.key] = checked\n            }\n\n          } else if (column.type === FormTypes.select) {\n            let selected = this.selectValues[inputId]\n            if (selected instanceof Array) {\n              value[column.key] = cloneObject(selected)\n            } else {\n              value[column.key] = selected\n            }\n\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            value[column.key] = this.jdateValues[inputId]\n\n          } else if (column.type === FormTypes.upload) {\n            value[column.key] = cloneObject(this.uploadValues[inputId] || null)\n\n          }\n          // 检查表单验证\n          if (validate === true) {\n            let results = this.validateOneInput(value[column.key], value, column, notPassedIds, false)\n            tooltips[inputId] = results[0]\n            if (tooltips[inputId].visible) {\n              error++\n              // if (error++ === 0) {\n              // let element = document.getElementById(inputId)\n              // while (element.className !== 'tr') {\n              //   element = element.parentElement\n              // }\n              // this.jumpToId(inputId, element)\n              // }\n            }\n            tooltips[inputId].visible = false\n            notPassedIds = results[1]\n          }\n        })\n        // 将caseId去除\n        value.id = this.removeCaseId(value.id)\n        values.push(value)\n\n      }\n\n      this.tooltips = tooltips\n      this.notPassedIds = notPassedIds\n      return { error, values }\n    },\n\n    /** 获取表格表单里的值 */\n    getValues(callback, validate = true, rowIds) {\n      let result = this.getValuesSync({ validate, rowIds })\n      if (typeof callback === 'function') {\n        callback(result.error, result.values)\n      }\n    },\n    /** getValues的Promise版 */\n    getValuesPromise(validate = true, rowIds) {\n      return new Promise((resolve, reject) => {\n        let { error, values } = this.getValuesSync({ validate, rowIds })\n        if (error === 0) {\n          resolve(values)\n        } else {\n          reject(VALIDATE_NO_PASSED)\n        }\n      })\n    },\n    /** 获取被删除项的id */\n    getDeleteIds() {\n      return cloneObject(this.deleteIds)\n    },\n    /** 获取所有的数据，包括values、deleteIds */\n    getAll(validate) {\n      return new Promise((resolve, reject) => {\n        let deleteIds = this.getDeleteIds()\n        this.getValuesPromise(validate).then((values) => {\n          resolve({ values, deleteIds })\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    /** Sync 获取所有的数据，包括values、deleteIds */\n    getAllSync(validate, rowIds) {\n      let result = this.getValuesSync({ validate, rowIds })\n      result.deleteIds = this.getDeleteIds()\n      return result\n    },\n    // slot 获取值\n    _getValueForSlot(rowId) {\n      return this.getValuesSync({ rowIds: [rowId] }).values[0]\n    },\n    /** 设置某行某列的值 */\n    setValues(values) {\n\n      values.forEach(item => {\n        let { rowKey, values: newValues } = item\n        for (let newValueKey in newValues) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            let newValue = newValues[newValueKey]\n            let edited = false // 已被修改\n            this.inputValues.forEach(value => {\n              // 在inputValues中找到了该字段\n              if (`${this.caseId}${rowKey}` === value.id) {\n                if (value.hasOwnProperty(newValueKey)) {\n                  edited = true\n                  value[newValueKey] = newValue\n                }\n              }\n            })\n            let modelKey = `${newValueKey}${this.caseId}${rowKey}`\n            // 在 selectValues 中寻找值\n            if (!edited && this.selectValues.hasOwnProperty(modelKey)) {\n              if (newValue !== 0 && !newValue) {\n                this.selectValues[modelKey] = undefined\n              } else {\n                this.selectValues[modelKey] = newValue\n              }\n              edited = true\n            }\n            // 在 checkboxValues 中寻找值\n            if (!edited && this.checkboxValues.hasOwnProperty(modelKey)) {\n              this.checkboxValues[modelKey] = newValue\n              edited = true\n            }\n            // 在 jdateValues 中寻找值\n            if (!edited && this.jdateValues.hasOwnProperty(modelKey)) {\n              this.jdateValues[modelKey] = newValue\n              edited = true\n            }\n          }\n        }\n      })\n      // 强制更新formValues\n      this.forceUpdateFormValues()\n    },\n\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n    //     this.el.tbody.scrollTop = element.offsetTop\n    //     console.log(this.el.tbody.scrollTop, element.offsetTop)\n    //   }\n    // },\n\n    /** 验证单个表单 */\n    validateOneInput(value, row, column, notPassedIds, update = false) {\n      let tooltips = Object.assign({}, this.tooltips)\n      // let notPassedIds = cloneObject(this.notPassedIds)\n      let inputId = column.key + row.id\n      let [passed, message] = this.validateValue(column.validateRules, value)\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n      tooltips[inputId].visible = !passed\n      let index = notPassedIds.indexOf(inputId)\n      let borderColor = null, boxShadow = null\n      if (!passed) {\n        tooltips[inputId].title = this.replaceProps(column, message)\n        borderColor = 'red'\n        boxShadow = `0 0 0 2px rgba(255, 0, 0, 0.2)`\n        if (index === -1) notPassedIds.push(inputId)\n      } else {\n        if (index !== -1) notPassedIds.splice(index, 1)\n      }\n\n      let element = document.getElementById(inputId)\n      if (element != null) {\n        // select 在 .ant-select-selection 上设置 border-color\n        if (column.type === FormTypes.select) {\n          element = element.getElementsByClassName('ant-select-selection')[0]\n        }\n        // jdate 在 input 上设置 border-color\n        if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n          element = element.getElementsByTagName('input')[0]\n        }\n        element.style.borderColor = borderColor\n        element.style.boxShadow = boxShadow\n      }\n      // 是否更新到data\n      if (update) {\n        this.tooltips = tooltips\n        this.notPassedIds = notPassedIds\n      }\n      return [tooltips[inputId], notPassedIds]\n    },\n    /** 通过规则验证值是否正确 */\n    validateValue(rules, value) {\n      let passed = true, message = ''\n      // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n      if (rules instanceof Array) {\n        for (let rule of rules) {\n          // 当前值是否为空\n          let isNull = (value == null || value === '')\n          // 验证规则：非空\n          if (rule.required === true && isNull) {\n            passed = false\n          } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n          // 验证规则：正则表达式\n          if (!!rule.pattern && !isNull) {\n\n            // 兼容 online 的规则\n            let foo = [\n              { title: '唯一校验', value: 'only', pattern: null },\n              { title: '6到16位数字', value: 'n6-16', pattern: /\\d{6,18}/ },\n              { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\n              { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\n              { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\n              { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\n              { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\n              { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\n              { title: '数字', value: 'n', pattern: /^-?\\d+\\.?\\d*$/ },\n              { title: '整数', value: 'z', pattern: /^[1-9]\\d*$/ },\n              { title: '非空', value: '*', pattern: /^.+$/ },\n              { title: '6到18位字符串', value: 's6-18', pattern: /^.{6,18}$/ },\n              { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\n            ]\n            let flag = false\n            for (let item of foo) {\n              if (rule.pattern === item.value && item.pattern) {\n                passed = new RegExp(item.pattern).test(value)\n                flag = true\n                break\n              }\n            }\n            if (!flag) passed = new RegExp(rule.pattern).test(value)\n          }\n          // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n          if (!passed) {\n            message = rule.message\n            break\n          }\n        }\n      }\n      return [passed, message]\n    },\n\n    /** 动态更新表单的值 */\n    updateFormValues() {\n      let trs = this.el.tbody.getElementsByClassName('tr')\n      let trEls = []\n      for (let tr of trs) {\n        trEls.push(tr)\n      }\n      // 获取新增的 tr\n      let newTrEls = trEls\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = []\n        for (let tr of trEls) {\n          let isNewest = true\n          for (let vtr of this.visibleTrEls) {\n            if (vtr.id === tr.id) {\n              isNewest = false\n              break\n            }\n          }\n          if (isNewest) {\n            newTrEls.push(tr)\n          }\n        }\n      }\n      this.visibleTrEls = trEls\n      // 向新增的tr中赋值\n      newTrEls.forEach(tr => {\n        let { idx } = tr.dataset\n        let value = this.inputValues[idx]\n        for (let key in value) {\n          if (value.hasOwnProperty(key)) {\n            let elid = `${key}${value.id}`\n            let el = document.getElementById(elid)\n            if (el) {\n              el.value = value[key]\n            }\n          }\n        }\n      })\n    },\n    /** 强制更新FormValues */\n    forceUpdateFormValues() {\n      this.visibleTrEls = []\n      this.updateFormValues()\n    },\n\n    /** 全选或取消全选 */\n    handleChangeCheckedAll() {\n      let selectedRowIds = []\n      if (!this.getSelectAll) {\n        this.rows.forEach(row => {\n          if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id)\n          }\n        })\n      }\n      this.selectedRowIds = selectedRowIds\n    },\n    /** 左侧行选择框change事件 */\n    handleChangeLeftCheckbox(event) {\n      let { id } = event.target\n\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return\n      }\n\n      let index = this.selectedRowIds.indexOf(id)\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1)\n      } else {\n        this.selectedRowIds.push(id)\n      }\n\n    },\n    handleClickAdd() {\n      this.add()\n    },\n    handleConfirmDelete() {\n      this.removeSelectedRows()\n    },\n    handleClickClearSelect() {\n      this.selectedRowIds = []\n    },\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        let flag = false\n        for (let option of col.options) {\n          if (option.value.toLocaleString() === value.toLocaleString()) {\n            flag = true\n            break\n          }\n        }\n        // !!value ：不添加空值\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({ title: value, value: value, searchAdd: true })\n        }\n\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          let indexs = []\n          col.options.forEach((option, index) => {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd\n            } else if (option.searchAdd === true) {\n              indexs.push(index)\n            }\n          })\n          // 翻转删除数组中的项\n          for (let index of indexs.reverse()) {\n            col.options.splice(index, 1)\n          }\n        }\n\n      }\n    },\n\n    /** 拖动结束，交换inputValue中的值 */\n    handleDragMoveEnd(event) {\n      let { oldIndex, newIndex } = event\n\n      let values = this.inputValues\n      // 存储旧数据，并删除旧项目\n      let temp = values[oldIndex]\n      values.splice(oldIndex, 1)\n      // 向新项目里添加旧数据\n      values.splice(newIndex, 0, temp)\n\n      values.forEach((item, index) => {\n        item[this.dragSortKey] = (index + 1)\n      })\n\n      this.forceUpdateFormValues()\n\n      // 触发已拖动事件\n      this.$emit('dragged', {\n        oldIndex,\n        newIndex,\n        target: this\n      })\n    },\n\n    /* --- common function begin --- */\n\n    /** 鼠标移入 */\n    handleMouseoverCommono(row, column) {\n      let inputId = column.key + row.id\n      if (this.notPassedIds.indexOf(inputId) !== -1) {\n        this.showOrHideTooltip(inputId, true)\n      }\n    },\n    /** 鼠标移出 */\n    handleMouseoutCommono(row, column) {\n      let inputId = column.key + row.id\n      this.showOrHideTooltip(inputId, false)\n    },\n    /** input事件 */\n    handleInputCommono(target, index, row, column) {\n      let { value, dataset, selectionStart } = target\n      let type = FormTypes.input\n      let change = true\n      if (`${dataset.inputNumber}` === 'true') {\n        type = FormTypes.inputNumber\n        let replace = value.replace(/[^0-9]/g, '')\n        if (value !== replace) {\n          change = false\n          value = replace\n          target.value = replace\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1\n            target.selectionEnd = selectionStart - 1\n          }\n        }\n      }\n      // 存储输入的值\n      this.inputValues[index][column.key] = value\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true)\n\n      // 触发valueChange 事件\n      if (change) {\n        this.elemValueChange(type, row, column, value)\n      }\n    },\n    handleChangeCheckboxCommon(event, row, column) {\n      let { id, checked } = event.target\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\n\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.checkbox, row, column, checked)\n    },\n    handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues')\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true)\n\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.select, row, column, value)\n    },\n    handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\n      this.validateOneInput(value, row, column, this.notPassedIds, true)\n\n      // 触发valueChange 事件\n      if (showTime) {\n        this.elemValueChange(FormTypes.datetime, row, column, value)\n      } else {\n        this.elemValueChange(FormTypes.date, row, column, value)\n      }\n    },\n    handleChangeUpload(info, id, row, column) {\n      let { file } = info\n      let value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      }\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName]\n      }\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\n    },\n    /** 记录用到数据绑定的组件的值 */\n    bindValuesChange(value, id, key) {\n      let values = Object.assign({}, this[key])\n      values[id] = value\n      return values\n    },\n\n    /** 显示或隐藏tooltip */\n    showOrHideTooltip(inputId, show) {\n      let tooltips = Object.assign({}, this.tooltips)\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n      tooltips[inputId].visible = show\n      this.tooltips = tooltips\n    },\n\n    /** value 触发valueChange事件 */\n    elemValueChange(type, rowSource, columnSource, value) {\n      let column = Object.assign({}, columnSource)\n      // 将caseId去除\n      let row = Object.assign({}, rowSource)\n      row.id = this.removeCaseId(row.id)\n      // 获取整行的数据\n      let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\n      if (values.length > 0) {\n        Object.assign(row, values[0])\n      }\n      this.$emit('valueChange', { type, row, column, value, target: this })\n    },\n\n    /** 将caseId去除 */\n    removeCaseId(id) {\n      let remove = id.split(this.caseId)[1]\n      return remove ? remove : id\n    },\n\n    handleClickDelFile(id) {\n      this.uploadValues[id] = null\n    },\n\n    /** 加载数据字典并合并到 options */\n    _loadDictConcatToOptions(column) {\n      initDictOptions(column.dictCode).then((res) => {\n        if (res.success) {\n          let newOptions = (column.options || [])// .concat(res.result)\n          res.result.forEach(item => {\n            for (let option of newOptions) if (option.value === item.value) return\n            newOptions.push(item)\n          })\n          column.options = newOptions\n        } else {\n          console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\n          console.log(res.message)\n          console.groupEnd()\n        }\n      })\n    },\n\n    /* --- common function end --- */\n\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n    /** 辅助方法：打印日志 */\n    log: console.log,\n\n    getVM() {\n      return this\n    },\n\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */\n    getParentContainer(node) {\n      let element = (() => {\n        // nodeType 8\t: Comment\t: 注释\n        if (this.$el && this.$el.nodeType !== 8) {\n          return this.$el\n        }\n        let doc = document.getElementById(this.caseId + 'inputTable')\n        if (doc != null) {\n          return doc\n        }\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n      })()\n\n      // 递归判断是否带有 overflow: hidden；的父元素\n      const ifParent = (child) => {\n        let currentOverflow = null\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow']\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow']\n        }\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            let temp = ifParent(child.parentNode)\n            return temp != null ? temp : child.parentNode\n          } else\n          // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n          if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n            return ifParent(child.parentNode)\n          } else {\n            // 直到 body 都没有遇到有 hidden 的标签\n            return null\n          }\n        } else {\n          return child\n        }\n      }\n\n      let temp = ifParent(element)\n      return (temp != null) ? temp : element\n    },\n\n    /** 辅助方法：替换${...}变量 */\n    replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title)\n        value = value.replace(/\\${key}/g, col.key)\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue)\n      }\n      return value\n    },\n\n    /** view辅助方法：构建 tr style */\n    buildTrStyle(index) {\n      return {\n        'top': `${rowHeight * index}px`\n      }\n    },\n    /** view辅助方法：构建 td style */\n    buildTdStyle(col) {\n      let style = {}\n      // 计算宽度\n      if (col.width) {\n        style['width'] = col.width\n      } else if (this.columns) {\n        style['width'] = `${(100 - 4 * 2) / this.columns.length}%`\n      } else {\n        style['width'] = '120px'\n      }\n      // checkbox 居中显示\n      let isCheckbox = col.type === FormTypes.checkbox\n      if (isCheckbox) {\n        style['align-items'] = 'center'\n        style['text-align'] = 'center'\n        style['padding-left'] = '0'\n        style['padding-right'] = '0'\n      }\n      return style\n    },\n    /** view辅助方法：构造props */\n    buildProps(row, col) {\n      let props = {}\n      // 解析props\n      if (typeof col.props === 'object') {\n        for (let prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop])\n          }\n        }\n      }\n      // 判断select是否允许输入\n      if (col.type === FormTypes.select && col.allowInput === true) {\n        props['showSearch'] = true\n      }\n\n      // 判断是否是禁用的列\n      props['disabled'] = !!col['disabled']\n\n      // 判断是否为禁用的行\n      if (props['disabled'] !== true) {\n        props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\n      }\n\n      // 判断是否禁用全部组件\n      if (this.disabled === true) {\n        props['disabled'] = true\n      }\n\n      return props\n    },\n    /** upload 辅助方法：获取 headers */\n    uploadGetHeaders(row, column) {\n      let headers = {}\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken\n      }\n      return headers\n    }\n\n  }\n}\n",{"version":3,"sources":["JEditableTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"JEditableTable.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<!-- JEditableTable -->\r\n<!-- @version 1.4.4 -->\r\n<!-- @author sjlei -->\r\n<template>\r\n  <a-spin :spinning=\"loading\">\r\n\r\n    <!-- 操作按钮 -->\r\n    <div v-if=\"actionButton\" class=\"action-button\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"handleClickAdd\">新增</a-button>\r\n      <span class=\"gap\"></span>\r\n      <template v-if=\"selectedRowIds.length>0\">\r\n        <a-popconfirm\r\n          :title=\"`确定要删除这 ${selectedRowIds.length} 项吗?`\"\r\n          @confirm=\"handleConfirmDelete\">\r\n          <a-button type=\"primary\" icon=\"minus\">删除</a-button>\r\n        </a-popconfirm>\r\n        <template v-if=\"showClearSelectButton\">\r\n          <span class=\"gap\"></span>\r\n          <a-button icon=\"delete\" @click=\"handleClickClearSelect\">清空选择</a-button>\r\n        </template>\r\n      </template>\r\n    </div>\r\n\r\n    <div :id=\"`${caseId}inputTable`\" class=\"input-table\">\r\n      <!-- 渲染表头 -->\r\n      <div class=\"thead\" ref=\"thead\">\r\n        <div class=\"tr\" :style=\"{width: this.realTrWidth}\">\r\n          <!-- 左侧固定td  -->\r\n          <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeftDs\">\r\n            <span></span>\r\n          </div>\r\n          <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\r\n            <!--:indeterminate=\"true\"-->\r\n            <a-checkbox\r\n              :checked=\"getSelectAll\"\r\n              :indeterminate=\"getSelectIndeterminate\"\r\n              @change=\"handleChangeCheckedAll\"\r\n            />\r\n          </div>\r\n          <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\r\n            <span>#</span>\r\n          </div>\r\n          <!-- 右侧动态生成td -->\r\n          <template v-for=\"col in columns\">\r\n            <div\r\n              v-show=\"col.type !== formTypes.hidden\"\r\n              class=\"td\"\r\n              :key=\"col.key\"\r\n              :style=\"buildTdStyle(col)\">\r\n\r\n              <span>{{ col.title }}</span>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"scroll-view\" ref=\"scrollView\" :style=\"{'max-height':maxHeight+'px'}\">\r\n\r\n\r\n        <!-- 渲染主体 body -->\r\n        <div :id=\"`${caseId}tbody`\" class=\"tbody\" :style=\"tbodyStyle\">\r\n          <!-- 扩展高度 -->\r\n          <div class=\"tr-expand\" :style=\"`height:${getExpandHeight}px; z-index:${loading?'11':'9'};`\"></div>\r\n          <!-- 无数据时显示 -->\r\n          <div v-if=\"rows.length===0\" class=\"tr-nodata\">\r\n            <span>暂无数据</span>\r\n          </div>\r\n          <draggable v-model=\"rows\" handle=\".td-ds-icons\" @end=\"handleDragMoveEnd\">\r\n\r\n            <!-- 动态生成tr -->\r\n            <template v-for=\"(row,rowIndex) in rows\">\r\n              <!-- tr 只加载可见的和预加载的总共十条数据 -->\r\n              <div\r\n                v-if=\"\r\n                rowIndex >= parseInt(`${(scrollTop-rowHeight) / rowHeight}`) &&\r\n                  (parseInt(`${scrollTop / rowHeight}`) + 9) > rowIndex\r\n              \"\r\n                :id=\"`${caseId}tbody-tr-${rowIndex}`\"\r\n                :data-idx=\"rowIndex\"\r\n                class=\"tr\"\r\n                :class=\"selectedRowIds.indexOf(row.id) !== -1 ? 'tr-checked' : ''\"\r\n                :style=\"buildTrStyle(rowIndex)\"\r\n                :key=\"row.id\">\r\n                <!-- 左侧固定td  -->\r\n\r\n                <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeftDs\">\r\n                  <div class=\"td-ds-icons\">\r\n                    <a-icon type=\"align-left\"/>\r\n                    <a-icon type=\"align-right\"/>\r\n                  </div>\r\n                </div>\r\n\r\n                <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\r\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\r\n                  <template v-for=\"(id,i) in [`${row.id}`]\">\r\n                    <a-checkbox\r\n                      :id=\"id\"\r\n                      :key=\"i\"\r\n                      :checked=\"selectedRowIds.indexOf(id) !== -1\"\r\n                      @change=\"handleChangeLeftCheckbox\"/>\r\n                  </template>\r\n                </div>\r\n                <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\r\n                  <span>{{ rowIndex+1 }}</span>\r\n                </div>\r\n                <!-- 右侧动态生成td -->\r\n                <div\r\n                  class=\"td\"\r\n                  v-for=\"col in columns\"\r\n                  v-show=\"col.type !== formTypes.hidden\"\r\n                  :key=\"col.key\"\r\n                  :style=\"buildTdStyle(col)\">\r\n\r\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\r\n                  <template v-for=\"(id,i) in [`${col.key}${row.id}`]\">\r\n\r\n                    <!-- native input -->\r\n                    <label :key=\"i\" v-if=\"col.type === formTypes.input || col.type === formTypes.inputNumber\">\r\n                      <a-tooltip\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                        <input\r\n                          :id=\"id\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          :data-input-number=\"col.type === formTypes.inputNumber\"\r\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                          @input=\"(e)=>{handleInputCommono(e.target,rowIndex,row,col)}\"\r\n                          @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                          @mouseout=\"()=>{handleMouseoutCommono(row,col)}\"/>\r\n\r\n                      </a-tooltip>\r\n\r\n                    </label>\r\n                    <!-- checkbox -->\r\n                    <template v-else-if=\"col.type === formTypes.checkbox\">\r\n                      <a-checkbox\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        v-bind=\"buildProps(row,col)\"\r\n                        :checked=\"checkboxValues[id]\"\r\n                        @change=\"(e)=>handleChangeCheckboxCommon(e,row,col)\"\r\n                      />\r\n                    </template>\r\n                    <!-- select -->\r\n                    <template v-else-if=\"col.type === formTypes.select\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                      <span\r\n                        @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                        @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                        <a-select\r\n                          :id=\"id\"\r\n                          :key=\"i\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          style=\"width: 100%;\"\r\n                          :value=\"selectValues[id]\"\r\n                          :options=\"col.options\"\r\n                          :getPopupContainer=\"getParentContainer\"\r\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                          @change=\"(v)=>handleChangeSelectCommon(v,id,row,col)\"\r\n                          @search=\"(v)=>handleSearchSelect(v,id,row,col)\"\r\n                          @blur=\"(v)=>handleBlurSearch(v,id,row,col)\"\r\n                        >\r\n\r\n                          <!--<template v-for=\"(opt,optKey) in col.options\">-->\r\n                          <!--<a-select-option :value=\"opt.value\" :key=\"optKey\">{{ opt.title }}</a-select-option>-->\r\n                          <!--</template>-->\r\n                        </a-select>\r\n                      </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n                    <!-- date -->\r\n                    <template v-else-if=\"col.type === formTypes.date || col.type === formTypes.datetime\">\r\n                      <a-tooltip\r\n                        :key=\"i\"\r\n                        :id=\"id\"\r\n                        placement=\"top\"\r\n                        :title=\"(tooltips[id] || {}).title\"\r\n                        :visible=\"(tooltips[id] || {}).visible || false\"\r\n                        :autoAdjustOverflow=\"true\">\r\n\r\n                      <span\r\n                        @mouseover=\"()=>{handleMouseoverCommono(row,col)}\"\r\n                        @mouseout=\"()=>{handleMouseoutCommono(row,col)}\">\r\n\r\n                        <j-date\r\n                          :id=\"id\"\r\n                          :key=\"i\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          style=\"width: 100%;\"\r\n                          :value=\"jdateValues[id]\"\r\n                          :getCalendarContainer=\"getParentContainer\"\r\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\r\n                          :trigger-change=\"true\"\r\n                          :showTime=\"col.type === formTypes.datetime\"\r\n                          :dateFormat=\"col.type === formTypes.date? 'YYYY-MM-DD':'YYYY-MM-DD HH:mm:ss'\"\r\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col,col.type === formTypes.datetime)\"/>\r\n\r\n                      </span>\r\n                      </a-tooltip>\r\n                    </template>\r\n\r\n                    <div v-else-if=\"col.type === formTypes.upload\" :key=\"i\">\r\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\r\n                        <a-input\r\n                          :key=\"fileKey\"\r\n                          :readOnly=\"true\"\r\n                          :value=\"file.name\"\r\n                        >\r\n\r\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\r\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\r\n                              <a-icon type=\"loading\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\r\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\r\n                            </a-tooltip>\r\n                            <a-tooltip v-else title=\"上传失败\">\r\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                          <template slot=\"addonAfter\" style=\"width: 30px\">\r\n                            <a-tooltip title=\"删除并重新上传\">\r\n                              <a-icon\r\n                                v-if=\"file.status!=='uploading'\"\r\n                                type=\"close-circle\"\r\n                                style=\"cursor: pointer;\"\r\n                                @click=\"()=>handleClickDelFile(id)\"/>\r\n                            </a-tooltip>\r\n                          </template>\r\n\r\n                        </a-input>\r\n                      </template>\r\n\r\n                      <div :hidden=\"uploadValues[id] != null\">\r\n\r\n                        <a-upload\r\n                          name=\"file\"\r\n                          :data=\"{'isup':1}\"\r\n                          :multiple=\"false\"\r\n                          :action=\"col.action\"\r\n                          :headers=\"uploadGetHeaders(row,col)\"\r\n                          :showUploadList=\"false\"\r\n                          v-bind=\"buildProps(row,col)\"\r\n                          @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\r\n                        >\r\n                          <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\r\n                        </a-upload>\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                    <div v-else-if=\"col.type === formTypes.slot\" :key=\"i\">\r\n                      <slot\r\n                        :name=\"(col.slot || col.slotName) || col.key\"\r\n                        :index=\"rowIndex\"\r\n                        :text=\"inputValues[rowIndex][col.key]\"\r\n                        :column=\"col\"\r\n                        :rowId=\"removeCaseId(row.id)\"\r\n                        :getValue=\"()=>_getValueForSlot(row.id)\"\r\n                        :target=\"getVM()\"\r\n                      />\r\n                    </div>\r\n\r\n                    <!-- else (normal) -->\r\n                    <span v-else :key=\"i\">{{ inputValues[rowIndex][col.key] }}</span>\r\n                  </template>\r\n                </div>\r\n              </div>\r\n              <!-- -- tr end -- -->\r\n\r\n            </template>\r\n          </draggable>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </a-spin>\r\n</template>\r\n\r\n<script>\r\n  import Vue from 'vue'\r\n  import Draggable from 'vuedraggable'\r\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\r\n  import { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\r\n  import { cloneObject, randomString } from '@/utils/util'\r\n  import JDate from '@/components/jeecg/JDate'\r\n  import { initDictOptions } from '@/components/dict/JDictSelectUtil'\r\n\r\n  // 行高，需要在实例加载完成前用到\r\n  let rowHeight = 61\r\n\r\n  export default {\r\n    name: 'JEditableTable',\r\n    components: { JDate, Draggable },\r\n    props: {\r\n      // 列信息\r\n      columns: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      // 数据源\r\n      dataSource: {\r\n        type: Array,\r\n        required: true,\r\n        default: () => []\r\n      },\r\n      // 是否显示操作按钮\r\n      actionButton: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 是否显示行号\r\n      rowNumber: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 是否可选择行\r\n      rowSelection: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 页面是否在加载中\r\n      loading: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 页面是否在加载中\r\n      maxHeight: {\r\n        type: Number,\r\n        default: 400\r\n      },\r\n      // 要禁用的行\r\n      disabledRows: {\r\n        type: Object,\r\n        default() {\r\n          return {}\r\n        }\r\n      },\r\n      // 是否禁用全部组件\r\n      disabled: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      // 是否可拖拽排序\r\n      dragSort: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      dragSortKey: {\r\n        type: String,\r\n        default: 'orderNum'\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        // caseId，用于防止有多个实例的时候会冲突\r\n        caseId: `_jet-${randomString(6)}-`,\r\n        // 存储document element 对象\r\n        el: {\r\n          inputTable: null,\r\n          tbody: null\r\n        },\r\n        // 存储各个div的style\r\n        style: {\r\n          // 'max-height': '400px'\r\n          tbody: { left: '0px' },\r\n          // 左侧固定td的style\r\n          tdLeft: { 'min-width': '4%', 'max-width': '45px' },\r\n          tdLeftDs: { 'min-width': '30px', 'max-width': '35px' },\r\n        },\r\n        // 表单的类型\r\n        formTypes: FormTypes,\r\n        // 行数据\r\n        rows: [],\r\n        // 行高，height + padding + border\r\n        rowHeight,\r\n        // 滚动条顶部距离\r\n        scrollTop: 0,\r\n        // 绑定 select 的值\r\n        selectValues: {},\r\n        // 绑定 checkbox 的值\r\n        checkboxValues: {},\r\n        // 绑定 jdate 的值\r\n        jdateValues: {},\r\n        // file 信息\r\n        uploadValues: {},\r\n        // 绑定左侧选择框已选择的id\r\n        selectedRowIds: [],\r\n        // 存储被删除行的id\r\n        deleteIds: [],\r\n        // 存储显示tooltip的信息\r\n        tooltips: {},\r\n        // 存储没有通过验证的inputId\r\n        notPassedIds: []\r\n      }\r\n    },\r\n    created() {\r\n      // 当前显示的tr\r\n      this.visibleTrEls = []\r\n      // 用来存储input表单的值\r\n      // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\r\n      // 示例：\r\n      // [{\r\n      //    id: \"_jet-4sp0iu-15541771111770\"\r\n      //    dbDefaultVal: \"aaa\",\r\n      //    dbFieldName: \"bbb\",\r\n      //    dbFieldTxt: \"ccc\",\r\n      //    dbLength: 32\r\n      // }]\r\n      this.inputValues = []\r\n      this.disabledRowIds = (this.disabledRowIds || [])\r\n    },\r\n    // 计算属性\r\n    computed: {\r\n      // expandHeight = rows.length * rowHeight\r\n      getExpandHeight() {\r\n        return this.rows.length * this.rowHeight\r\n      },\r\n      // 获取是否选择了部分\r\n      getSelectIndeterminate() {\r\n        return (this.selectedRowIds.length > 0 &&\r\n          this.selectedRowIds.length < this.rows.length)\r\n      },\r\n      // 获取是否选择了全部\r\n      getSelectAll() {\r\n        return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\r\n      },\r\n      tbodyStyle() {\r\n        let style = Object.assign({}, this.style.tbody)\r\n        // style['max-height'] = `${this.maxHeight}px`\r\n        style['width'] = this.realTrWidth\r\n        return style\r\n      },\r\n      showClearSelectButton() {\r\n        let count = 0\r\n        for (let key in this.disabledRows) {\r\n          if (this.disabledRows.hasOwnProperty(key)) count++\r\n        }\r\n        return count > 0\r\n      },\r\n      accessToken() {\r\n        return Vue.ls.get(ACCESS_TOKEN)\r\n      },\r\n      realTrWidth() {\r\n        let calcWidth = 'calc('\r\n        this.columns.forEach((column, i) => {\r\n          let { type, width } = column\r\n          // 隐藏字段不参与计算\r\n          if (type !== FormTypes.hidden) {\r\n            if (typeof width === 'number') {\r\n              calcWidth += width + 'px'\r\n            } else if (typeof width === 'string') {\r\n              calcWidth += width\r\n            } else {\r\n              calcWidth += '120px'\r\n            }\r\n\r\n            if (i < this.columns.length - 1) {\r\n              calcWidth += ' + '\r\n            }\r\n          }\r\n        })\r\n        calcWidth += ')'\r\n        // console.log('calcWidth: ', calcWidth)\r\n        return calcWidth\r\n      }\r\n    },\r\n    // 侦听器\r\n    watch: {\r\n      dataSource: {\r\n        immediate: true,\r\n        handler: function (newValue) {\r\n          this.initialize()\r\n\r\n          let rows = []\r\n          let checkboxValues = {}\r\n          let selectValues = {}\r\n          let jdateValues = {}\r\n          // 禁用行的id\r\n          let disabledRowIds = (this.disabledRowIds || [])\r\n          newValue.forEach((data, newValueIndex) => {\r\n            // 判断源数据是否带有id\r\n            if (data.id == null || data.id === '') {\r\n              data.id = this.removeCaseId(this.generateId() + newValueIndex)\r\n            }\r\n\r\n            let value = { id: this.caseId + data.id }\r\n            let row = { id: value.id }\r\n            let disabled = false\r\n            this.columns.forEach(column => {\r\n              let inputId = column.key + value.id\r\n              let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\r\n              if (column.type === FormTypes.checkbox) {\r\n\r\n                // 判断是否设定了customValue（自定义值）\r\n                if (column.customValue instanceof Array) {\r\n                  let customValue = (column.customValue[0] || '').toString()\r\n                  checkboxValues[inputId] = (sourceValue === customValue)\r\n                } else {\r\n                  checkboxValues[inputId] = sourceValue\r\n                }\r\n\r\n              } else if (column.type === FormTypes.select) {\r\n                if (sourceValue) {\r\n                  // 判断是否是多选\r\n                  selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue\r\n                } else {\r\n                  selectValues[inputId] = undefined\r\n                }\r\n\r\n              } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n                jdateValues[inputId] = sourceValue\r\n\r\n              } else if (column.type === FormTypes.slot) {\r\n                if (sourceValue !== 0 && !sourceValue) {\r\n                  value[column.key] = column.defaultValue\r\n                } else {\r\n                  value[column.key] = sourceValue\r\n                }\r\n\r\n              } else {\r\n                value[column.key] = sourceValue\r\n              }\r\n\r\n              // 解析disabledRows\r\n              for (let columnKey in this.disabledRows) {\r\n                // 判断是否有该属性\r\n                if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\r\n                  // row[columnKey] =\r\n\r\n                  if (disabled !== true) {\r\n                    disabled = this.disabledRows[columnKey] === data[columnKey]\r\n                    if (disabled) {\r\n                      disabledRowIds.push(row.id)\r\n                    }\r\n                  }\r\n\r\n                }\r\n              }\r\n            })\r\n            this.inputValues.push(value)\r\n            rows.push(row)\r\n          })\r\n          this.disabledRowIds = disabledRowIds\r\n          this.checkboxValues = checkboxValues\r\n          this.selectValues = selectValues\r\n          this.jdateValues = jdateValues\r\n          this.rows = rows\r\n\r\n          // 更新form表单的值\r\n          this.$nextTick(() => {\r\n            this.updateFormValues()\r\n          })\r\n\r\n        }\r\n      },\r\n      columns: {\r\n        immediate: true,\r\n        handler(columns) {\r\n          columns.forEach(column => {\r\n            if (column.type === FormTypes.select) {\r\n              // 兼容 旧版本 options\r\n              if (column.options instanceof Array) {\r\n                column.options = column.options.map(item => {\r\n                  if (item) {\r\n                    return {\r\n                      text: item.text || item.title,\r\n                      title: item.text || item.title,\r\n                      value: item.value\r\n                    }\r\n                  }\r\n                  return {}\r\n                })\r\n              }\r\n              if (column.dictCode) {\r\n                this._loadDictConcatToOptions(column)\r\n              }\r\n            }\r\n          })\r\n        }\r\n      },\r\n      // 当selectRowIds改变时触发事件\r\n      selectedRowIds(newValue) {\r\n        this.$emit('selectRowChange', cloneObject(newValue))\r\n      }\r\n    },\r\n    mounted() {\r\n      // 获取document element对象\r\n      let elements = {};\r\n      ['inputTable', 'tbody'].forEach(id => {\r\n        elements[id] = document.getElementById(this.caseId + id)\r\n      })\r\n      this.el = elements\r\n\r\n      let vm = this\r\n      /** 监听滚动条事件 */\r\n      this.el.inputTable.onscroll = function (event) {\r\n        vm.syncScrollBar(event.target.scrollLeft)\r\n      }\r\n      this.el.tbody.onscroll = function (event) {\r\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\r\n      }\r\n\r\n      let { thead, scrollView } = this.$refs\r\n      scrollView.onscroll = function (event) {\r\n\r\n        // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\r\n\r\n        thead.scrollLeft = event.target.scrollLeft\r\n\r\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\r\n\r\n        vm.recalcTrHiddenItem(event.target.scrollTop)\r\n\r\n      }\r\n\r\n    },\r\n    methods: {\r\n\r\n      /** 初始化列表 */\r\n      initialize() {\r\n        this.visibleTrEls = []\r\n        this.rows = []\r\n        this.deleteIds = []\r\n        this.inputValues = []\r\n        this.selectValues = {}\r\n        this.checkboxValues = {}\r\n        this.jdateValues = {}\r\n        this.selectedRowIds = []\r\n        this.tooltips = {}\r\n        this.notPassedIds = []\r\n        this.scrollTop = 0\r\n        this.$nextTick(() => {\r\n          this.el.tbody.scrollTop = 0\r\n        })\r\n      },\r\n\r\n      /** 同步滚动条状态 */\r\n      syncScrollBar(scrollLeft) {\r\n        // this.style.tbody.left = `${scrollLeft}px`\r\n        // this.el.tbody.scrollLeft = scrollLeft\r\n      },\r\n      /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\r\n      resetScrollTop(top) {\r\n        let { scrollView } = this.$refs\r\n        if (top != null && typeof top === 'number') {\r\n          scrollView.scrollTop = top\r\n        } else {\r\n          scrollView.scrollTop = this.scrollTop\r\n        }\r\n      },\r\n      /** 重新计算需要隐藏或显示的tr */\r\n      recalcTrHiddenItem(top) {\r\n        let diff = top - this.scrollTop\r\n        if (diff < 0) {\r\n          diff = this.scrollTop - top\r\n        }\r\n        // 只有在滚动了百分之三十的行高的距离时才进行更新\r\n        if (diff >= this.rowHeight * 0.3) {\r\n          this.scrollTop = top\r\n          // 更新form表单的值\r\n          this.$nextTick(() => {\r\n            this.updateFormValues()\r\n          })\r\n        }\r\n      },\r\n      /** 生成id */\r\n      generateId(rows) {\r\n        if (!(rows instanceof Array)) {\r\n          rows = this.rows || []\r\n        }\r\n        let timestamp = new Date().getTime()\r\n        return `${this.caseId}${timestamp}${rows.length}`\r\n      },\r\n      /** push 一条数据 */\r\n      push(record, update = true, rows) {\r\n        if (!(rows instanceof Array)) {\r\n          rows = cloneObject(this.rows) || []\r\n        }\r\n\r\n        if (record.id == null) {\r\n          record.id = this.generateId(rows)\r\n          // let timestamp = new Date().getTime()\r\n          // record.id = `${this.caseId}${timestamp}${rows.length}`\r\n        }\r\n        if (record.id.indexOf(this.caseId) === -1) {\r\n          record.id = this.caseId + record.id\r\n        }\r\n        let row = { id: record.id }\r\n        let value = { id: row.id }\r\n        let checkboxValues = Object.assign({}, this.checkboxValues)\r\n        let selectValues = Object.assign({}, this.selectValues)\r\n        let jdateValues = Object.assign({}, this.jdateValues)\r\n        this.columns.forEach(column => {\r\n          let key = column.key\r\n          let inputId = key + row.id\r\n          // record中是否有该列的值\r\n          let recordHasValue = record[key] != null\r\n          if (column.type === FormTypes.input) {\r\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\r\n\r\n          } else if (column.type === FormTypes.inputNumber) {\r\n            // 判断是否是排序字段，如果是就赋最大值\r\n            if (column.isOrder === true) {\r\n              value[key] = this.getInputNumberMaxValue(column) + 1\r\n            } else {\r\n              value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\r\n            }\r\n\r\n          } else if (column.type === FormTypes.checkbox) {\r\n            checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked\r\n\r\n          } else if (column.type === FormTypes.select) {\r\n            let selected = column.defaultValue\r\n            if (selected !== 0 && !selected) {\r\n              selected = undefined\r\n            }\r\n            // 判断多选\r\n            if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\r\n              selected = selected.split(',')\r\n            }\r\n            selectValues[inputId] = recordHasValue ? record[key] : selected\r\n\r\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n            jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue\r\n\r\n          } else if (column.type === FormTypes.slot) {\r\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || '')\r\n\r\n          } else {\r\n            value[key] = recordHasValue ? record[key] : ''\r\n          }\r\n        })\r\n        rows.push(row)\r\n        this.inputValues.push(value)\r\n        this.checkboxValues = checkboxValues\r\n        this.selectValues = selectValues\r\n        this.jdateValues = jdateValues\r\n\r\n        if (this.dragSort) {\r\n          this.inputValues.forEach((item, index) => {\r\n            item[this.dragSortKey] = (index + 1)\r\n          })\r\n        }\r\n\r\n        if (update) {\r\n          this.rows = rows\r\n          this.$nextTick(() => {\r\n            this.updateFormValues()\r\n          })\r\n        }\r\n        return rows\r\n      },\r\n      /** 获取某一数字输入框列中的最大的值 */\r\n      getInputNumberMaxValue(column) {\r\n        let maxNum = 0\r\n        this.inputValues.forEach((item, index) => {\r\n          let val = item[column.key], num\r\n          try {\r\n            num = parseInt(val)\r\n          } catch {\r\n            num = 0\r\n          }\r\n          // 把首次循环的结果当成最大值\r\n          if (index === 0) {\r\n            maxNum = num\r\n          } else {\r\n            maxNum = (num > maxNum) ? num : maxNum\r\n          }\r\n        })\r\n        return maxNum\r\n      },\r\n      /** 添加一行 */\r\n      add(num = 1, forceScrollToBottom = false) {\r\n        if (num < 1) return\r\n        // let timestamp = new Date().getTime()\r\n        let rows = this.rows\r\n        let row\r\n        for (let i = 0; i < num; i++) {\r\n          // row = { id: `${this.caseId}${timestamp}${rows.length}` }\r\n          row = { id: this.generateId(rows) }\r\n          rows = this.push(row, false, rows)\r\n        }\r\n        this.rows = rows\r\n\r\n        this.$nextTick(() => {\r\n          this.updateFormValues()\r\n        })\r\n        // 触发add事件\r\n        this.$emit('added', {\r\n          row: (() => {\r\n            let r = Object.assign({}, row)\r\n            r.id = this.removeCaseId(r.id)\r\n            return r\r\n          })(),\r\n          target: this\r\n        })\r\n        // 设置滚动条位置\r\n        let tbody = this.el.tbody\r\n        let offsetHeight = tbody.offsetHeight\r\n        let realScrollTop = tbody.scrollTop + offsetHeight\r\n        if (forceScrollToBottom === false) {\r\n          // 只有滚动条在底部的时候才自动滚动\r\n          if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\r\n            return\r\n          }\r\n        }\r\n        this.$nextTick(() => {\r\n          tbody.scrollTop = tbody.scrollHeight\r\n        })\r\n      },\r\n      /** 删除被选中的行 */\r\n      removeSelectedRows() {\r\n        this.removeRows(this.selectedRowIds)\r\n        this.selectedRowIds = []\r\n      },\r\n      /** 删除一行或多行 */\r\n      removeRows(id) {\r\n        let ids = id\r\n        if (!(id instanceof Array)) {\r\n          if (typeof id === 'string') {\r\n            ids = [id]\r\n          } else {\r\n            throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\r\n          }\r\n        }\r\n\r\n        let rows = cloneObject(this.rows)\r\n        ids.forEach(removeId => {\r\n          // 找到每个id对应的真实index并删除\r\n          const findAndDelete = (arr) => {\r\n            for (let i = 0; i < arr.length; i++) {\r\n              if (arr[i].id === removeId || arr[i].id === this.caseId + removeId) {\r\n                arr.splice(i, 1)\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          // 找到rows对应的index，并删除\r\n          if (findAndDelete(rows)) {\r\n            // 找到values对应的index，并删除\r\n            findAndDelete(this.inputValues)\r\n            // 将caseId去除\r\n            let id = this.removeCaseId(removeId)\r\n            this.deleteIds.push(id)\r\n          }\r\n        })\r\n        this.rows = rows\r\n        this.$emit('deleted', this.getDeleteIds())\r\n        this.$nextTick(() => {\r\n          // 更新formValues\r\n          this.updateFormValues()\r\n        })\r\n        return true\r\n      },\r\n\r\n      /** 获取表格表单里的值（同步版） */\r\n      getValuesSync(options = {}) {\r\n        let { validate, rowIds } = options\r\n        if (typeof validate !== 'boolean') validate = true\r\n        if (!(rowIds instanceof Array)) rowIds = null\r\n        // console.log('options:', { validate, rowIds })\r\n\r\n        let error = 0\r\n        let inputValues = cloneObject(this.inputValues)\r\n        let tooltips = Object.assign({}, this.tooltips)\r\n        let notPassedIds = cloneObject(this.notPassedIds)\r\n        // 用于存储合并后的值\r\n        let values = []\r\n        // 遍历inputValues来获取每行的值\r\n        for (let value of inputValues) {\r\n          let rowIdsFlag = false\r\n          // 如果带有rowIds，那么就只存这几行的数据\r\n          if (rowIds == null) {\r\n            rowIdsFlag = true\r\n          } else {\r\n            for (let rowId of rowIds) {\r\n              if (rowId === value.id || `${this.caseId}${rowId}` === value.id) {\r\n                rowIdsFlag = true\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          if (!rowIdsFlag) continue\r\n\r\n          this.columns.forEach(column => {\r\n            let inputId = column.key + value.id\r\n            if (column.type === FormTypes.checkbox) {\r\n              let checked = this.checkboxValues[inputId]\r\n              if (column.customValue instanceof Array) {\r\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1]\r\n              } else {\r\n                value[column.key] = checked\r\n              }\r\n\r\n            } else if (column.type === FormTypes.select) {\r\n              let selected = this.selectValues[inputId]\r\n              if (selected instanceof Array) {\r\n                value[column.key] = cloneObject(selected)\r\n              } else {\r\n                value[column.key] = selected\r\n              }\r\n\r\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n              value[column.key] = this.jdateValues[inputId]\r\n\r\n            } else if (column.type === FormTypes.upload) {\r\n              value[column.key] = cloneObject(this.uploadValues[inputId] || null)\r\n\r\n            }\r\n            // 检查表单验证\r\n            if (validate === true) {\r\n              let results = this.validateOneInput(value[column.key], value, column, notPassedIds, false)\r\n              tooltips[inputId] = results[0]\r\n              if (tooltips[inputId].visible) {\r\n                error++\r\n                // if (error++ === 0) {\r\n                // let element = document.getElementById(inputId)\r\n                // while (element.className !== 'tr') {\r\n                //   element = element.parentElement\r\n                // }\r\n                // this.jumpToId(inputId, element)\r\n                // }\r\n              }\r\n              tooltips[inputId].visible = false\r\n              notPassedIds = results[1]\r\n            }\r\n          })\r\n          // 将caseId去除\r\n          value.id = this.removeCaseId(value.id)\r\n          values.push(value)\r\n\r\n        }\r\n\r\n        this.tooltips = tooltips\r\n        this.notPassedIds = notPassedIds\r\n        return { error, values }\r\n      },\r\n\r\n      /** 获取表格表单里的值 */\r\n      getValues(callback, validate = true, rowIds) {\r\n        let result = this.getValuesSync({ validate, rowIds })\r\n        if (typeof callback === 'function') {\r\n          callback(result.error, result.values)\r\n        }\r\n      },\r\n      /** getValues的Promise版 */\r\n      getValuesPromise(validate = true, rowIds) {\r\n        return new Promise((resolve, reject) => {\r\n          let { error, values } = this.getValuesSync({ validate, rowIds })\r\n          if (error === 0) {\r\n            resolve(values)\r\n          } else {\r\n            reject(VALIDATE_NO_PASSED)\r\n          }\r\n        })\r\n      },\r\n      /** 获取被删除项的id */\r\n      getDeleteIds() {\r\n        return cloneObject(this.deleteIds)\r\n      },\r\n      /** 获取所有的数据，包括values、deleteIds */\r\n      getAll(validate) {\r\n        return new Promise((resolve, reject) => {\r\n          let deleteIds = this.getDeleteIds()\r\n          this.getValuesPromise(validate).then((values) => {\r\n            resolve({ values, deleteIds })\r\n          }).catch(error => {\r\n            reject(error)\r\n          })\r\n        })\r\n      },\r\n      /** Sync 获取所有的数据，包括values、deleteIds */\r\n      getAllSync(validate, rowIds) {\r\n        let result = this.getValuesSync({ validate, rowIds })\r\n        result.deleteIds = this.getDeleteIds()\r\n        return result\r\n      },\r\n      // slot 获取值\r\n      _getValueForSlot(rowId) {\r\n        return this.getValuesSync({ rowIds: [rowId] }).values[0]\r\n      },\r\n      /** 设置某行某列的值 */\r\n      setValues(values) {\r\n\r\n        values.forEach(item => {\r\n          let { rowKey, values: newValues } = item\r\n          for (let newValueKey in newValues) {\r\n            if (newValues.hasOwnProperty(newValueKey)) {\r\n              let newValue = newValues[newValueKey]\r\n              let edited = false // 已被修改\r\n              this.inputValues.forEach(value => {\r\n                // 在inputValues中找到了该字段\r\n                if (`${this.caseId}${rowKey}` === value.id) {\r\n                  if (value.hasOwnProperty(newValueKey)) {\r\n                    edited = true\r\n                    value[newValueKey] = newValue\r\n                  }\r\n                }\r\n              })\r\n              let modelKey = `${newValueKey}${this.caseId}${rowKey}`\r\n              // 在 selectValues 中寻找值\r\n              if (!edited && this.selectValues.hasOwnProperty(modelKey)) {\r\n                if (newValue !== 0 && !newValue) {\r\n                  this.selectValues[modelKey] = undefined\r\n                } else {\r\n                  this.selectValues[modelKey] = newValue\r\n                }\r\n                edited = true\r\n              }\r\n              // 在 checkboxValues 中寻找值\r\n              if (!edited && this.checkboxValues.hasOwnProperty(modelKey)) {\r\n                this.checkboxValues[modelKey] = newValue\r\n                edited = true\r\n              }\r\n              // 在 jdateValues 中寻找值\r\n              if (!edited && this.jdateValues.hasOwnProperty(modelKey)) {\r\n                this.jdateValues[modelKey] = newValue\r\n                edited = true\r\n              }\r\n            }\r\n          }\r\n        })\r\n        // 强制更新formValues\r\n        this.forceUpdateFormValues()\r\n      },\r\n\r\n      /** 跳转到指定位置 */\r\n      // jumpToId(id, element) {\r\n      //   if (element == null) {\r\n      //     element = document.getElementById(id)\r\n      //   }\r\n      //   if (element != null) {\r\n      //     console.log(this.el.tbody.scrollTop, element.offsetTop)\r\n      //     this.el.tbody.scrollTop = element.offsetTop\r\n      //     console.log(this.el.tbody.scrollTop, element.offsetTop)\r\n      //   }\r\n      // },\r\n\r\n      /** 验证单个表单 */\r\n      validateOneInput(value, row, column, notPassedIds, update = false) {\r\n        let tooltips = Object.assign({}, this.tooltips)\r\n        // let notPassedIds = cloneObject(this.notPassedIds)\r\n        let inputId = column.key + row.id\r\n        let [passed, message] = this.validateValue(column.validateRules, value)\r\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\r\n        tooltips[inputId].visible = !passed\r\n        let index = notPassedIds.indexOf(inputId)\r\n        let borderColor = null, boxShadow = null\r\n        if (!passed) {\r\n          tooltips[inputId].title = this.replaceProps(column, message)\r\n          borderColor = 'red'\r\n          boxShadow = `0 0 0 2px rgba(255, 0, 0, 0.2)`\r\n          if (index === -1) notPassedIds.push(inputId)\r\n        } else {\r\n          if (index !== -1) notPassedIds.splice(index, 1)\r\n        }\r\n\r\n        let element = document.getElementById(inputId)\r\n        if (element != null) {\r\n          // select 在 .ant-select-selection 上设置 border-color\r\n          if (column.type === FormTypes.select) {\r\n            element = element.getElementsByClassName('ant-select-selection')[0]\r\n          }\r\n          // jdate 在 input 上设置 border-color\r\n          if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\r\n            element = element.getElementsByTagName('input')[0]\r\n          }\r\n          element.style.borderColor = borderColor\r\n          element.style.boxShadow = boxShadow\r\n        }\r\n        // 是否更新到data\r\n        if (update) {\r\n          this.tooltips = tooltips\r\n          this.notPassedIds = notPassedIds\r\n        }\r\n        return [tooltips[inputId], notPassedIds]\r\n      },\r\n      /** 通过规则验证值是否正确 */\r\n      validateValue(rules, value) {\r\n        let passed = true, message = ''\r\n        // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\r\n        if (rules instanceof Array) {\r\n          for (let rule of rules) {\r\n            // 当前值是否为空\r\n            let isNull = (value == null || value === '')\r\n            // 验证规则：非空\r\n            if (rule.required === true && isNull) {\r\n              passed = false\r\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\r\n            // 验证规则：正则表达式\r\n            if (!!rule.pattern && !isNull) {\r\n\r\n              // 兼容 online 的规则\r\n              let foo = [\r\n                { title: '唯一校验', value: 'only', pattern: null },\r\n                { title: '6到16位数字', value: 'n6-16', pattern: /\\d{6,18}/ },\r\n                { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\r\n                { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\r\n                { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\r\n                { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\r\n                { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\r\n                { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\r\n                { title: '数字', value: 'n', pattern: /^-?\\d+\\.?\\d*$/ },\r\n                { title: '整数', value: 'z', pattern: /^[1-9]\\d*$/ },\r\n                { title: '非空', value: '*', pattern: /^.+$/ },\r\n                { title: '6到18位字符串', value: 's6-18', pattern: /^.{6,18}$/ },\r\n                { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\r\n              ]\r\n              let flag = false\r\n              for (let item of foo) {\r\n                if (rule.pattern === item.value && item.pattern) {\r\n                  passed = new RegExp(item.pattern).test(value)\r\n                  flag = true\r\n                  break\r\n                }\r\n              }\r\n              if (!flag) passed = new RegExp(rule.pattern).test(value)\r\n            }\r\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\r\n            if (!passed) {\r\n              message = rule.message\r\n              break\r\n            }\r\n          }\r\n        }\r\n        return [passed, message]\r\n      },\r\n\r\n      /** 动态更新表单的值 */\r\n      updateFormValues() {\r\n        let trs = this.el.tbody.getElementsByClassName('tr')\r\n        let trEls = []\r\n        for (let tr of trs) {\r\n          trEls.push(tr)\r\n        }\r\n        // 获取新增的 tr\r\n        let newTrEls = trEls\r\n        if (this.visibleTrEls.length > 0) {\r\n          newTrEls = []\r\n          for (let tr of trEls) {\r\n            let isNewest = true\r\n            for (let vtr of this.visibleTrEls) {\r\n              if (vtr.id === tr.id) {\r\n                isNewest = false\r\n                break\r\n              }\r\n            }\r\n            if (isNewest) {\r\n              newTrEls.push(tr)\r\n            }\r\n          }\r\n        }\r\n        this.visibleTrEls = trEls\r\n        // 向新增的tr中赋值\r\n        newTrEls.forEach(tr => {\r\n          let { idx } = tr.dataset\r\n          let value = this.inputValues[idx]\r\n          for (let key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n              let elid = `${key}${value.id}`\r\n              let el = document.getElementById(elid)\r\n              if (el) {\r\n                el.value = value[key]\r\n              }\r\n            }\r\n          }\r\n        })\r\n      },\r\n      /** 强制更新FormValues */\r\n      forceUpdateFormValues() {\r\n        this.visibleTrEls = []\r\n        this.updateFormValues()\r\n      },\r\n\r\n      /** 全选或取消全选 */\r\n      handleChangeCheckedAll() {\r\n        let selectedRowIds = []\r\n        if (!this.getSelectAll) {\r\n          this.rows.forEach(row => {\r\n            if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\r\n              selectedRowIds.push(row.id)\r\n            }\r\n          })\r\n        }\r\n        this.selectedRowIds = selectedRowIds\r\n      },\r\n      /** 左侧行选择框change事件 */\r\n      handleChangeLeftCheckbox(event) {\r\n        let { id } = event.target\r\n\r\n        if ((this.disabledRowIds || []).indexOf(id) !== -1) {\r\n          return\r\n        }\r\n\r\n        let index = this.selectedRowIds.indexOf(id)\r\n        if (index !== -1) {\r\n          this.selectedRowIds.splice(index, 1)\r\n        } else {\r\n          this.selectedRowIds.push(id)\r\n        }\r\n\r\n      },\r\n      handleClickAdd() {\r\n        this.add()\r\n      },\r\n      handleConfirmDelete() {\r\n        this.removeSelectedRows()\r\n      },\r\n      handleClickClearSelect() {\r\n        this.selectedRowIds = []\r\n      },\r\n      /** select 搜索时的事件，用于动态添加options */\r\n      handleSearchSelect(value, id, row, col) {\r\n        if (col.allowInput === true) {\r\n          // 是否找到了对应的项，找不到则添加这一项\r\n          let flag = false\r\n          for (let option of col.options) {\r\n            if (option.value.toLocaleString() === value.toLocaleString()) {\r\n              flag = true\r\n              break\r\n            }\r\n          }\r\n          // !!value ：不添加空值\r\n          if (!flag && !!value) {\r\n            // searchAdd 是否是通过搜索添加的\r\n            col.options.push({ title: value, value: value, searchAdd: true })\r\n          }\r\n\r\n        }\r\n      },\r\n      // blur 失去焦点\r\n      handleBlurSearch(value, id, row, col) {\r\n        if (col.allowInput === true) {\r\n          // 删除无用的因搜索（用户输入）而创建的项\r\n          if (typeof value === 'string') {\r\n            let indexs = []\r\n            col.options.forEach((option, index) => {\r\n              if (option.value.toLocaleString() === value.toLocaleString()) {\r\n                delete option.searchAdd\r\n              } else if (option.searchAdd === true) {\r\n                indexs.push(index)\r\n              }\r\n            })\r\n            // 翻转删除数组中的项\r\n            for (let index of indexs.reverse()) {\r\n              col.options.splice(index, 1)\r\n            }\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      /** 拖动结束，交换inputValue中的值 */\r\n      handleDragMoveEnd(event) {\r\n        let { oldIndex, newIndex } = event\r\n\r\n        let values = this.inputValues\r\n        // 存储旧数据，并删除旧项目\r\n        let temp = values[oldIndex]\r\n        values.splice(oldIndex, 1)\r\n        // 向新项目里添加旧数据\r\n        values.splice(newIndex, 0, temp)\r\n\r\n        values.forEach((item, index) => {\r\n          item[this.dragSortKey] = (index + 1)\r\n        })\r\n\r\n        this.forceUpdateFormValues()\r\n\r\n        // 触发已拖动事件\r\n        this.$emit('dragged', {\r\n          oldIndex,\r\n          newIndex,\r\n          target: this\r\n        })\r\n      },\r\n\r\n      /* --- common function begin --- */\r\n\r\n      /** 鼠标移入 */\r\n      handleMouseoverCommono(row, column) {\r\n        let inputId = column.key + row.id\r\n        if (this.notPassedIds.indexOf(inputId) !== -1) {\r\n          this.showOrHideTooltip(inputId, true)\r\n        }\r\n      },\r\n      /** 鼠标移出 */\r\n      handleMouseoutCommono(row, column) {\r\n        let inputId = column.key + row.id\r\n        this.showOrHideTooltip(inputId, false)\r\n      },\r\n      /** input事件 */\r\n      handleInputCommono(target, index, row, column) {\r\n        let { value, dataset, selectionStart } = target\r\n        let type = FormTypes.input\r\n        let change = true\r\n        if (`${dataset.inputNumber}` === 'true') {\r\n          type = FormTypes.inputNumber\r\n          let replace = value.replace(/[^0-9]/g, '')\r\n          if (value !== replace) {\r\n            change = false\r\n            value = replace\r\n            target.value = replace\r\n            if (typeof selectionStart === 'number') {\r\n              target.selectionStart = selectionStart - 1\r\n              target.selectionEnd = selectionStart - 1\r\n            }\r\n          }\r\n        }\r\n        // 存储输入的值\r\n        this.inputValues[index][column.key] = value\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true)\r\n\r\n        // 触发valueChange 事件\r\n        if (change) {\r\n          this.elemValueChange(type, row, column, value)\r\n        }\r\n      },\r\n      handleChangeCheckboxCommon(event, row, column) {\r\n        let { id, checked } = event.target\r\n        this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\r\n\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(FormTypes.checkbox, row, column, checked)\r\n      },\r\n      handleChangeSelectCommon(value, id, row, column) {\r\n        this.selectValues = this.bindValuesChange(value, id, 'selectValues')\r\n        // 做单个表单验证\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true)\r\n\r\n        // 触发valueChange 事件\r\n        this.elemValueChange(FormTypes.select, row, column, value)\r\n      },\r\n      handleChangeJDateCommon(value, id, row, column, showTime) {\r\n        this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\r\n        this.validateOneInput(value, row, column, this.notPassedIds, true)\r\n\r\n        // 触发valueChange 事件\r\n        if (showTime) {\r\n          this.elemValueChange(FormTypes.datetime, row, column, value)\r\n        } else {\r\n          this.elemValueChange(FormTypes.date, row, column, value)\r\n        }\r\n      },\r\n      handleChangeUpload(info, id, row, column) {\r\n        let { file } = info\r\n        let value = {\r\n          name: file.name,\r\n          type: file.type,\r\n          size: file.size,\r\n          status: file.status,\r\n          percent: file.percent\r\n        }\r\n        if (column.responseName && file.response) {\r\n          value['responseName'] = file.response[column.responseName]\r\n        }\r\n        this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\r\n      },\r\n      /** 记录用到数据绑定的组件的值 */\r\n      bindValuesChange(value, id, key) {\r\n        let values = Object.assign({}, this[key])\r\n        values[id] = value\r\n        return values\r\n      },\r\n\r\n      /** 显示或隐藏tooltip */\r\n      showOrHideTooltip(inputId, show) {\r\n        let tooltips = Object.assign({}, this.tooltips)\r\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\r\n        tooltips[inputId].visible = show\r\n        this.tooltips = tooltips\r\n      },\r\n\r\n      /** value 触发valueChange事件 */\r\n      elemValueChange(type, rowSource, columnSource, value) {\r\n        let column = Object.assign({}, columnSource)\r\n        // 将caseId去除\r\n        let row = Object.assign({}, rowSource)\r\n        row.id = this.removeCaseId(row.id)\r\n        // 获取整行的数据\r\n        let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\r\n        if (values.length > 0) {\r\n          Object.assign(row, values[0])\r\n        }\r\n        this.$emit('valueChange', { type, row, column, value, target: this })\r\n      },\r\n\r\n      /** 将caseId去除 */\r\n      removeCaseId(id) {\r\n        let remove = id.split(this.caseId)[1]\r\n        return remove ? remove : id\r\n      },\r\n\r\n      handleClickDelFile(id) {\r\n        this.uploadValues[id] = null\r\n      },\r\n\r\n      /** 加载数据字典并合并到 options */\r\n      _loadDictConcatToOptions(column) {\r\n        initDictOptions(column.dictCode).then((res) => {\r\n          if (res.success) {\r\n            let newOptions = (column.options || [])// .concat(res.result)\r\n            res.result.forEach(item => {\r\n              for (let option of newOptions) if (option.value === item.value) return\r\n              newOptions.push(item)\r\n            })\r\n            column.options = newOptions\r\n          } else {\r\n            console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\r\n            console.log(res.message)\r\n            console.groupEnd()\r\n          }\r\n        })\r\n      },\r\n\r\n      /* --- common function end --- */\r\n\r\n      /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\r\n\r\n      /** 辅助方法：打印日志 */\r\n      log: console.log,\r\n\r\n      getVM() {\r\n        return this\r\n      },\r\n\r\n      /** 辅助方法：指定a-select 和 j-data 的父容器 */\r\n      getParentContainer(node) {\r\n        let element = (() => {\r\n          // nodeType 8\t: Comment\t: 注释\r\n          if (this.$el && this.$el.nodeType !== 8) {\r\n            return this.$el\r\n          }\r\n          let doc = document.getElementById(this.caseId + 'inputTable')\r\n          if (doc != null) {\r\n            return doc\r\n          }\r\n          return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\r\n        })()\r\n\r\n        // 递归判断是否带有 overflow: hidden；的父元素\r\n        const ifParent = (child) => {\r\n          let currentOverflow = null\r\n          if (child['currentStyle']) {\r\n            currentOverflow = child['currentStyle']['overflow']\r\n          } else if (window.getComputedStyle) {\r\n            currentOverflow = window.getComputedStyle(child)['overflow']\r\n          }\r\n          if (currentOverflow != null) {\r\n            if (currentOverflow === 'hidden') {\r\n              // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\r\n              let temp = ifParent(child.parentNode)\r\n              return temp != null ? temp : child.parentNode\r\n            } else\r\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\r\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\r\n              return ifParent(child.parentNode)\r\n            } else {\r\n              // 直到 body 都没有遇到有 hidden 的标签\r\n              return null\r\n            }\r\n          } else {\r\n            return child\r\n          }\r\n        }\r\n\r\n        let temp = ifParent(element)\r\n        return (temp != null) ? temp : element\r\n      },\r\n\r\n      /** 辅助方法：替换${...}变量 */\r\n      replaceProps(col, value) {\r\n        if (value && typeof value === 'string') {\r\n          value = value.replace(/\\${title}/g, col.title)\r\n          value = value.replace(/\\${key}/g, col.key)\r\n          value = value.replace(/\\${defaultValue}/g, col.defaultValue)\r\n        }\r\n        return value\r\n      },\r\n\r\n      /** view辅助方法：构建 tr style */\r\n      buildTrStyle(index) {\r\n        return {\r\n          'top': `${rowHeight * index}px`\r\n        }\r\n      },\r\n      /** view辅助方法：构建 td style */\r\n      buildTdStyle(col) {\r\n        let style = {}\r\n        // 计算宽度\r\n        if (col.width) {\r\n          style['width'] = col.width\r\n        } else if (this.columns) {\r\n          style['width'] = `${(100 - 4 * 2) / this.columns.length}%`\r\n        } else {\r\n          style['width'] = '120px'\r\n        }\r\n        // checkbox 居中显示\r\n        let isCheckbox = col.type === FormTypes.checkbox\r\n        if (isCheckbox) {\r\n          style['align-items'] = 'center'\r\n          style['text-align'] = 'center'\r\n          style['padding-left'] = '0'\r\n          style['padding-right'] = '0'\r\n        }\r\n        return style\r\n      },\r\n      /** view辅助方法：构造props */\r\n      buildProps(row, col) {\r\n        let props = {}\r\n        // 解析props\r\n        if (typeof col.props === 'object') {\r\n          for (let prop in col.props) {\r\n            if (col.props.hasOwnProperty(prop)) {\r\n              props[prop] = this.replaceProps(col, col.props[prop])\r\n            }\r\n          }\r\n        }\r\n        // 判断select是否允许输入\r\n        if (col.type === FormTypes.select && col.allowInput === true) {\r\n          props['showSearch'] = true\r\n        }\r\n\r\n        // 判断是否是禁用的列\r\n        props['disabled'] = !!col['disabled']\r\n\r\n        // 判断是否为禁用的行\r\n        if (props['disabled'] !== true) {\r\n          props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\r\n        }\r\n\r\n        // 判断是否禁用全部组件\r\n        if (this.disabled === true) {\r\n          props['disabled'] = true\r\n        }\r\n\r\n        return props\r\n      },\r\n      /** upload 辅助方法：获取 headers */\r\n      uploadGetHeaders(row, column) {\r\n        let headers = {}\r\n        if (column.token === true) {\r\n          headers['X-Access-Token'] = this.accessToken\r\n        }\r\n        return headers\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n  .action-button {\r\n    margin-bottom: 8px;\r\n\r\n    .gap {\r\n      padding-left: 8px;\r\n    }\r\n\r\n  }\r\n\r\n  /* 设定边框参数 */\r\n  @borderColor: #e8e8e8;\r\n  @border: 1px solid @borderColor;\r\n  /* tr & td 之间的间距 */\r\n  @spacing: 8px;\r\n\r\n  .input-table {\r\n    max-width: 100%;\r\n    overflow-x: hidden;\r\n    overflow-y: hidden;\r\n    position: relative;\r\n    border: @border;\r\n\r\n    .thead, .tbody {\r\n\r\n      .tr, .td {\r\n        display: flex;\r\n      }\r\n\r\n      .td {\r\n\r\n        /*border-right: 1px solid red;*/\r\n        /*color: white;*/\r\n        /*background-color: black;*/\r\n        /*margin-right: @spacing !important;*/\r\n\r\n        padding-left: @spacing;\r\n        flex-direction: column;\r\n\r\n        &.td-cb, &.td-num {\r\n          min-width: 4%;\r\n          max-width: 45px;\r\n          margin-right: 0;\r\n          padding-left: 0;\r\n          padding-right: 0;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n\r\n        &.td-ds {\r\n          margin-right: 0;\r\n          padding-left: 0;\r\n          padding-right: 0;\r\n          justify-content: center;\r\n          align-items: center;\r\n\r\n          .td-ds-icons {\r\n            position: relative;\r\n            cursor: move;\r\n            width: 100%;\r\n            /*padding: 25% 0;*/\r\n            height: 100%;\r\n\r\n            .anticon-align-left,\r\n            .anticon-align-right {\r\n              position: absolute;\r\n              top: 30%;\r\n            }\r\n\r\n            .anticon-align-left {\r\n              left: 25%;\r\n            }\r\n\r\n            .anticon-align-right {\r\n              right: 25%;\r\n            }\r\n          }\r\n\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    .thead {\r\n      overflow-y: scroll;\r\n      overflow-x: hidden;\r\n      border-bottom: @border;\r\n\r\n      /** 隐藏thead的滑块   */\r\n\r\n      &::-webkit-scrollbar-thumb {\r\n        box-shadow: none !important;\r\n        background-color: transparent !important;\r\n      }\r\n\r\n      .tr {\r\n        min-width: 100%;\r\n        overflow-y: scroll;\r\n      }\r\n\r\n      .td {\r\n        /*flex: 1;*/\r\n        padding: 8px @spacing;\r\n        justify-content: center;\r\n      }\r\n\r\n    }\r\n\r\n    .tbody {\r\n      position: relative;\r\n      top: 0;\r\n      left: 0;\r\n      overflow-x: hidden;\r\n      overflow-y: hidden;\r\n      min-height: 61px;\r\n      /*max-height: 400px;*/\r\n      min-width: 100%;\r\n\r\n      .tr-nodata {\r\n        color: #999;\r\n        line-height: 61px;\r\n        text-align: center;\r\n      }\r\n\r\n      .tr {\r\n        /*line-height: 50px;*/\r\n\r\n        border-bottom: @border;\r\n        transition: background-color 300ms;\r\n        width: 100%;\r\n        position: absolute;\r\n        left: 0;\r\n        z-index: 10;\r\n\r\n        &.tr-checked {\r\n          background-color: #fafafa;\r\n        }\r\n\r\n        &:hover {\r\n          background-color: #E6F7FF;\r\n        }\r\n\r\n      }\r\n\r\n      .tr-expand {\r\n        position: relative;\r\n        z-index: 9;\r\n        background-color: white;\r\n      }\r\n\r\n      .td {\r\n        /*flex: 1;*/\r\n        padding: 14px 0 14px @spacing;\r\n        justify-content: center;\r\n\r\n        &:last-child {\r\n          padding-right: @spacing;\r\n        }\r\n\r\n        input {\r\n          font-variant: tabular-nums;\r\n          box-sizing: border-box;\r\n          margin: 0;\r\n          list-style: none;\r\n          position: relative;\r\n          display: inline-block;\r\n          padding: 4px 11px;\r\n          width: 100%;\r\n          height: 32px;\r\n          font-size: 14px;\r\n          line-height: 1.5;\r\n          color: rgba(0, 0, 0, 0.65);\r\n          background-color: #fff;\r\n          border: 1px solid #d9d9d9;\r\n          border-radius: 4px;\r\n          transition: all 0.3s;\r\n          outline: none;\r\n\r\n          &:hover {\r\n            border-color: #4D90FE\r\n          }\r\n\r\n          &:focus {\r\n            border-color: #40a9ff;\r\n            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n            border-right-width: 1px !important;\r\n          }\r\n\r\n          &:disabled {\r\n            color: rgba(0, 0, 0, 0.25);\r\n            background: #f5f5f5;\r\n            cursor: not-allowed;\r\n          }\r\n\r\n          /* 设置placeholder的颜色 */\r\n\r\n          &::-webkit-input-placeholder { /* WebKit browsers */\r\n            color: #ccc;\r\n          }\r\n\r\n          &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n            color: #ccc;\r\n          }\r\n\r\n          &::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n            color: #ccc;\r\n          }\r\n\r\n          &:-ms-input-placeholder { /* Internet Explorer 10+ */\r\n            color: #ccc;\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    .scroll-view {\r\n      overflow: auto;\r\n      overflow-y: scroll;\r\n    }\r\n\r\n    .thead, .thead .tr, .scroll-view {\r\n      @scrollBarSize: 6px;\r\n      /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\r\n\r\n      &::-webkit-scrollbar {\r\n        width: @scrollBarSize;\r\n        height: @scrollBarSize;\r\n        background-color: transparent;\r\n      }\r\n\r\n      /* 定义滚动条轨道 */\r\n\r\n      &::-webkit-scrollbar-track {\r\n        background-color: #f0f0f0;\r\n      }\r\n\r\n      /* 定义滑块 */\r\n\r\n      &::-webkit-scrollbar-thumb {\r\n        background-color: #eee;\r\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n\r\n        &:hover {\r\n          background-color: #bbb;\r\n        }\r\n\r\n        &:active {\r\n          background-color: #888;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    .thead .tr {\r\n\r\n      &::-webkit-scrollbar-track {\r\n        background-color: transparent;\r\n      }\r\n\r\n      /* IE模式下隐藏 */\r\n      -ms-overflow-style: none;\r\n      -ms-scroll-chaining: chained;\r\n      -ms-content-zooming: zoom;\r\n      -ms-scroll-rails: none;\r\n      -ms-content-zoom-limit-min: 100%;\r\n      -ms-content-zoom-limit-max: 500%;\r\n      -ms-scroll-snap-type: proximity;\r\n      -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\r\n    }\r\n\r\n  }\r\n\r\n</style>"]}]}