{"remainingRequest":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xxm\\work\\jd\\fore\\src\\components\\jeecgbiz\\modal\\JSelectNoticeDepartModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xxm\\work\\jd\\fore\\src\\components\\jeecgbiz\\modal\\JSelectNoticeDepartModal.vue","mtime":1578563269531},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\babel-loader\\lib\\index.js","mtime":1570779245522},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js","mtime":1570779225726}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {queryDepartTreeList} from '@/api/api'\n\nexport default {\n  name: 'JSelectNoticeDepartModal',\n  props: ['modalWidth', 'multi', 'rootOpened', 'departId'],\n  data() {\n    return {\n      visible: false,\n      confirmLoading: false,\n      treeData: [],\n      autoExpandParent: true,\n      expandedKeys: [],\n      dataList: [],\n      checkedKeys: [],\n      checkedRows: [],\n      searchValue: \"\"\n    }\n  },\n  created() {\n    this.loadDepart();\n  },\n  watch: {\n    departId() {\n      this.initDepartComponent()\n    },\n    visible: {\n      handler() {\n        if (this.departId) {\n          this.checkedKeys = this.departId.split(\",\");\n          // console.log('this.departId', this.departId)\n        } else {\n          this.checkedKeys = [];\n        }\n      }\n    }\n  },\n  methods: {\n    show() {\n      this.visible = true\n      this.checkedRows = []\n      this.checkedKeys = []\n      console.log(\"this.multi\", this.multi)\n    },\n    loadDepart() {\n      queryDepartTreeList().then(res => {\n        if (res.success) {\n          let arr = [...res.result]\n          this.reWriterWithSlot(arr)\n          this.treeData = arr\n          this.initDepartComponent()\n          if (this.rootOpened) {\n            this.initExpandedKeys(res.result)\n          }\n        }\n      })\n    },\n    initDepartComponent() {\n      let names = ''\n      if (this.departId) {\n        let currDepartId = this.departId\n        for (let item of this.dataList) {\n          if (currDepartId.indexOf(item.key) >= 0) {\n            names += \",\" + item.title\n          }\n        }\n        if (names) {\n          names = names.substring(1)\n        }\n      }\n      this.$emit(\"initComp\", names)\n    },\n    reWriterWithSlot(arr) {\n      for (let item of arr) {\n        if (item.children && item.children.length > 0) {\n          this.reWriterWithSlot(item.children)\n          let temp = Object.assign({}, item)\n          temp.children = {}\n          this.dataList.push(temp)\n        } else {\n          this.dataList.push(item)\n          item.scopedSlots = {title: 'title'}\n        }\n      }\n    },\n    initExpandedKeys(arr) {\n      if (arr && arr.length > 0) {\n        let keys = []\n        for (let item of arr) {\n          if (item.children && item.children.length > 0) {\n            keys.push(item.id)\n          }\n        }\n        this.expandedKeys = [...keys]\n      } else {\n        this.expandedKeys = []\n      }\n    },\n    onCheck(checkedKeys, info) {\n      if (!this.multi) {\n        let arr = checkedKeys.checked.filter(item => {\n          return this.checkedKeys.indexOf(item) < 0\n        })\n        this.checkedKeys = [...arr]\n        this.checkedRows = [info.node.dataRef]\n      } else {\n        this.checkedKeys = checkedKeys.checked\n        this.checkedRows.push(info.node.dataRef)\n      }\n      //this.$emit(\"input\",this.checkedKeys.join(\",\"))\n      //console.log(this.checkedKeys.join(\",\"))\n    },\n    onSelect(selectedKeys, info) {\n      console.log(selectedKeys)\n      let keys = []\n      keys.push(selectedKeys[0])\n      if (!this.checkedKeys || this.checkedKeys.length == 0 || !this.multi) {\n        this.checkedKeys = [...keys]\n        this.checkedRows = [info.node.dataRef]\n      } else {\n        let currKey = info.node.dataRef.key\n        if (this.checkedKeys.indexOf(currKey) >= 0) {\n          this.checkedKeys = this.checkedKeys.filter(item => {\n            return item != currKey\n          })\n          this.checkedRows = this.checkedRows.filter(item => {\n            return item.key != currKey\n          })\n        } else {\n          this.checkedRows.push(info.node.dataRef)\n          this.checkedKeys.push(...keys)\n        }\n      }\n    },\n    onExpand(expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    handleSubmit() {\n      if (!this.checkedKeys || this.checkedKeys.length == 0) {\n        this.$emit(\"ok\", '')\n      } else {\n        this.$emit(\"ok\", this.checkedRows, this.checkedKeys.join(\",\"))\n      }\n      this.handleClear()\n\n\n    },\n    handleCancel() {\n      this.handleClear()\n    },\n\n    handleClear() {\n\n\n      this.visible = false\n      this.checkedKeys = []\n    },\n    getParentKey(currKey, treeData) {\n      let parentKey\n      for (let i = 0; i < treeData.length; i++) {\n        const node = treeData[i]\n        if (node.children) {\n          if (node.children.some(item => item.key === currKey)) {\n            parentKey = node.key\n          } else if (this.getParentKey(currKey, node.children)) {\n            parentKey = this.getParentKey(currKey, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    onSearch(value) {\n      const expandedKeys = this.dataList.map((item) => {\n        if (item.title.indexOf(value) > -1) {\n          return this.getParentKey(item.key, this.treeData)\n        }\n        return null\n      }).filter((item, i, self) => item && self.indexOf(item) === i)\n\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true,\n      })\n\n\n    }\n  }\n}\n\n",{"version":3,"sources":["JSelectNoticeDepartModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"JSelectNoticeDepartModal.vue","sourceRoot":"src/components/jeecgbiz/modal","sourcesContent":["<template>\r\n  <a-modal\r\n    title=\"选择部门\"\r\n    :width=\"modalWidth\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"handleSubmit\"\r\n    @cancel=\"handleCancel\"\r\n    cancelText=\"关闭\">\r\n    <div style=\"height: 500px;overflow: auto\">\r\n      <a-spin tip=\"Loading...\" :spinning=\"false\">\r\n        <a-input-search style=\"margin-bottom: 1px\" placeholder=\"请输入部门名称按回车进行搜索\" @search=\"onSearch\"/>\r\n        <a-tree\r\n          checkable\r\n          :treeData=\"treeData\"\r\n          :checkStrictly=\"true\"\r\n          @check=\"onCheck\"\r\n          @select=\"onSelect\"\r\n          @expand=\"onExpand\"\r\n          :autoExpandParent=\"autoExpandParent\"\r\n          :expandedKeys=\"expandedKeys\"\r\n          :checkedKeys=\"checkedKeys\">\r\n\r\n          <template slot=\"title\" slot-scope=\"{title}\">\r\n          <span v-if=\"title.indexOf(searchValue) > -1\">\r\n            {{title.substr(0, title.indexOf(searchValue))}}\r\n            <span style=\"color: #f50\">{{searchValue}}</span>\r\n            {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\r\n          </span>\r\n            <span v-else>{{title}}</span>\r\n          </template>\r\n        </a-tree>\r\n\r\n      </a-spin>\r\n    </div>\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\n  import {queryDepartTreeList} from '@/api/api'\r\n\r\n  export default {\r\n    name: 'JSelectNoticeDepartModal',\r\n    props: ['modalWidth', 'multi', 'rootOpened', 'departId'],\r\n    data() {\r\n      return {\r\n        visible: false,\r\n        confirmLoading: false,\r\n        treeData: [],\r\n        autoExpandParent: true,\r\n        expandedKeys: [],\r\n        dataList: [],\r\n        checkedKeys: [],\r\n        checkedRows: [],\r\n        searchValue: \"\"\r\n      }\r\n    },\r\n    created() {\r\n      this.loadDepart();\r\n    },\r\n    watch: {\r\n      departId() {\r\n        this.initDepartComponent()\r\n      },\r\n      visible: {\r\n        handler() {\r\n          if (this.departId) {\r\n            this.checkedKeys = this.departId.split(\",\");\r\n            // console.log('this.departId', this.departId)\r\n          } else {\r\n            this.checkedKeys = [];\r\n          }\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      show() {\r\n        this.visible = true\r\n        this.checkedRows = []\r\n        this.checkedKeys = []\r\n        console.log(\"this.multi\", this.multi)\r\n      },\r\n      loadDepart() {\r\n        queryDepartTreeList().then(res => {\r\n          if (res.success) {\r\n            let arr = [...res.result]\r\n            this.reWriterWithSlot(arr)\r\n            this.treeData = arr\r\n            this.initDepartComponent()\r\n            if (this.rootOpened) {\r\n              this.initExpandedKeys(res.result)\r\n            }\r\n          }\r\n        })\r\n      },\r\n      initDepartComponent() {\r\n        let names = ''\r\n        if (this.departId) {\r\n          let currDepartId = this.departId\r\n          for (let item of this.dataList) {\r\n            if (currDepartId.indexOf(item.key) >= 0) {\r\n              names += \",\" + item.title\r\n            }\r\n          }\r\n          if (names) {\r\n            names = names.substring(1)\r\n          }\r\n        }\r\n        this.$emit(\"initComp\", names)\r\n      },\r\n      reWriterWithSlot(arr) {\r\n        for (let item of arr) {\r\n          if (item.children && item.children.length > 0) {\r\n            this.reWriterWithSlot(item.children)\r\n            let temp = Object.assign({}, item)\r\n            temp.children = {}\r\n            this.dataList.push(temp)\r\n          } else {\r\n            this.dataList.push(item)\r\n            item.scopedSlots = {title: 'title'}\r\n          }\r\n        }\r\n      },\r\n      initExpandedKeys(arr) {\r\n        if (arr && arr.length > 0) {\r\n          let keys = []\r\n          for (let item of arr) {\r\n            if (item.children && item.children.length > 0) {\r\n              keys.push(item.id)\r\n            }\r\n          }\r\n          this.expandedKeys = [...keys]\r\n        } else {\r\n          this.expandedKeys = []\r\n        }\r\n      },\r\n      onCheck(checkedKeys, info) {\r\n        if (!this.multi) {\r\n          let arr = checkedKeys.checked.filter(item => {\r\n            return this.checkedKeys.indexOf(item) < 0\r\n          })\r\n          this.checkedKeys = [...arr]\r\n          this.checkedRows = [info.node.dataRef]\r\n        } else {\r\n          this.checkedKeys = checkedKeys.checked\r\n          this.checkedRows.push(info.node.dataRef)\r\n        }\r\n        //this.$emit(\"input\",this.checkedKeys.join(\",\"))\r\n        //console.log(this.checkedKeys.join(\",\"))\r\n      },\r\n      onSelect(selectedKeys, info) {\r\n        console.log(selectedKeys)\r\n        let keys = []\r\n        keys.push(selectedKeys[0])\r\n        if (!this.checkedKeys || this.checkedKeys.length == 0 || !this.multi) {\r\n          this.checkedKeys = [...keys]\r\n          this.checkedRows = [info.node.dataRef]\r\n        } else {\r\n          let currKey = info.node.dataRef.key\r\n          if (this.checkedKeys.indexOf(currKey) >= 0) {\r\n            this.checkedKeys = this.checkedKeys.filter(item => {\r\n              return item != currKey\r\n            })\r\n            this.checkedRows = this.checkedRows.filter(item => {\r\n              return item.key != currKey\r\n            })\r\n          } else {\r\n            this.checkedRows.push(info.node.dataRef)\r\n            this.checkedKeys.push(...keys)\r\n          }\r\n        }\r\n      },\r\n      onExpand(expandedKeys) {\r\n        this.expandedKeys = expandedKeys\r\n        this.autoExpandParent = false\r\n      },\r\n      handleSubmit() {\r\n        if (!this.checkedKeys || this.checkedKeys.length == 0) {\r\n          this.$emit(\"ok\", '')\r\n        } else {\r\n          this.$emit(\"ok\", this.checkedRows, this.checkedKeys.join(\",\"))\r\n        }\r\n        this.handleClear()\r\n\r\n\r\n      },\r\n      handleCancel() {\r\n        this.handleClear()\r\n      },\r\n\r\n      handleClear() {\r\n\r\n\r\n        this.visible = false\r\n        this.checkedKeys = []\r\n      },\r\n      getParentKey(currKey, treeData) {\r\n        let parentKey\r\n        for (let i = 0; i < treeData.length; i++) {\r\n          const node = treeData[i]\r\n          if (node.children) {\r\n            if (node.children.some(item => item.key === currKey)) {\r\n              parentKey = node.key\r\n            } else if (this.getParentKey(currKey, node.children)) {\r\n              parentKey = this.getParentKey(currKey, node.children)\r\n            }\r\n          }\r\n        }\r\n        return parentKey\r\n      },\r\n      onSearch(value) {\r\n        const expandedKeys = this.dataList.map((item) => {\r\n          if (item.title.indexOf(value) > -1) {\r\n            return this.getParentKey(item.key, this.treeData)\r\n          }\r\n          return null\r\n        }).filter((item, i, self) => item && self.indexOf(item) === i)\r\n\r\n        Object.assign(this, {\r\n          expandedKeys,\r\n          searchValue: value,\r\n          autoExpandParent: true,\r\n        })\r\n\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}