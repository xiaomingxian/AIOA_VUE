{"remainingRequest":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\dict\\JSearchSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\dict\\JSearchSelectTag.vue","mtime":1568535198000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { ajaxGetDictItems } from '@/api/api'\nimport debounce from 'lodash/debounce';\nimport { getAction } from '../../api/manage'\n\nexport default {\n  name: 'JSearchSelectTag',\n  props:{\n    disabled: Boolean,\n    value: String,\n    dict: String,\n    dictOptions: Array,\n    async: Boolean,\n    placeholder:{\n      type:String,\n      default:\"请选择\",\n      required:false\n    }\n  },\n  data(){\n    this.loadData = debounce(this.loadData, 800);//消抖\n    this.lastLoad = 0;\n    return {\n      loading:false,\n      selectedValue:[],\n      selectedAsyncValue:[],\n      options: [],\n    }\n  },\n  created(){\n    this.initDictData();\n  },\n  watch:{\n    \"value\":{\n      immediate:true,\n      handler(val){\n        if(!val){\n          this.selectedValue=[]\n          this.selectedAsyncValue=[]\n        }else{\n          this.initSelectValue()\n        }\n      }\n    },\n    \"dict\":{\n      handler(){\n        this.initDictData()\n      }\n    }\n  },\n  methods:{\n    initSelectValue(){\n      if(this.async){\n        if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\n          console.log(\"这才请求后台\")\n          getAction(`/sys/dict/loadDictItem/${this.dict}`,{key:this.value}).then(res=>{\n            if(res.success){\n              let obj = {\n                key:this.value,\n                label:res.result\n              }\n              this.selectedAsyncValue = {...obj}\n            }\n          })\n        }\n      }else{\n        this.selectedValue = this.value\n      }\n    },\n    loadData(value){\n      console.log(\"数据加载\",value)\n      this.lastLoad +=1\n      const currentLoad = this.lastLoad\n      this.options = []\n      this.loading=true\n      // 字典code格式：table,text,code\n      getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value}).then(res=>{\n        this.loading=false\n        if(res.success){\n          if(currentLoad!=this.lastLoad){\n            return\n          }\n          this.options = res.result\n          console.log(\"我是第一个\",res)\n        }else{\n          this.$message.warning(res.message)\n        }\n\n      })\n\n    },\n    initDictData(){\n      if(!this.async){\n        //如果字典项集合有数据\n        if(this.dictOptions && this.dictOptions.length>0){\n          this.options = [...this.dictOptions]\n        }else{\n          //根据字典Code, 初始化字典数组\n          ajaxGetDictItems(this.dict, null).then((res) => {\n            if (res.success) {\n              this.options = res.result;\n            }\n          })\n        }\n      }\n    },\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n    handleChange (selectedValue) {\n      console.log(\"selectedValue\",selectedValue)\n      this.selectedValue = selectedValue\n      this.callback()\n    },\n    handleAsyncChange(selectedObj){\n      this.selectedAsyncValue = selectedObj\n      this.selectedValue = selectedObj.key\n      this.callback()\n    },\n    callback(){\n      this.$emit('change', this.selectedValue);\n    },\n    setCurrentDictOptions(dictOptions){\n      this.options = dictOptions\n    },\n    getCurrentDictOptions(){\n      return this.options\n    }\n\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JSearchSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"JSearchSelectTag.vue","sourceRoot":"src/components/dict","sourcesContent":["<template>\r\n\r\n  <a-select\r\n    v-if=\"async\"\r\n    showSearch\r\n    labelInValue\r\n    @search=\"loadData\"\r\n    :placeholder=\"placeholder\"\r\n    v-model=\"selectedAsyncValue\"\r\n    style=\"width: 100%\"\r\n    :filterOption=\"false\"\r\n    @change=\"handleAsyncChange\"\r\n    :notFoundContent=\"loading ? undefined : null\"\r\n  >\r\n    <a-spin v-if=\"loading\" slot=\"notFoundContent\" size=\"small\"/>\r\n    <a-select-option v-for=\"d in options\" :key=\"d.value\" :value=\"d.value\">{{ d.text }}</a-select-option>\r\n  </a-select>\r\n\r\n  <a-select\r\n    v-else\r\n    showSearch\r\n    :placeholder=\"placeholder\"\r\n    optionFilterProp=\"children\"\r\n    style=\"width: 100%\"\r\n    @change=\"handleChange\"\r\n    :filterOption=\"filterOption\"\r\n    v-model=\"selectedValue\"\r\n    :notFoundContent=\"loading ? undefined : null\">\r\n    <a-spin v-if=\"loading\" slot=\"notFoundContent\" size=\"small\"/>\r\n    <a-select-option v-for=\"d in options\" :key=\"d.value\" :value=\"d.value\">{{ d.text }}</a-select-option>\r\n  </a-select>\r\n\r\n</template>\r\n\r\n<script>\r\n  import { ajaxGetDictItems } from '@/api/api'\r\n  import debounce from 'lodash/debounce';\r\n  import { getAction } from '../../api/manage'\r\n\r\n  export default {\r\n    name: 'JSearchSelectTag',\r\n    props:{\r\n      disabled: Boolean,\r\n      value: String,\r\n      dict: String,\r\n      dictOptions: Array,\r\n      async: Boolean,\r\n      placeholder:{\r\n        type:String,\r\n        default:\"请选择\",\r\n        required:false\r\n      }\r\n    },\r\n    data(){\r\n      this.loadData = debounce(this.loadData, 800);//消抖\r\n      this.lastLoad = 0;\r\n      return {\r\n        loading:false,\r\n        selectedValue:[],\r\n        selectedAsyncValue:[],\r\n        options: [],\r\n      }\r\n    },\r\n    created(){\r\n      this.initDictData();\r\n    },\r\n    watch:{\r\n      \"value\":{\r\n        immediate:true,\r\n        handler(val){\r\n          if(!val){\r\n            this.selectedValue=[]\r\n            this.selectedAsyncValue=[]\r\n          }else{\r\n            this.initSelectValue()\r\n          }\r\n        }\r\n      },\r\n      \"dict\":{\r\n        handler(){\r\n          this.initDictData()\r\n        }\r\n      }\r\n    },\r\n    methods:{\r\n      initSelectValue(){\r\n        if(this.async){\r\n          if(!this.selectedAsyncValue || !this.selectedAsyncValue.key || this.selectedAsyncValue.key!=this.value){\r\n            console.log(\"这才请求后台\")\r\n            getAction(`/sys/dict/loadDictItem/${this.dict}`,{key:this.value}).then(res=>{\r\n              if(res.success){\r\n                let obj = {\r\n                  key:this.value,\r\n                  label:res.result\r\n                }\r\n                this.selectedAsyncValue = {...obj}\r\n              }\r\n            })\r\n          }\r\n        }else{\r\n          this.selectedValue = this.value\r\n        }\r\n      },\r\n      loadData(value){\r\n        console.log(\"数据加载\",value)\r\n        this.lastLoad +=1\r\n        const currentLoad = this.lastLoad\r\n        this.options = []\r\n        this.loading=true\r\n        // 字典code格式：table,text,code\r\n        getAction(`/sys/dict/loadDict/${this.dict}`,{keyword:value}).then(res=>{\r\n          this.loading=false\r\n          if(res.success){\r\n            if(currentLoad!=this.lastLoad){\r\n              return\r\n            }\r\n            this.options = res.result\r\n            console.log(\"我是第一个\",res)\r\n          }else{\r\n            this.$message.warning(res.message)\r\n          }\r\n\r\n        })\r\n\r\n      },\r\n      initDictData(){\r\n        if(!this.async){\r\n          //如果字典项集合有数据\r\n          if(this.dictOptions && this.dictOptions.length>0){\r\n            this.options = [...this.dictOptions]\r\n          }else{\r\n            //根据字典Code, 初始化字典数组\r\n            ajaxGetDictItems(this.dict, null).then((res) => {\r\n              if (res.success) {\r\n                this.options = res.result;\r\n              }\r\n            })\r\n          }\r\n        }\r\n      },\r\n      filterOption(input, option) {\r\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n      },\r\n      handleChange (selectedValue) {\r\n        console.log(\"selectedValue\",selectedValue)\r\n        this.selectedValue = selectedValue\r\n        this.callback()\r\n      },\r\n      handleAsyncChange(selectedObj){\r\n        this.selectedAsyncValue = selectedObj\r\n        this.selectedValue = selectedObj.key\r\n        this.callback()\r\n      },\r\n      callback(){\r\n        this.$emit('change', this.selectedValue);\r\n      },\r\n      setCurrentDictOptions(dictOptions){\r\n        this.options = dictOptions\r\n      },\r\n      getCurrentDictOptions(){\r\n        return this.options\r\n      }\r\n\r\n    },\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}