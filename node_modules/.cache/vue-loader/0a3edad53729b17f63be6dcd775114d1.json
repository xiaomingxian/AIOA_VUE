{"remainingRequest":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeSelect.vue","mtime":1568535203949},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858740},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696677}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/*\n* 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\n* <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\n* */\nimport { getAction } from '@/api/manage'\n\nexport default {\n  name: 'JTreeSelect',\n  props: {\n    value:{\n      type: String,\n      required: false\n    },\n    placeholder:{\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    dict:{\n      type: String,\n      default: '',\n      required: false\n    },\n    pidField:{\n      type: String,\n      default: 'pid',\n      required: false\n    },\n    pidValue:{\n      type: String,\n      default: '0',\n      required: false\n    },\n    disabled:{\n      type:Boolean,\n      default:false,\n      required:false\n    },\n    hasChildField:{\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data () {\n    return {\n      treeValue:\"\",\n      treeData:[],\n      url:\"/sys/dict/loadTreeData\",\n      view:'/sys/dict/loadDictItem/',\n      tableName:\"\",\n      text:\"\",\n      code:\"\",\n\n    }\n  },\n  watch: {\n    value () {\n      this.loadItemByCode()\n    },\n    dict(){\n      this.initDictInfo()\n      this.loadRoot();\n    }\n  },\n  created(){\n    this.initDictInfo()\n    this.loadRoot()\n    this.loadItemByCode()\n  },\n  methods: {\n    loadItemByCode(){\n      if(!this.value || this.value==\"0\"){\n        this.treeValue = \"\"\n      }else{\n        getAction(`${this.view}${this.dict}`,{key:this.value}).then(res=>{\n          if(res.success){\n            this.treeValue = {\n              key:this.value,\n              value:this.value,\n              label:res.result\n            }\n          }\n        })\n      }\n    },\n    initDictInfo(){\n      let arr = this.dict.split(\",\")\n      this.tableName = arr[0]\n      this.text = arr[1]\n      this.code = arr[2]\n    },\n    asyncLoadTreeData (treeNode) {\n      return new Promise((resolve) => {\n        if (treeNode.$vnode.children) {\n          resolve()\n          return\n        }\n        let pid = treeNode.$vnode.key\n        let param = {\n          pid:pid,\n          tableName:this.tableName,\n          text:this.text,\n          code:this.code,\n          pidField:this.pidField,\n          hasChildField:this.hasChildField\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.addChildren(pid,res.result,this.treeData)\n            this.treeData = [...this.treeData]\n          }\n          resolve()\n        })\n      })\n    },\n    addChildren(pid,children,treeArray){\n      if(treeArray && treeArray.length>0){\n        for(let item of treeArray){\n          if(item.key == pid){\n            if(!children || children.length==0){\n              item.isLeaf=true\n            }else{\n              item.children = children\n            }\n            break\n          }else{\n            this.addChildren(pid,children,item.children)\n          }\n        }\n      }\n    },\n    loadRoot(){\n      let param = {\n        pid:this.pidValue,\n        tableName:this.tableName,\n        text:this.text,\n        code:this.code,\n        pidField:this.pidField,\n        hasChildField:this.hasChildField\n      }\n      getAction(this.url,param).then(res=>{\n        if(res.success && res.result){\n          for(let i of res.result){\n            i.value = i.key\n            if(i.leaf==false){\n              i.isLeaf=false\n            }else if(i.leaf==true){\n              i.isLeaf=true\n            }\n          }\n          this.treeData = [...res.result]\n        }else{\n          console.log(\"数根节点查询结果-else\",res)\n        }\n      })\n    },\n    onChange(value){\n      if(!value){\n        this.$emit('change', '');\n        this.treeValue = ''\n      }else{\n        this.$emit('change', value.value);\n        this.treeValue = value\n      }\n\n    },\n    onSearch(value){\n      console.log(value)\n    },\n    getCurrTreeData(){\n      return this.treeData\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JTreeSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"JTreeSelect.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <a-tree-select\r\n    allowClear\r\n    labelInValue\r\n    style=\"width: 100%\"\r\n    :disabled=\"disabled\"\r\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\r\n    :placeholder=\"placeholder\"\r\n    :loadData=\"asyncLoadTreeData\"\r\n    :value=\"treeValue\"\r\n    :treeData=\"treeData\"\r\n    @change=\"onChange\"\r\n    @search=\"onSearch\">\r\n  </a-tree-select>\r\n</template>\r\n<script>\r\n\r\n  /*\r\n  * 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\r\n  * <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\r\n  * */\r\n  import { getAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'JTreeSelect',\r\n    props: {\r\n      value:{\r\n        type: String,\r\n        required: false\r\n      },\r\n      placeholder:{\r\n        type: String,\r\n        default: '请选择',\r\n        required: false\r\n      },\r\n      dict:{\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      pidField:{\r\n        type: String,\r\n        default: 'pid',\r\n        required: false\r\n      },\r\n      pidValue:{\r\n        type: String,\r\n        default: '0',\r\n        required: false\r\n      },\r\n      disabled:{\r\n        type:Boolean,\r\n        default:false,\r\n        required:false\r\n      },\r\n      hasChildField:{\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        treeValue:\"\",\r\n        treeData:[],\r\n        url:\"/sys/dict/loadTreeData\",\r\n        view:'/sys/dict/loadDictItem/',\r\n        tableName:\"\",\r\n        text:\"\",\r\n        code:\"\",\r\n\r\n      }\r\n    },\r\n    watch: {\r\n      value () {\r\n        this.loadItemByCode()\r\n      },\r\n      dict(){\r\n        this.initDictInfo()\r\n        this.loadRoot();\r\n      }\r\n    },\r\n    created(){\r\n      this.initDictInfo()\r\n      this.loadRoot()\r\n      this.loadItemByCode()\r\n    },\r\n    methods: {\r\n      loadItemByCode(){\r\n        if(!this.value || this.value==\"0\"){\r\n          this.treeValue = \"\"\r\n        }else{\r\n          getAction(`${this.view}${this.dict}`,{key:this.value}).then(res=>{\r\n            if(res.success){\r\n              this.treeValue = {\r\n                key:this.value,\r\n                value:this.value,\r\n                label:res.result\r\n              }\r\n            }\r\n          })\r\n        }\r\n      },\r\n      initDictInfo(){\r\n        let arr = this.dict.split(\",\")\r\n        this.tableName = arr[0]\r\n        this.text = arr[1]\r\n        this.code = arr[2]\r\n      },\r\n      asyncLoadTreeData (treeNode) {\r\n        return new Promise((resolve) => {\r\n          if (treeNode.$vnode.children) {\r\n            resolve()\r\n            return\r\n          }\r\n          let pid = treeNode.$vnode.key\r\n          let param = {\r\n            pid:pid,\r\n            tableName:this.tableName,\r\n            text:this.text,\r\n            code:this.code,\r\n            pidField:this.pidField,\r\n            hasChildField:this.hasChildField\r\n          }\r\n          getAction(this.url,param).then(res=>{\r\n            if(res.success){\r\n              for(let i of res.result){\r\n                i.value = i.key\r\n                if(i.leaf==false){\r\n                  i.isLeaf=false\r\n                }else if(i.leaf==true){\r\n                  i.isLeaf=true\r\n                }\r\n              }\r\n              this.addChildren(pid,res.result,this.treeData)\r\n              this.treeData = [...this.treeData]\r\n            }\r\n            resolve()\r\n          })\r\n        })\r\n      },\r\n      addChildren(pid,children,treeArray){\r\n        if(treeArray && treeArray.length>0){\r\n          for(let item of treeArray){\r\n            if(item.key == pid){\r\n              if(!children || children.length==0){\r\n                item.isLeaf=true\r\n              }else{\r\n                item.children = children\r\n              }\r\n              break\r\n            }else{\r\n              this.addChildren(pid,children,item.children)\r\n            }\r\n          }\r\n        }\r\n      },\r\n      loadRoot(){\r\n        let param = {\r\n          pid:this.pidValue,\r\n          tableName:this.tableName,\r\n          text:this.text,\r\n          code:this.code,\r\n          pidField:this.pidField,\r\n          hasChildField:this.hasChildField\r\n        }\r\n        getAction(this.url,param).then(res=>{\r\n          if(res.success && res.result){\r\n            for(let i of res.result){\r\n              i.value = i.key\r\n              if(i.leaf==false){\r\n                i.isLeaf=false\r\n              }else if(i.leaf==true){\r\n                i.isLeaf=true\r\n              }\r\n            }\r\n            this.treeData = [...res.result]\r\n          }else{\r\n            console.log(\"数根节点查询结果-else\",res)\r\n          }\r\n        })\r\n      },\r\n      onChange(value){\r\n        if(!value){\r\n          this.$emit('change', '');\r\n          this.treeValue = ''\r\n        }else{\r\n          this.$emit('change', value.value);\r\n          this.treeValue = value\r\n        }\r\n\r\n      },\r\n      onSearch(value){\r\n        console.log(value)\r\n      },\r\n      getCurrTreeData(){\r\n        return this.treeData\r\n      }\r\n    },\r\n    //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    }\r\n  }\r\n</script>\r\n"]}]}