{"remainingRequest":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\Ellipsis\\Ellipsis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\Ellipsis\\Ellipsis.vue","mtime":1568535199000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696000}],"contextDependencies":[],"result":["\n  import Tooltip from 'ant-design-vue/es/tooltip'\n  import { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil'\n/*\n  const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n  const TooltipOverlayStyle = {\n    overflowWrap: 'break-word',\n    wordWrap: 'break-word',\n  };\n*/\n\n  export default {\n    name: 'Ellipsis',\n    components: {\n      Tooltip\n    },\n    props: {\n      prefixCls: {\n        type: String,\n        default: 'ant-pro-ellipsis'\n      },\n      tooltip: {\n        type: Boolean\n      },\n      length: {\n        type: Number,\n        required: true\n      },\n      lines: {\n        type: Number,\n        default: 1\n      },\n      fullWidthRecognition: {\n        type: Boolean,\n        default: false\n      }\n    },\n    methods: {\n      getStrDom (str) {\n        return (\n          <span>{ cutStrByFullLength(str, this.length) + '...' }</span>\n        )\n      },\n      getTooltip ( fullStr) {\n        return (\n          <Tooltip>\n            <template slot=\"title\">{ fullStr }</template>\n            { this.getStrDom(fullStr) }\n          </Tooltip>\n        )\n      }\n    },\n    render () {\n      const { tooltip, length } = this.$props\n      let str = this.$slots.default.map(vNode => vNode.text).join(\"\")\n      const strDom = tooltip && getStrFullLength(str) > length ? this.getTooltip(str) : this.getStrDom(str);\n      return (\n        strDom\n      )\n    }\n  }\n",{"version":3,"sources":["Ellipsis.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Ellipsis.vue","sourceRoot":"src/components/Ellipsis","sourcesContent":["<script>\r\n  import Tooltip from 'ant-design-vue/es/tooltip'\r\n  import { cutStrByFullLength, getStrFullLength } from '@/components/_util/StringUtil'\r\n/*\r\n  const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\r\n\r\n  const TooltipOverlayStyle = {\r\n    overflowWrap: 'break-word',\r\n    wordWrap: 'break-word',\r\n  };\r\n*/\r\n\r\n  export default {\r\n    name: 'Ellipsis',\r\n    components: {\r\n      Tooltip\r\n    },\r\n    props: {\r\n      prefixCls: {\r\n        type: String,\r\n        default: 'ant-pro-ellipsis'\r\n      },\r\n      tooltip: {\r\n        type: Boolean\r\n      },\r\n      length: {\r\n        type: Number,\r\n        required: true\r\n      },\r\n      lines: {\r\n        type: Number,\r\n        default: 1\r\n      },\r\n      fullWidthRecognition: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    methods: {\r\n      getStrDom (str) {\r\n        return (\r\n          <span>{ cutStrByFullLength(str, this.length) + '...' }</span>\r\n        )\r\n      },\r\n      getTooltip ( fullStr) {\r\n        return (\r\n          <Tooltip>\r\n            <template slot=\"title\">{ fullStr }</template>\r\n            { this.getStrDom(fullStr) }\r\n          </Tooltip>\r\n        )\r\n      }\r\n    },\r\n    render () {\r\n      const { tooltip, length } = this.$props\r\n      let str = this.$slots.default.map(vNode => vNode.text).join(\"\")\r\n      const strDom = tooltip && getStrFullLength(str) > length ? this.getTooltip(str) : this.getStrDom(str);\r\n      return (\r\n        strDom\r\n      )\r\n    }\r\n  }\r\n</script>"]}]}