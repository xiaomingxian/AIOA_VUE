{"remainingRequest":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeDict.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeDict.vue","mtime":1568535203000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@/api/manage'\n\nexport default {\n  name: 'JTreeDict',\n  data(){\n    return {\n      treeData:[],\n      treeValue:\"\",\n      url_root:\"/sys/category/loadTreeRoot\",\n      url_children:\"/sys/category/loadTreeChildren\",\n      url_view:'/sys/category/loadOne',\n    }\n  },\n  props:{\n    value:{\n      type: String,\n      required: false\n    },\n    placeholder:{\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    parentCode:{\n      type: String,\n      default: '',\n      required: false\n    },\n    field:{\n      type: String,\n      default: 'id',\n      required: false\n    },\n    root:{\n      type:Object,\n      required:false,\n      default:()=>{\n        return {\n          pid:'0'\n        }\n      }\n    },\n    async:{\n      type:Boolean,\n      default:false,\n      required:false\n    },\n    disabled:{\n      type:Boolean,\n      default:false,\n      required:false\n    }\n  },\n  watch:{\n    root:{\n      handler(val){\n        console.log(\"root-change\",val)\n      },\n      deep:true\n    },\n    parentCode:{\n      handler(){\n        this.loadRoot()\n      }\n    },\n    value:{\n      handler(){\n        this.loadViewInfo()\n      }\n    }\n  },\n  created(){\n    this.loadRoot()\n    this.loadViewInfo()\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  methods:{\n    loadViewInfo(){\n      if(!this.value || this.value==\"0\"){\n        this.treeValue = \"\"\n      }else{\n        let param = {\n          field:this.field,\n          val:this.value\n        }\n        getAction(this.url_view,param).then(res=>{\n          if(res.success){\n            this.treeValue = {\n              value:this.value,\n              label:res.result.name\n            }\n          }\n        })\n      }\n    },\n    loadRoot(){\n      let param = {\n        async:this.async,\n        pcode:this.parentCode\n      }\n      getAction(this.url_root,param).then(res=>{\n        if(res.success){\n          this.handleTreeNodeValue(res.result)\n          console.log(\"aaaa\",res.result)\n          this.treeData = [...res.result]\n        }else{\n          this.$message.error(res.message)\n        }\n      })\n    },\n    asyncLoadTreeData (treeNode) {\n      return new Promise((resolve) => {\n        if(!this.async){\n          resolve()\n          return\n        }\n        if (treeNode.$vnode.children) {\n          resolve()\n          return\n        }\n        let pid = treeNode.$vnode.key\n        let param = {\n          pid:pid\n        }\n        getAction(this.url_children,param).then(res=>{\n          if(res.success){\n            this.handleTreeNodeValue(res.result)\n            this.addChildren(pid,res.result,this.treeData)\n            this.treeData = [...this.treeData]\n          }\n          resolve()\n        })\n      })\n    },\n    addChildren(pid,children,treeArray){\n      if(treeArray && treeArray.length>0){\n        for(let item of treeArray){\n          if(item.key == pid){\n            if(!children || children.length==0){\n              item.leaf = true\n            }else{\n              item.children = children\n            }\n            break\n          }else{\n            this.addChildren(pid,children,item.children)\n          }\n        }\n      }\n    },\n    handleTreeNodeValue(result){\n      let storeField = this.field=='code'?'code':'key'\n      for(let i of result){\n        i.value = i[storeField]\n        i.isLeaf = (!i.leaf)?false:true\n        if(i.children && i.children.length>0){\n          this.handleTreeNodeValue(i.children)\n        }\n      }\n    },\n    onChange(value){\n      console.log(value)\n      this.$emit('change', value.value);\n      this.treeValue = value\n    },\n    onSearch(value){\n      console.log(value)\n    },\n    getCurrTreeData(){\n      return this.treeData\n    }\n  }\n\n}\n",{"version":3,"sources":["JTreeDict.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"JTreeDict.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <a-tree-select\r\n    allowClear\r\n    labelInValue\r\n    style=\"width: 100%\"\r\n    :disabled=\"disabled\"\r\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\r\n    :placeholder=\"placeholder\"\r\n    :loadData=\"asyncLoadTreeData\"\r\n    :value=\"treeValue\"\r\n    :treeData=\"treeData\"\r\n    @change=\"onChange\"\r\n    @search=\"onSearch\">\r\n  </a-tree-select>\r\n</template>\r\n\r\n<script>\r\n  import { getAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'JTreeDict',\r\n    data(){\r\n      return {\r\n        treeData:[],\r\n        treeValue:\"\",\r\n        url_root:\"/sys/category/loadTreeRoot\",\r\n        url_children:\"/sys/category/loadTreeChildren\",\r\n        url_view:'/sys/category/loadOne',\r\n      }\r\n    },\r\n    props:{\r\n      value:{\r\n        type: String,\r\n        required: false\r\n      },\r\n      placeholder:{\r\n        type: String,\r\n        default: '请选择',\r\n        required: false\r\n      },\r\n      parentCode:{\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      field:{\r\n        type: String,\r\n        default: 'id',\r\n        required: false\r\n      },\r\n      root:{\r\n        type:Object,\r\n        required:false,\r\n        default:()=>{\r\n          return {\r\n            pid:'0'\r\n          }\r\n        }\r\n      },\r\n      async:{\r\n        type:Boolean,\r\n        default:false,\r\n        required:false\r\n      },\r\n      disabled:{\r\n        type:Boolean,\r\n        default:false,\r\n        required:false\r\n      }\r\n    },\r\n    watch:{\r\n      root:{\r\n        handler(val){\r\n          console.log(\"root-change\",val)\r\n        },\r\n        deep:true\r\n      },\r\n      parentCode:{\r\n        handler(){\r\n          this.loadRoot()\r\n        }\r\n      },\r\n      value:{\r\n        handler(){\r\n          this.loadViewInfo()\r\n        }\r\n      }\r\n    },\r\n    created(){\r\n      this.loadRoot()\r\n      this.loadViewInfo()\r\n    },\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    },\r\n    methods:{\r\n      loadViewInfo(){\r\n        if(!this.value || this.value==\"0\"){\r\n          this.treeValue = \"\"\r\n        }else{\r\n          let param = {\r\n            field:this.field,\r\n            val:this.value\r\n          }\r\n          getAction(this.url_view,param).then(res=>{\r\n            if(res.success){\r\n              this.treeValue = {\r\n                value:this.value,\r\n                label:res.result.name\r\n              }\r\n            }\r\n          })\r\n        }\r\n      },\r\n      loadRoot(){\r\n        let param = {\r\n          async:this.async,\r\n          pcode:this.parentCode\r\n        }\r\n        getAction(this.url_root,param).then(res=>{\r\n          if(res.success){\r\n            this.handleTreeNodeValue(res.result)\r\n            console.log(\"aaaa\",res.result)\r\n            this.treeData = [...res.result]\r\n          }else{\r\n            this.$message.error(res.message)\r\n          }\r\n        })\r\n      },\r\n      asyncLoadTreeData (treeNode) {\r\n        return new Promise((resolve) => {\r\n          if(!this.async){\r\n            resolve()\r\n            return\r\n          }\r\n          if (treeNode.$vnode.children) {\r\n            resolve()\r\n            return\r\n          }\r\n          let pid = treeNode.$vnode.key\r\n          let param = {\r\n            pid:pid\r\n          }\r\n          getAction(this.url_children,param).then(res=>{\r\n            if(res.success){\r\n              this.handleTreeNodeValue(res.result)\r\n              this.addChildren(pid,res.result,this.treeData)\r\n              this.treeData = [...this.treeData]\r\n            }\r\n            resolve()\r\n          })\r\n        })\r\n      },\r\n      addChildren(pid,children,treeArray){\r\n        if(treeArray && treeArray.length>0){\r\n          for(let item of treeArray){\r\n            if(item.key == pid){\r\n              if(!children || children.length==0){\r\n                item.leaf = true\r\n              }else{\r\n                item.children = children\r\n              }\r\n              break\r\n            }else{\r\n              this.addChildren(pid,children,item.children)\r\n            }\r\n          }\r\n        }\r\n      },\r\n      handleTreeNodeValue(result){\r\n        let storeField = this.field=='code'?'code':'key'\r\n        for(let i of result){\r\n          i.value = i[storeField]\r\n          i.isLeaf = (!i.leaf)?false:true\r\n          if(i.children && i.children.length>0){\r\n            this.handleTreeNodeValue(i.children)\r\n          }\r\n        }\r\n      },\r\n      onChange(value){\r\n        console.log(value)\r\n        this.$emit('change', value.value);\r\n        this.treeValue = value\r\n      },\r\n      onSearch(value){\r\n        console.log(value)\r\n      },\r\n      getCurrTreeData(){\r\n        return this.treeData\r\n      }\r\n    }\r\n\r\n  }\r\n</script>"]}]}