{"remainingRequest":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeSelect.vue","mtime":1568535203000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"D:\\\\project\\\\workspaceideaIU\\\\jeecg-boot\\\\ant-design-vue-jeecg\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\n* <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\n* */\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeSelect',\n  props: {\n    value: {\n      type: String,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    dict: {\n      type: String,\n      default: '',\n      required: false\n    },\n    pidField: {\n      type: String,\n      default: 'pid',\n      required: false\n    },\n    pidValue: {\n      type: String,\n      default: '0',\n      required: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    hasChildField: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      treeValue: \"\",\n      treeData: [],\n      url: \"/sys/dict/loadTreeData\",\n      view: '/sys/dict/loadDictItem/',\n      tableName: \"\",\n      text: \"\",\n      code: \"\"\n    };\n  },\n  watch: {\n    value: function value() {\n      this.loadItemByCode();\n    },\n    dict: function dict() {\n      this.initDictInfo();\n      this.loadRoot();\n    }\n  },\n  created: function created() {\n    this.initDictInfo();\n    this.loadRoot();\n    this.loadItemByCode();\n  },\n  methods: {\n    loadItemByCode: function loadItemByCode() {\n      var _this = this;\n\n      if (!this.value || this.value == \"0\") {\n        this.treeValue = \"\";\n      } else {\n        getAction(\"\".concat(this.view).concat(this.dict), {\n          key: this.value\n        }).then(function (res) {\n          if (res.success) {\n            _this.treeValue = {\n              key: _this.value,\n              value: _this.value,\n              label: res.result\n            };\n          }\n        });\n      }\n    },\n    initDictInfo: function initDictInfo() {\n      var arr = this.dict.split(\",\");\n      this.tableName = arr[0];\n      this.text = arr[1];\n      this.code = arr[2];\n    },\n    asyncLoadTreeData: function asyncLoadTreeData(treeNode) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        if (treeNode.$vnode.children) {\n          resolve();\n          return;\n        }\n\n        var pid = treeNode.$vnode.key;\n        var param = {\n          pid: pid,\n          tableName: _this2.tableName,\n          text: _this2.text,\n          code: _this2.code,\n          pidField: _this2.pidField,\n          hasChildField: _this2.hasChildField\n        };\n        getAction(_this2.url, param).then(function (res) {\n          if (res.success) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = res.result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var i = _step.value;\n                i.value = i.key;\n\n                if (i.leaf == false) {\n                  i.isLeaf = false;\n                } else if (i.leaf == true) {\n                  i.isLeaf = true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            _this2.addChildren(pid, res.result, _this2.treeData);\n\n            _this2.treeData = _toConsumableArray(_this2.treeData);\n          }\n\n          resolve();\n        });\n      });\n    },\n    addChildren: function addChildren(pid, children, treeArray) {\n      if (treeArray && treeArray.length > 0) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = treeArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n\n            if (item.key == pid) {\n              if (!children || children.length == 0) {\n                item.isLeaf = true;\n              } else {\n                item.children = children;\n              }\n\n              break;\n            } else {\n              this.addChildren(pid, children, item.children);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    },\n    loadRoot: function loadRoot() {\n      var _this3 = this;\n\n      var param = {\n        pid: this.pidValue,\n        tableName: this.tableName,\n        text: this.text,\n        code: this.code,\n        pidField: this.pidField,\n        hasChildField: this.hasChildField\n      };\n      getAction(this.url, param).then(function (res) {\n        if (res.success && res.result) {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = res.result[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var i = _step3.value;\n              i.value = i.key;\n\n              if (i.leaf == false) {\n                i.isLeaf = false;\n              } else if (i.leaf == true) {\n                i.isLeaf = true;\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          _this3.treeData = _toConsumableArray(res.result);\n        } else {\n          console.log(\"数根节点查询结果-else\", res);\n        }\n      });\n    },\n    onChange: function onChange(value) {\n      if (!value) {\n        this.$emit('change', '');\n        this.treeValue = '';\n      } else {\n        this.$emit('change', value.value);\n        this.treeValue = value;\n      }\n    },\n    onSearch: function onSearch(value) {\n      console.log(value);\n    },\n    getCurrTreeData: function getCurrTreeData() {\n      return this.treeData;\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",{"version":3,"sources":["JTreeSelect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <a-tree-select\r\n    allowClear\r\n    labelInValue\r\n    style=\"width: 100%\"\r\n    :disabled=\"disabled\"\r\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\r\n    :placeholder=\"placeholder\"\r\n    :loadData=\"asyncLoadTreeData\"\r\n    :value=\"treeValue\"\r\n    :treeData=\"treeData\"\r\n    @change=\"onChange\"\r\n    @search=\"onSearch\">\r\n  </a-tree-select>\r\n</template>\r\n<script>\r\n\r\n  /*\r\n  * 异步树加载组件 通过传入表名 显示字段 存储字段 加载一个树控件\r\n  * <j-tree-select dict=\"aa_tree_test,aad,id\" pid-field=\"pid\" ></j-tree-select>\r\n  * */\r\n  import { getAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'JTreeSelect',\r\n    props: {\r\n      value:{\r\n        type: String,\r\n        required: false\r\n      },\r\n      placeholder:{\r\n        type: String,\r\n        default: '请选择',\r\n        required: false\r\n      },\r\n      dict:{\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      },\r\n      pidField:{\r\n        type: String,\r\n        default: 'pid',\r\n        required: false\r\n      },\r\n      pidValue:{\r\n        type: String,\r\n        default: '0',\r\n        required: false\r\n      },\r\n      disabled:{\r\n        type:Boolean,\r\n        default:false,\r\n        required:false\r\n      },\r\n      hasChildField:{\r\n        type: String,\r\n        default: '',\r\n        required: false\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        treeValue:\"\",\r\n        treeData:[],\r\n        url:\"/sys/dict/loadTreeData\",\r\n        view:'/sys/dict/loadDictItem/',\r\n        tableName:\"\",\r\n        text:\"\",\r\n        code:\"\",\r\n\r\n      }\r\n    },\r\n    watch: {\r\n      value () {\r\n        this.loadItemByCode()\r\n      },\r\n      dict(){\r\n        this.initDictInfo()\r\n        this.loadRoot();\r\n      }\r\n    },\r\n    created(){\r\n      this.initDictInfo()\r\n      this.loadRoot()\r\n      this.loadItemByCode()\r\n    },\r\n    methods: {\r\n      loadItemByCode(){\r\n        if(!this.value || this.value==\"0\"){\r\n          this.treeValue = \"\"\r\n        }else{\r\n          getAction(`${this.view}${this.dict}`,{key:this.value}).then(res=>{\r\n            if(res.success){\r\n              this.treeValue = {\r\n                key:this.value,\r\n                value:this.value,\r\n                label:res.result\r\n              }\r\n            }\r\n          })\r\n        }\r\n      },\r\n      initDictInfo(){\r\n        let arr = this.dict.split(\",\")\r\n        this.tableName = arr[0]\r\n        this.text = arr[1]\r\n        this.code = arr[2]\r\n      },\r\n      asyncLoadTreeData (treeNode) {\r\n        return new Promise((resolve) => {\r\n          if (treeNode.$vnode.children) {\r\n            resolve()\r\n            return\r\n          }\r\n          let pid = treeNode.$vnode.key\r\n          let param = {\r\n            pid:pid,\r\n            tableName:this.tableName,\r\n            text:this.text,\r\n            code:this.code,\r\n            pidField:this.pidField,\r\n            hasChildField:this.hasChildField\r\n          }\r\n          getAction(this.url,param).then(res=>{\r\n            if(res.success){\r\n              for(let i of res.result){\r\n                i.value = i.key\r\n                if(i.leaf==false){\r\n                  i.isLeaf=false\r\n                }else if(i.leaf==true){\r\n                  i.isLeaf=true\r\n                }\r\n              }\r\n              this.addChildren(pid,res.result,this.treeData)\r\n              this.treeData = [...this.treeData]\r\n            }\r\n            resolve()\r\n          })\r\n        })\r\n      },\r\n      addChildren(pid,children,treeArray){\r\n        if(treeArray && treeArray.length>0){\r\n          for(let item of treeArray){\r\n            if(item.key == pid){\r\n              if(!children || children.length==0){\r\n                item.isLeaf=true\r\n              }else{\r\n                item.children = children\r\n              }\r\n              break\r\n            }else{\r\n              this.addChildren(pid,children,item.children)\r\n            }\r\n          }\r\n        }\r\n      },\r\n      loadRoot(){\r\n        let param = {\r\n          pid:this.pidValue,\r\n          tableName:this.tableName,\r\n          text:this.text,\r\n          code:this.code,\r\n          pidField:this.pidField,\r\n          hasChildField:this.hasChildField\r\n        }\r\n        getAction(this.url,param).then(res=>{\r\n          if(res.success && res.result){\r\n            for(let i of res.result){\r\n              i.value = i.key\r\n              if(i.leaf==false){\r\n                i.isLeaf=false\r\n              }else if(i.leaf==true){\r\n                i.isLeaf=true\r\n              }\r\n            }\r\n            this.treeData = [...res.result]\r\n          }else{\r\n            console.log(\"数根节点查询结果-else\",res)\r\n          }\r\n        })\r\n      },\r\n      onChange(value){\r\n        if(!value){\r\n          this.$emit('change', '');\r\n          this.treeValue = ''\r\n        }else{\r\n          this.$emit('change', value.value);\r\n          this.treeValue = value\r\n        }\r\n\r\n      },\r\n      onSearch(value){\r\n        console.log(value)\r\n      },\r\n      getCurrTreeData(){\r\n        return this.treeData\r\n      }\r\n    },\r\n    //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    }\r\n  }\r\n</script>\r\n"],"sourceRoot":"src/components/jeecg"}]}