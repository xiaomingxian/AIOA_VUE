{"remainingRequest":"C:\\xxm\\work\\jd\\fore\\node_modules\\babel-loader\\lib\\index.js!C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xxm\\work\\jd\\fore\\src\\views\\mytask\\modules\\AddUsersModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xxm\\work\\jd\\fore\\src\\views\\mytask\\modules\\AddUsersModal.vue","mtime":1579678337411},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\babel-loader\\lib\\index.js","mtime":1570779245522},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1570779194464},{"path":"C:\\xxm\\work\\jd\\fore\\node_modules\\vue-loader\\lib\\index.js","mtime":1570779225726}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction, postAction } from \"../../../api/manage\";\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport DictItemList from \"../../system/DictItemList\";\nexport default {\n  name: \"nextUsers\",\n  mixins: [JeecgListMixin],\n  components: {\n    DictItemList: DictItemList\n  },\n  data: function data() {\n    return {\n      scrHeight: window.innerHeight - 300 + 'px',\n      title: '追加用户',\n      okText: '确定',\n      //控制组件数据可见\n      isMul: false,\n      //下一任务是单选/多选\n      isDept: false,\n      endType: false,\n      //是否是结束节点\n      nextsActs: [],\n      endTime: '',\n      //穿梭框数据\n      mockData: [],\n      //部门信息\n      deptsList: [],\n      //部门选择集合\n      departSelect: {},\n      //部门对应用户id\n      departUsersId: {},\n      departUsersMsg: {},\n      //环节分类，从属于 排他，并行，包容网关\n      gateWayTypeSelect: {\n        parallel: {},\n        inclusive: {},\n        normal: {} //有的话只会存在一个\n\n      },\n      typeCount: {\n        normal: [],\n        inclusive: [],\n        parallel: []\n      },\n      preCilck: null,\n      //当前点击的节点\n      currentClick: null,\n      timeCheck: false,\n      //是否限制时间\n      columns: [{\n        title: '用户姓名',\n        align: \"center\",\n        dataIndex: 'uname'\n      }, {\n        title: '所在部门',\n        align: \"center\",\n        dataIndex: 'dname'\n      }, {\n        title: '状态',\n        align: \"center\",\n        dataIndex: 'status'\n      }],\n      columns2: [{\n        title: '部门名称',\n        align: \"center\",\n        dataIndex: 'departName'\n      }],\n      columns3: [{\n        title: '部门名称',\n        align: \"center\",\n        dataIndex: 'name'\n      }],\n      dataSource: [],\n      visible: false,\n      visible2: false,\n      confirmLoading: false,\n      actChoice: [],\n      selectedRowKeys2: [],\n      selectedRows2: [],\n      urls: {\n        departUsetQuery: '/oaBus/taskInAct/deptUsersQuery'\n      }\n    };\n  },\n  computed: {},\n  methods: {\n    statusJudge: function statusJudge() {},\n    //进页面 初始数据\n    showNextUsers: function showNextUsers(nextsActs) {\n      console.log('--->>>>', JSON.stringify(nextsActs));\n      this.nextsActs = nextsActs; //统计数量\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = nextsActs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var i = _step.value;\n          var inclusiveGateway = i.actMsg.inclusiveGateway;\n          var parallelGateway = i.actMsg.parallelGateway;\n\n          if (inclusiveGateway) {\n            this.typeCount.inclusive.push(i);\n          } else if (parallelGateway) {\n            this.typeCount.parallel.push(i);\n          } else {\n            this.typeCount.normal.push(i);\n          } //记录节点\n\n\n          this.showPreClick(i, false, false, true);\n        } //---------默认选择 第一个环节----------\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.clickAct(this.nextsActs[0]);\n      this.visible = true;\n    },\n    handleTableChangeMy: function handleTableChangeMy(rowKeys, rows) {\n      this.onSelectChange(rowKeys, rows); //并记录用户\n\n      this.showPreClick(this.currentClick, false, true, false);\n    },\n    onSelectChangeMy2: function onSelectChangeMy2(rowKeys, rows) {\n      this.selectedRowKeys2 = rowKeys;\n      this.selectedRows2 = rows;\n    },\n    //点击部门行 选中\n    departClickCheck: function departClickCheck(res) {\n      var _this = this;\n\n      return {\n        on: {\n          click: function click() {\n            var rowkeys = _this.selectedRowKeys;\n            var selectionRows = _this.selectionRows;\n\n            if (rowkeys.length > 0 && rowkeys.includes(res.id)) {\n              rowkeys.splice(rowkeys.indexOf(res.id), 1);\n              selectionRows.splice(rowkeys.indexOf(res), 1);\n            } else {\n              rowkeys.push(res.id);\n              selectionRows.push(res);\n            }\n\n            _this.selectedRowKeys = rowkeys;\n            _this.selectionRows = selectionRows;\n          }\n        }\n      };\n    },\n    //点击单选行 选中\n    setRowRadio: function setRowRadio(res) {\n      var _this2 = this;\n\n      return {\n        on: {\n          click: function click() {\n            var keys = [];\n            keys.push(res.uid);\n            _this2.selectedRowKeys = keys; //记录用户选择\n\n            _this2.showPreClick(_this2.currentClick, false, true, false);\n          }\n        }\n      };\n    },\n    //点击复选行 选中\n    setRowCheck: function setRowCheck(res) {\n      var _this3 = this;\n\n      return {\n        on: {\n          click: function click() {\n            var rowkeys = _this3.selectedRowKeys;\n\n            if (rowkeys.length > 0 && rowkeys.includes(res.uid)) {\n              rowkeys.splice(rowkeys.indexOf(res.uid), 1);\n            } else {\n              rowkeys.push(res.uid);\n            }\n\n            _this3.selectedRowKeys = rowkeys; //记录用户选择\n\n            _this3.showPreClick(_this3.currentClick, false, true, false);\n          }\n        }\n      };\n    },\n    customRowMy: function customRowMy(res) {\n      var _this4 = this;\n\n      return {\n        on: {\n          click: function click() {\n            var rowkeys = _this4.selectedRowKeys2;\n\n            if (rowkeys.length > 0 && rowkeys.includes(res.id)) {\n              rowkeys.splice(rowkeys.indexOf(res.id), 1);\n            } else {\n              rowkeys.push(res.id);\n            }\n\n            _this4.selectedRowKeys2 = rowkeys;\n          }\n        }\n      };\n    },\n    //部门选\n    onChangeCheck: function onChangeCheck(item) {\n      var id = item.target.value.split('-')[0];\n      var type = item.target.value.split('-')[1]; //修改数据属性(修改选中状态用来向左边传)\n\n      for (var i in this.departSelect[type]) {\n        if (id == this.departSelect[type][i].id) {\n          this.departSelect[type][i].checked = true;\n        }\n      }\n    },\n\n    /**\n     * 记录本次点击\n     * 包容，并行：第一次点击：仅记录初始信息 每勾选/变更一次用户 就更新本节点选择\n     * 普通[不记录暂时]：每次都是新数据\n     * come 标识部门选择的来源(或者change事件过来的) false true\n     */\n    showPreClick: function showPreClick(item, isMock, isChange, isShowNext) {\n      //TODO 仅标识 @1.1 ###################################### 各种属性判断 #############################################\n      //记录当前点击的节点 用于属性填充\n      this.currentClick = item; //是否是多选\n\n      this.isMul = item.actMsg.allowMulti && item.oaProcActinst.multAssignee; //是否选部门\n\n      this.isDept = item.oaProcActinst.userOrRole == 'dept'; //TODO 仅标识 @1.2 ############################################  数据源 ###########################################\n\n      if (!this.isDept) {\n        this.dataSource = item.nextUsers;\n      } //节点性质(普通节点还是并行/包容)\n\n\n      var isNormal = true; //判断是否是已经记录过\n\n      var haveRecord = false;\n      var isParallel = item.actMsg.parallelGateway;\n      var isInclusive = item.actMsg.inclusiveGateway; //如果不是并行/包容就 不是普通性质\n\n      if (isParallel || isInclusive) isNormal = false; // if (!isNormal) {//不是普通节点 判断是否记录过\n\n      var act = this.gateWayTypeSelect.inclusive[item.actMsg.id];\n      var act1 = this.gateWayTypeSelect.parallel[item.actMsg.id];\n      var act2 = this.gateWayTypeSelect.normal[item.actMsg.id];\n\n      if (act != undefined || act1 != undefined || act2 != undefined) {\n        haveRecord = true;\n      } // }\n      //TODO 仅标识  @2 ############################################ 数据回显/初始化 ###################################\n      //判断类型是并行还是包容//并记录选择的内容\n\n\n      var select = {}; //记录节点属性\n\n      select['activity'] = item;\n\n      if (this.isDept) {\n        this.selectedRowKeys = [];\n        this.selectionRows = []; //部门\n\n        if (haveRecord && !isNormal) {\n          var current = null; //使用已经记录的数据\n\n          if (isMock) {\n            //是穿梭框过来的用选择的数据覆盖记录数据\n            // this.deptsList = item.oaProcActinst.deptsList\n            select['deptsList'] = this.deptsList;\n            select['departSelect'] = this.departSelect;\n            select['departUsersId'] = this.departUsersId;\n            select['departUsersMsg'] = this.departUsersMsg;\n            current = select;\n          } else {\n            //用记录的数据覆盖 显示数据\n            //是并行里的还是 包容里的\n            if (isParallel) {\n              current = this.gateWayTypeSelect.parallel[item.actMsg.id];\n            }\n\n            if (isInclusive) {\n              current = this.gateWayTypeSelect.inclusive[item.actMsg.id];\n            }\n\n            select = current;\n            this.deptsList = current.deptsList;\n            this.departSelect = current.departSelect;\n            this.departUsersId = current.departUsersId;\n            this.departUsersMsg = current.departUsersMsg;\n          }\n\n          this.mockData = [];\n\n          if (current != undefined && current != null) {\n            var ids = [];\n\n            for (var k in current.departSelect) {\n              for (var u in current.departSelect[k]) {\n                ids.push(current.departSelect[k][u].id);\n              }\n            }\n\n            for (var i in item.nextUsers) {\n              var id = item.nextUsers[i].id;\n\n              if (ids.indexOf(id) == -1) {\n                this.mockData.push(item.nextUsers[i]);\n              }\n            }\n          }\n        }\n\n        if (isNormal && !isMock || !haveRecord) {\n          //是普通性质，或者初次点击进入\n          this.selectionRows = [];\n          this.selectedRowKeys = [];\n          this.deptsList = item.oaProcActinst.deptsList;\n          select['deptsList'] = item.oaProcActinst.deptsList;\n          select['departSelect'] = {};\n          select['departUsersId'] = {};\n          select['departUsersMsg'] = {};\n\n          for (var x in select.deptsList) {\n            //TODO 仅标识*******备选信息用于页面展示\n            this.departSelect[this.deptsList[x]] = [];\n            this.departUsersId[this.deptsList[x]] = [];\n            this.departUsersMsg[this.deptsList[x]] = []; //TODO 仅标识******** 记录节点属性用于回显(包容/并行)\n            //构造备选集合\n\n            select['departSelect'][select.deptsList[x]] = []; //部门选择用户集合构造\n\n            select['departUsersId'][select.deptsList[x]] = []; //备选用户完整信息\n\n            select['departUsersMsg'][select.deptsList[x]] = [];\n          }\n\n          this.mockData = item.nextUsers;\n        }\n      } else {\n        //选人的\n        if (isChange) {\n          //用选择的数据覆盖 记录数据\n          select.selectedRowKeys = this.selectedRowKeys;\n          select.selectionRows = this.selectionRows;\n        }\n\n        if (haveRecord && !isNormal) {\n          //已经记录并且是 (包容/并行)性质 用记录的覆盖\n          //是点击进来的还是 通过change事件进来的\n          // isChange\n          if (!isChange) {\n            //用记录的数据回显 显示数据\n            var _current = null;\n\n            if (isParallel) {\n              _current = this.gateWayTypeSelect.parallel[item.actMsg.id];\n            }\n\n            if (isInclusive) {\n              _current = this.gateWayTypeSelect.inclusive[item.actMsg.id];\n            }\n\n            select = _current;\n\n            if (_current != null && _current != undefined) {\n              this.selectedRowKeys = _current.selectedRowKeys;\n              this.selectionRows = _current.selectionRows;\n            }\n          }\n        } //默认选中第一个\n\n\n        if (this.dataSource.length > 0 && !isShowNext && !isChange) {\n          if (this.selectedRowKeys.length == 0 || isNormal) {\n            var defaultSelected = [];\n            defaultSelected.push(this.dataSource[0].uid);\n            this.selectedRowKeys = defaultSelected;\n            select.selectedRowKeys = this.selectedRowKeys;\n            select.selectionRows = this.selectionRows;\n          }\n        }\n\n        if (isNormal && !isChange || !haveRecord) {\n          //普通节点 或者是 初次点击\n          //没有选的情况下默认选中表格第一个\n          // this.selectedRowKeys = []\n          // this.selectionRows = []\n          select.selectedRowKeys = this.selectedRowKeys;\n          select.selectionRows = this.selectionRows;\n        }\n      }\n\n      if (isInclusive) {\n        this.gateWayTypeSelect.inclusive[item.actMsg.id] = select;\n      }\n\n      if (isParallel) {\n        this.gateWayTypeSelect.parallel[item.actMsg.id] = select;\n      }\n\n      if (isNormal) {\n        this.gateWayTypeSelect.normal = {};\n        this.gateWayTypeSelect.normal[item.actMsg.id] = select;\n      } // ////console.log('----------------网关记录：：：', JSON.stringify(this.gateWayTypeSelect))\n\n    },\n    //点击某一节点---选择节点相关信息\n    clickAct: function clickAct(item) {\n      /**\n       *  (包容/并行网关)展示上一节点的选择信息\n       */\n      this.showPreClick(item, false, false, false);\n    },\n    confirm: function confirm() {\n      // //时间校验\n      // this.timeCheckMethod()\n      //校验并行与包容\n      var palllen = this.typeCount.parallel.length;\n      var ialllen = this.typeCount.inclusive.length;\n\n      if (palllen == 0 && ialllen == 0) {\n        //非包容/并行\n        this.singleType();\n      } else {\n        //包容/并行\n        this.gateWayCheck(); // this.moreThanOneType()\n      }\n    },\n    //并行或包容\n    moreThanOneType: function moreThanOneType() {\n      this.$emit('confirmNextUsersMore', this.gateWayTypeSelect, this.endTime);\n    },\n    //时间校验\n    timeCheckMethod: function timeCheckMethod() {\n      if (this.timeCheck) {\n        if (this.endTime == '') {\n          this.$message.error('请选择办理结束时间');\n          return;\n        }\n\n        if (new Date() > new Date(this.endTime)) {\n          this.$message.error('办理结束时间不得小于当前时间');\n          return;\n        }\n      }\n    },\n    confirm2: function confirm2() {\n      // console.log('=====================LLLLLLLLLLLLLLLL:::', this.selectedRowKeys2)\n      var isPass = this.moreThanOneUserCheck();\n\n      if (isPass) {\n        this.moreThanOneType(); //关闭\n\n        this.visible2 = false;\n        this.visible = false;\n      }\n    },\n    cancel2: function cancel2() {\n      this.visible2 = false;\n    },\n    recordChoice: function recordChoice(acts, choices) {\n      for (var i in choices) {\n        var act = choices[i];\n        var isDept = act.activity.oaProcActinst.userOrRole == 'dept';\n\n        if (isDept) {\n          var deptSelect = act.departSelect;\n\n          for (var _i in deptSelect) {\n            if (deptSelect[_i].length > 0) {\n              acts.push(act.activity.actMsg);\n              this.selectedRowKeys2.push(act.activity.actMsg.id);\n              break;\n            }\n          }\n        } else {\n          if (act.selectedRowKeys.length > 0) {\n            acts.push(act.activity.actMsg);\n            this.selectedRowKeys2.push(act.activity.actMsg.id);\n          }\n        }\n      }\n    },\n    //并行网关校验\n    parallelCheck: function parallelCheck(acts) {\n      var keys = [];\n\n      for (var i in this.gateWayTypeSelect.parallel) {\n        keys.push(i);\n      }\n\n      for (var _i2 in acts) {\n        keys.splice(keys.indexOf(acts[_i2].id), 1);\n      }\n\n      if (keys.length > 0) {\n        var h = this.$createElement;\n        var names = [];\n\n        for (var _i3 = 0, _keys = keys; _i3 < _keys.length; _i3++) {\n          var _i4 = _keys[_i3];\n          names.push(h('p', \"\".concat(this.gateWayTypeSelect.parallel[_i4].activity.actMsg.name)));\n        }\n\n        var content_ = h('div', {}, names);\n        var modal = this.$error({\n          title: '以下节点共属于并行网关，必须选择用户',\n          content: content_\n        });\n        return false;\n      } else {\n        return true;\n      }\n    },\n    //包容/并行网关校验\n    gateWayCheck: function gateWayCheck() {\n      var acts = [];\n      this.selectedRowKeys2 = [];\n      this.recordChoice(acts, this.gateWayTypeSelect.parallel);\n      this.recordChoice(acts, this.gateWayTypeSelect.inclusive);\n      this.recordChoice(acts, this.gateWayTypeSelect.normal);\n      this.selectedRows2 = acts;\n      var isShow = this.parallelCheck(acts);\n\n      if (isShow) {\n        this.visible2 = true;\n        this.actChoice = acts;\n      }\n    },\n    moreThanOneUserCheck: function moreThanOneUserCheck() {\n      for (var i in this.selectedRowKeys2) {\n        var act = this.selectedRows2[i];\n        var id = act.id;\n        var inclusiveGateway = act.inclusiveGateway;\n        var parallelGateway = act.parallelGateway;\n        var currentAct = null;\n\n        if (inclusiveGateway) {\n          currentAct = this.gateWayTypeSelect.inclusive[id];\n        }\n\n        if (parallelGateway) {\n          currentAct = this.gateWayTypeSelect.parallel[id];\n        }\n\n        if (!parallelGateway && !inclusiveGateway) {\n          currentAct = this.gateWayTypeSelect.normal[id];\n        }\n\n        var isDept = currentAct.activity.oaProcActinst.userOrRole == 'dept';\n        var name = currentAct.activity.actMsg.name;\n\n        if (isDept) {\n          var haveUser = false;\n\n          for (var _i5 in currentAct.departUsersId) {\n            var uids = currentAct.departUsersId[_i5];\n\n            if (_i5.indexOf(\"主办\") >= 0) {\n              if (uids.length <= 0) {\n                this.$message.error(name + \" 环节，主办部门必须选择用户\");\n                return false;\n              }\n            }\n\n            if (uids.length > 0) {\n              haveUser = true;\n            }\n\n            if (!haveUser) {\n              this.$message.error(name + ' 环节,部门至少选择一组用户');\n              return false;\n            }\n          }\n        } else {\n          if (currentAct.selectedRowKeys.length <= 0) {\n            this.$message.error(name + ' 环节未选择用户');\n            return false;\n          }\n        }\n      } //构造参数\n      // keys\n\n\n      this.constructorParams(this.selectedRowKeys2, this.gateWayTypeSelect.parallel);\n      this.constructorParams(this.selectedRowKeys2, this.gateWayTypeSelect.inclusive);\n      this.constructorParams(this.selectedRowKeys2, this.gateWayTypeSelect.normal); // console.log('~~~~~~~~~~~~~~~~~~', JSON.stringify(this.gateWayTypeSelect))\n\n      return true;\n    },\n    constructorParams: function constructorParams(keys, tasks) {\n      //console.log('-----------keys:::', JSON.stringify(keys))\n      for (var k in tasks) {\n        if (keys.indexOf(k) < 0) {\n          //改变完成条件\n          var conditionContext = tasks[k].activity.actMsg.conditionContext;\n\n          if (conditionContext != undefined && conditionContext != null) {\n            for (var i in conditionContext) {\n              conditionContext[i] = 'no-' + conditionContext[i];\n            }\n          }\n        }\n      }\n    },\n    //非包容/并行网关办理方式\n    singleType: function singleType() {\n      var ids = [];\n\n      if (this.isDept) {\n        var _ids = [];\n        var depMSg = {};\n\n        for (var i in this.departUsersId) {\n          if (i.indexOf(\"主办\") >= 0 && this.departUsersId[i].length == 0) {\n            this.$message.error(i + \"部门必须选择用户\");\n            return;\n          }\n\n          if (this.departUsersId[i].length > 0) {\n            _ids.push(this.departUsersId[i]);\n\n            depMSg[i] = this.departUsersId[i];\n          }\n        } // ////console.log('==========部门：：：', ids, JSON.stringify(this.currentClick))\n        //校验\n\n\n        this.$emit('func', _ids, this.currentClick, this.endTime, depMSg);\n        this.cancel();\n      } else if (this.endType) {\n        this.$emit('func', ids, this.currentClick, this.endTime);\n        this.cancel();\n      } else {\n        //办理人校验\n        if (this.selectedRowKeys.length <= 0) {\n          this.$message.error(\"请选择办理人\");\n          return;\n        }\n\n        ids = this.selectedRowKeys; // ////console.log('------普通：' + ids, JSON.stringify(this.currentClick))\n        //办理流程\n\n        this.$emit('func', ids, this.currentClick, this.endTime);\n        this.cancel();\n      }\n    },\n    //穿梭方法实现\n    toRight: function toRight(item) {\n      //从部门列表中移除--添加到对应的list中\n      //1 主办部门只能有一个\n      if (item.indexOf(\"主办\") >= 0) {\n        //判断是否已经有元素了\n        if (this.departSelect[item].length == 0 && this.selectionRows.length > 1 || this.departSelect[item].length > 0) {\n          this.$message.error(\"主办部门只允许有一个\");\n          return;\n        }\n      } //2 添加到右边--移除左边\n\n\n      var del = {};\n\n      for (var i in this.selectionRows) {\n        this.selectionRows[i].checked = false; //右边\n\n        this.departSelect[item].push(this.selectionRows[i]); //移除元素\n\n        del[this.selectionRows[i].id] = 1;\n      } //移除元素(采用重新赋值的方式)\n\n\n      var mockData2 = [];\n\n      for (var j = 0; j < this.mockData.length; j++) {\n        if (del[this.mockData[j].id] != 1) {\n          mockData2.push(this.mockData[j]);\n        }\n      }\n\n      this.mockData = mockData2; //清空所选\n\n      this.selectionRows = [];\n      this.selectedRowKeys = []; // 更新用户显示\n\n      this.currentDeptUserQuery(item);\n    },\n    toLeft: function toLeft(item) {\n      //添加到部门列表中--从list中移除\n      var right = [];\n\n      for (var i in this.departSelect[item]) {\n        var itt = this.departSelect[item][i];\n\n        if (itt.checked) {\n          itt.checked = false;\n          this.mockData.push(itt);\n        } else {\n          right.push(itt);\n        }\n      } //改变右边\n\n\n      this.departSelect[item] = right; // 更新用户显示\n\n      this.currentDeptUserQuery(item);\n    },\n\n    /**\n     * 选中部门的用户查询\n     * @param item\n     */\n    currentDeptUserQuery: function currentDeptUserQuery(item) {\n      var _this5 = this;\n\n      var role = this.currentClick.oaProcActinst.candidates;\n      var depts = this.departSelect;\n      var param = {};\n      param.role = role;\n      param.depts = depts;\n\n      if (depts[item].length == 0) {\n        this.departUsersId[item] = [];\n        this.departUsersMsg[item] = [];\n        var keys = [];\n        var rows = [];\n        this.onSelectChange(keys, rows);\n        return;\n      } //查询部门对应的用户id 分组\n\n\n      postAction(this.urls.departUsetQuery, param).then(function (res) {\n        if (res.success) {\n          // ////console.log('-------------->>>', JSON.stringify(res.result[item]))\n          if (res.result[item].length == 0) {\n            _this5.$message.error('所选' + item + '部门没有对应角色的用户');\n\n            _this5.departUsersId[item] = [];\n            _this5.departUsersMsg[item] = [];\n            var _keys2 = [];\n            var _rows = [];\n\n            _this5.onSelectChange(_keys2, _rows);\n\n            return;\n          } else {\n            var ids = [];\n\n            for (var i in res.result[item]) {\n              ids.push(res.result[item][i].id);\n            }\n\n            _this5.departUsersId[item] = ids;\n            _this5.departUsersMsg[item] = res.result[item];\n            var _keys3 = [];\n            var _rows2 = [];\n\n            _this5.onSelectChange(_keys3, _rows2); //记录用户选择\n\n\n            _this5.showPreClick(_this5.currentClick, true, false);\n          }\n        } else {\n          _this5.$message.error(res.message);\n\n          return;\n        }\n      });\n    },\n    cancel: function cancel() {\n      //初始数据\n      this.dataInit();\n      this.$emit('close');\n      this.visible = false;\n    },\n    onChange: function onChange(date, dateString) {\n      this.endTime = dateString;\n    },\n    changeChoice: function changeChoice(e) {\n      if (e.target.value == 1) {\n        //不限时间\n        this.timeCheck = false;\n      } else {\n        this.timeCheck = true;\n      }\n    },\n    dataInit: function dataInit() {\n      this.selectionRows = [];\n      this.selectedRowKeys = [];\n      this.endTime = '';\n    },\n\n    /**\n     * 全选/不选\n     */\n    onCheckAllChange: function onCheckAllChange(e) {\n      var checked = e.target.checked;\n      var type = e.target.id;\n\n      if (checked) {\n        //修改数据属性\n        for (var i in this.departSelect[type]) {\n          this.departSelect[type][i].checked = true;\n          this.$refs[type][i].checked = true;\n        }\n      } else {\n        for (var i in this.departSelect[type]) {\n          this.departSelect[type][i].checked = false;\n          this.$refs[type][i].checked = false;\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["AddUsersModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmNA,SAAA,SAAA,EAAA,UAAA;AACA,SAAA,cAAA,QAAA,yBAAA;AACA,OAAA,YAAA;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,MAAA,EAAA,CAAA,cAAA,CAFA;AAGA,EAAA,UAAA,EAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAHA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,MAAA,CAAA,WAAA,GAAA,GAAA,GAAA,IADA;AAEA,MAAA,KAAA,EAAA,MAFA;AAGA,MAAA,MAAA,EAAA,IAHA;AAIA;AACA,MAAA,KAAA,EAAA,KALA;AAKA;AACA,MAAA,MAAA,EAAA,KANA;AAOA,MAAA,OAAA,EAAA,KAPA;AAOA;AACA,MAAA,SAAA,EAAA,EARA;AASA,MAAA,OAAA,EAAA,EATA;AAUA;AACA,MAAA,QAAA,EAAA,EAXA;AAYA;AACA,MAAA,SAAA,EAAA,EAbA;AAcA;AACA,MAAA,YAAA,EAAA,EAfA;AAgBA;AACA,MAAA,aAAA,EAAA,EAjBA;AAkBA,MAAA,cAAA,EAAA,EAlBA;AAmBA;AACA,MAAA,iBAAA,EAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,SAAA,EAAA,EAFA;AAGA,QAAA,MAAA,EAAA,EAHA,CAGA;;AAHA,OApBA;AAyBA,MAAA,SAAA,EAAA;AACA,QAAA,MAAA,EAAA,EADA;AAEA,QAAA,SAAA,EAAA,EAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAzBA;AA8BA,MAAA,QAAA,EAAA,IA9BA;AA+BA;AACA,MAAA,YAAA,EAAA,IAhCA;AAiCA,MAAA,SAAA,EAAA,KAjCA;AAiCA;AACA,MAAA,OAAA,EAAA,CAEA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OAFA,EAMA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OANA,EAWA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OAXA,CAlCA;AAmDA,MAAA,QAAA,EAAA,CACA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OADA,CAnDA;AA0DA,MAAA,QAAA,EAAA,CACA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,QAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OADA,CA1DA;AAiEA,MAAA,UAAA,EAAA,EAjEA;AAkEA,MAAA,OAAA,EAAA,KAlEA;AAmEA,MAAA,QAAA,EAAA,KAnEA;AAoEA,MAAA,cAAA,EAAA,KApEA;AAqEA,MAAA,SAAA,EAAA,EArEA;AAsEA,MAAA,gBAAA,EAAA,EAtEA;AAuEA,MAAA,aAAA,EAAA,EAvEA;AAyEA,MAAA,IAAA,EAAA;AACA,QAAA,eAAA,EAAA;AADA;AAzEA,KAAA;AA6EA,GAlFA;AAmFA,EAAA,QAAA,EAAA,EAnFA;AAoFA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA,CACA,CAFA;AAGA;AACA,IAAA,aAJA,yBAIA,SAJA,EAIA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA;AAGA,WAAA,SAAA,GAAA,SAAA,CALA,CAMA;;AANA;AAAA;AAAA;;AAAA;AAOA,6BAAA,SAAA,8HAAA;AAAA,cAAA,CAAA;AACA,cAAA,gBAAA,GAAA,CAAA,CAAA,MAAA,CAAA,gBAAA;AACA,cAAA,eAAA,GAAA,CAAA,CAAA,MAAA,CAAA,eAAA;;AACA,cAAA,gBAAA,EAAA;AACA,iBAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,CAAA;AACA,WAFA,MAEA,IAAA,eAAA,EAAA;AACA,iBAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA;AACA,WAFA,MAEA;AACA,iBAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA,WATA,CAUA;;;AACA,eAAA,YAAA,CAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA;AACA,SAnBA,CAoBA;;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,WAAA,QAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA;AAEA,WAAA,OAAA,GAAA,IAAA;AACA,KA5BA;AA6BA,IAAA,mBA7BA,+BA6BA,OA7BA,EA6BA,IA7BA,EA6BA;AACA,WAAA,cAAA,CAAA,OAAA,EAAA,IAAA,EADA,CAEA;;AACA,WAAA,YAAA,CAAA,KAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA;AACA,KAjCA;AAkCA,IAAA,iBAlCA,6BAkCA,OAlCA,EAkCA,IAlCA,EAkCA;AACA,WAAA,gBAAA,GAAA,OAAA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,KArCA;AAsCA;AACA,IAAA,gBAvCA,4BAuCA,GAvCA,EAuCA;AAAA;;AACA,aAAA;AACA,QAAA,EAAA,EAAA;AACA,UAAA,KAAA,EAAA,iBAAA;AACA,gBAAA,OAAA,GAAA,KAAA,CAAA,eAAA;AACA,gBAAA,aAAA,GAAA,KAAA,CAAA,aAAA;;AACA,gBAAA,OAAA,CAAA,MAAA,GAAA,CAAA,IAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,cAAA,aAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,aAHA,MAGA;AACA,cAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,cAAA,aAAA,CAAA,IAAA,CAAA,GAAA;AACA;;AACA,YAAA,KAAA,CAAA,eAAA,GAAA,OAAA;AACA,YAAA,KAAA,CAAA,aAAA,GAAA,aAAA;AAEA;AAdA;AADA,OAAA;AAkBA,KA1DA;AA2DA;AACA,IAAA,WA5DA,uBA4DA,GA5DA,EA4DA;AAAA;;AACA,aAAA;AACA,QAAA,EAAA,EAAA;AACA,UAAA,KAAA,EAAA,iBAAA;AACA,gBAAA,IAAA,GAAA,EAAA;AACA,YAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA;AACA,YAAA,MAAA,CAAA,eAAA,GAAA,IAAA,CAHA,CAKA;;AACA,YAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA;AACA;AARA;AADA,OAAA;AAYA,KAzEA;AA0EA;AACA,IAAA,WA3EA,uBA2EA,GA3EA,EA2EA;AAAA;;AACA,aAAA;AACA,QAAA,EAAA,EAAA;AACA,UAAA,KAAA,EAAA,iBAAA;AACA,gBAAA,OAAA,GAAA,MAAA,CAAA,eAAA;;AACA,gBAAA,OAAA,CAAA,MAAA,GAAA,CAAA,IAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,aAFA,MAEA;AACA,cAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA;AACA;;AACA,YAAA,MAAA,CAAA,eAAA,GAAA,OAAA,CAPA,CASA;;AACA,YAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA;AACA;AAZA;AADA,OAAA;AAgBA,KA5FA;AA6FA,IAAA,WA7FA,uBA6FA,GA7FA,EA6FA;AAAA;;AACA,aAAA;AACA,QAAA,EAAA,EAAA;AACA,UAAA,KAAA,EAAA,iBAAA;AACA,gBAAA,OAAA,GAAA,MAAA,CAAA,gBAAA;;AACA,gBAAA,OAAA,CAAA,MAAA,GAAA,CAAA,IAAA,OAAA,CAAA,QAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA;AACA,cAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,aAFA,MAEA;AACA,cAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA;;AACA,YAAA,MAAA,CAAA,gBAAA,GAAA,OAAA;AACA;AATA;AADA,OAAA;AAaA,KA3GA;AA4GA;AACA,IAAA,aA7GA,yBA6GA,IA7GA,EA6GA;AACA,UAAA,EAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAFA,CAGA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,YAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,EAAA,IAAA,KAAA,YAAA,CAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA;AACA,eAAA,YAAA,CAAA,IAAA,EAAA,CAAA,EAAA,OAAA,GAAA,IAAA;AACA;AACA;AACA,KAtHA;;AAwHA;;;;;;AAMA,IAAA,YA9HA,wBA8HA,IA9HA,EA8HA,MA9HA,EA8HA,QA9HA,EA8HA,UA9HA,EA8HA;AAGA;AACA;AACA,WAAA,YAAA,GAAA,IAAA,CALA,CAMA;;AACA,WAAA,KAAA,GAAA,IAAA,CAAA,MAAA,CAAA,UAAA,IAAA,IAAA,CAAA,aAAA,CAAA,YAAA,CAPA,CAQA;;AACA,WAAA,MAAA,GAAA,IAAA,CAAA,aAAA,CAAA,UAAA,IAAA,MAAA,CATA,CAYA;;AACA,UAAA,CAAA,KAAA,MAAA,EAAA;AACA,aAAA,UAAA,GAAA,IAAA,CAAA,SAAA;AACA,OAfA,CAiBA;;;AACA,UAAA,QAAA,GAAA,IAAA,CAlBA,CAqBA;;AACA,UAAA,UAAA,GAAA,KAAA;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,MAAA,CAAA,eAAA;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,MAAA,CAAA,gBAAA,CAxBA,CA0BA;;AACA,UAAA,UAAA,IAAA,WAAA,EAAA,QAAA,GAAA,KAAA,CA3BA,CA6BA;;AACA,UAAA,GAAA,GAAA,KAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;;AACA,UAAA,GAAA,IAAA,SAAA,IAAA,IAAA,IAAA,SAAA,IAAA,IAAA,IAAA,SAAA,EAAA;AACA,QAAA,UAAA,GAAA,IAAA;AACA,OAnCA,CAoCA;AAGA;AAEA;;;AACA,UAAA,MAAA,GAAA,EAAA,CA1CA,CA2CA;;AACA,MAAA,MAAA,CAAA,UAAA,CAAA,GAAA,IAAA;;AACA,UAAA,KAAA,MAAA,EAAA;AACA,aAAA,eAAA,GAAA,EAAA;AACA,aAAA,aAAA,GAAA,EAAA,CAFA,CAGA;;AACA,YAAA,UAAA,IAAA,CAAA,QAAA,EAAA;AACA,cAAA,OAAA,GAAA,IAAA,CADA,CAEA;;AACA,cAAA,MAAA,EAAA;AAAA;AACA;AACA,YAAA,MAAA,CAAA,WAAA,CAAA,GAAA,KAAA,SAAA;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,GAAA,KAAA,YAAA;AACA,YAAA,MAAA,CAAA,eAAA,CAAA,GAAA,KAAA,aAAA;AACA,YAAA,MAAA,CAAA,gBAAA,CAAA,GAAA,KAAA,cAAA;AACA,YAAA,OAAA,GAAA,MAAA;AACA,WAPA,MAOA;AAAA;AACA;AAEA,gBAAA,UAAA,EAAA;AACA,cAAA,OAAA,GAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA;;AACA,gBAAA,WAAA,EAAA;AACA,cAAA,OAAA,GAAA,KAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA;;AACA,YAAA,MAAA,GAAA,OAAA;AACA,iBAAA,SAAA,GAAA,OAAA,CAAA,SAAA;AACA,iBAAA,YAAA,GAAA,OAAA,CAAA,YAAA;AACA,iBAAA,aAAA,GAAA,OAAA,CAAA,aAAA;AACA,iBAAA,cAAA,GAAA,OAAA,CAAA,cAAA;AACA;;AAEA,eAAA,QAAA,GAAA,EAAA;;AAEA,cAAA,OAAA,IAAA,SAAA,IAAA,OAAA,IAAA,IAAA,EAAA;AACA,gBAAA,GAAA,GAAA,EAAA;;AACA,iBAAA,IAAA,CAAA,IAAA,OAAA,CAAA,YAAA,EAAA;AACA,mBAAA,IAAA,CAAA,IAAA,OAAA,CAAA,YAAA,CAAA,CAAA,CAAA,EAAA;AACA,gBAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA;AACA;;AACA,iBAAA,IAAA,CAAA,IAAA,IAAA,CAAA,SAAA,EAAA;AACA,kBAAA,EAAA,GAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,EAAA;;AACA,kBAAA,GAAA,CAAA,OAAA,CAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AACA,qBAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;;AACA,YAAA,QAAA,IAAA,CAAA,MAAA,IAAA,CAAA,UAAA,EAAA;AAAA;AACA,eAAA,aAAA,GAAA,EAAA;AACA,eAAA,eAAA,GAAA,EAAA;AACA,eAAA,SAAA,GAAA,IAAA,CAAA,aAAA,CAAA,SAAA;AACA,UAAA,MAAA,CAAA,WAAA,CAAA,GAAA,IAAA,CAAA,aAAA,CAAA,SAAA;AACA,UAAA,MAAA,CAAA,cAAA,CAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,eAAA,CAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,gBAAA,CAAA,GAAA,EAAA;;AACA,eAAA,IAAA,CAAA,IAAA,MAAA,CAAA,SAAA,EAAA;AACA;AACA,iBAAA,YAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA;AACA,iBAAA,aAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA;AACA,iBAAA,cAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAJA,CAKA;AACA;;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAPA,CAQA;;AACA,YAAA,MAAA,CAAA,eAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CATA,CAUA;;AACA,YAAA,MAAA,CAAA,gBAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA;AACA;;AACA,eAAA,QAAA,GAAA,IAAA,CAAA,SAAA;AACA;AAEA,OAvEA,MAuEA;AAAA;AAGA,YAAA,QAAA,EAAA;AAAA;AACA,UAAA,MAAA,CAAA,eAAA,GAAA,KAAA,eAAA;AACA,UAAA,MAAA,CAAA,aAAA,GAAA,KAAA,aAAA;AACA;;AACA,YAAA,UAAA,IAAA,CAAA,QAAA,EAAA;AACA;AACA;AACA;AACA,cAAA,CAAA,QAAA,EAAA;AAAA;AACA,gBAAA,QAAA,GAAA,IAAA;;AACA,gBAAA,UAAA,EAAA;AACA,cAAA,QAAA,GAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA;;AACA,gBAAA,WAAA,EAAA;AACA,cAAA,QAAA,GAAA,KAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA;;AACA,YAAA,MAAA,GAAA,QAAA;;AACA,gBAAA,QAAA,IAAA,IAAA,IAAA,QAAA,IAAA,SAAA,EAAA;AACA,mBAAA,eAAA,GAAA,QAAA,CAAA,eAAA;AACA,mBAAA,aAAA,GAAA,QAAA,CAAA,aAAA;AACA;AACA;AACA,SAzBA,CA2BA;;;AACA,YAAA,KAAA,UAAA,CAAA,MAAA,GAAA,CAAA,IAAA,CAAA,UAAA,IAAA,CAAA,QAAA,EAAA;AACA,cAAA,KAAA,eAAA,CAAA,MAAA,IAAA,CAAA,IAAA,QAAA,EAAA;AACA,gBAAA,eAAA,GAAA,EAAA;AACA,YAAA,eAAA,CAAA,IAAA,CAAA,KAAA,UAAA,CAAA,CAAA,EAAA,GAAA;AACA,iBAAA,eAAA,GAAA,eAAA;AACA,YAAA,MAAA,CAAA,eAAA,GAAA,KAAA,eAAA;AACA,YAAA,MAAA,CAAA,aAAA,GAAA,KAAA,aAAA;AACA;AACA;;AACA,YAAA,QAAA,IAAA,CAAA,QAAA,IAAA,CAAA,UAAA,EAAA;AAAA;AAEA;AACA;AACA;AACA,UAAA,MAAA,CAAA,eAAA,GAAA,KAAA,eAAA;AACA,UAAA,MAAA,CAAA,aAAA,GAAA,KAAA,aAAA;AACA;AACA;;AAEA,UAAA,WAAA,EAAA;AACA,aAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,IAAA,MAAA;AACA;;AACA,UAAA,UAAA,EAAA;AACA,aAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,IAAA,MAAA;AACA;;AACA,UAAA,QAAA,EAAA;AACA,aAAA,iBAAA,CAAA,MAAA,GAAA,EAAA;AACA,aAAA,iBAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,IAAA,MAAA;AACA,OA5KA,CA8KA;;AACA,KA7SA;AA8SA;AACA,IAAA,QA/SA,oBA+SA,IA/SA,EA+SA;AAEA;;;AAGA,WAAA,YAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA;AAEA,KAtTA;AAuTA,IAAA,OAvTA,qBAuTA;AAEA;AACA;AACA;AACA,UAAA,OAAA,GAAA,KAAA,SAAA,CAAA,QAAA,CAAA,MAAA;AACA,UAAA,OAAA,GAAA,KAAA,SAAA,CAAA,SAAA,CAAA,MAAA;;AACA,UAAA,OAAA,IAAA,CAAA,IAAA,OAAA,IAAA,CAAA,EAAA;AAAA;AACA,aAAA,UAAA;AACA,OAFA,MAEA;AAAA;AACA,aAAA,YAAA,GADA,CAEA;AACA;AACA,KApUA;AAqUA;AACA,IAAA,eAtUA,6BAsUA;AAEA,WAAA,KAAA,CAAA,sBAAA,EAAA,KAAA,iBAAA,EAAA,KAAA,OAAA;AACA,KAzUA;AA0UA;AACA,IAAA,eA3UA,6BA2UA;AACA,UAAA,KAAA,SAAA,EAAA;AACA,YAAA,KAAA,OAAA,IAAA,EAAA,EAAA;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,WAAA;AACA;AACA;;AACA,YAAA,IAAA,IAAA,KAAA,IAAA,IAAA,CAAA,KAAA,OAAA,CAAA,EAAA;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,gBAAA;AACA;AACA;AACA;AACA,KAtVA;AAuVA,IAAA,QAvVA,sBAuVA;AACA;AAEA,UAAA,MAAA,GAAA,KAAA,oBAAA,EAAA;;AACA,UAAA,MAAA,EAAA;AACA,aAAA,eAAA,GADA,CAEA;;AACA,aAAA,QAAA,GAAA,KAAA;AACA,aAAA,OAAA,GAAA,KAAA;AACA;AACA,KAjWA;AAkWA,IAAA,OAlWA,qBAkWA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,KApWA;AAqWA,IAAA,YArWA,wBAqWA,IArWA,EAqWA,OArWA,EAqWA;AAEA,WAAA,IAAA,CAAA,IAAA,OAAA,EAAA;AACA,YAAA,GAAA,GAAA,OAAA,CAAA,CAAA,CAAA;AACA,YAAA,MAAA,GAAA,GAAA,CAAA,QAAA,CAAA,aAAA,CAAA,UAAA,IAAA,MAAA;;AACA,YAAA,MAAA,EAAA;AACA,cAAA,UAAA,GAAA,GAAA,CAAA,YAAA;;AACA,eAAA,IAAA,EAAA,IAAA,UAAA,EAAA;AACA,gBAAA,UAAA,CAAA,EAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,MAAA;AACA,mBAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA;AACA;AACA;AACA;AACA,SATA,MASA;AACA,cAAA,GAAA,CAAA,eAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,MAAA;AACA,iBAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA;AACA;AACA;AACA;AAEA,KA3XA;AA4XA;AACA,IAAA,aA7XA,yBA6XA,IA7XA,EA6XA;AACA,UAAA,IAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,iBAAA,CAAA,QAAA,EAAA;AACA,QAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA;;AAEA,WAAA,IAAA,GAAA,IAAA,IAAA,EAAA;AACA,QAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AAEA,UAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,CAAA,GAAA,KAAA,cAAA;AAEA,YAAA,KAAA,GAAA,EAAA;;AACA,kCAAA,IAAA,6BAAA;AAAA,cAAA,GAAA,aAAA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,YAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA,IAAA,EAAA;AACA;;AAEA,YAAA,QAAA,GAAA,CAAA,CAAA,KAAA,EAAA,EAAA,EAAA,KAAA,CAAA;AAEA,YAAA,KAAA,GAAA,KAAA,MAAA,CAAA;AACA,UAAA,KAAA,EAAA,oBADA;AAEA,UAAA,OAAA,EAAA;AAFA,SAAA,CAAA;AAKA,eAAA,KAAA;AACA,OAhBA,MAgBA;AACA,eAAA,IAAA;AACA;AACA,KA1ZA;AA2ZA;AACA,IAAA,YA5ZA,0BA4ZA;AAEA,UAAA,IAAA,GAAA,EAAA;AACA,WAAA,gBAAA,GAAA,EAAA;AACA,WAAA,YAAA,CAAA,IAAA,EAAA,KAAA,iBAAA,CAAA,QAAA;AACA,WAAA,YAAA,CAAA,IAAA,EAAA,KAAA,iBAAA,CAAA,SAAA;AACA,WAAA,YAAA,CAAA,IAAA,EAAA,KAAA,iBAAA,CAAA,MAAA;AAEA,WAAA,aAAA,GAAA,IAAA;AAEA,UAAA,MAAA,GAAA,KAAA,aAAA,CAAA,IAAA,CAAA;;AAEA,UAAA,MAAA,EAAA;AACA,aAAA,QAAA,GAAA,IAAA;AACA,aAAA,SAAA,GAAA,IAAA;AACA;AAEA,KA7aA;AA8aA,IAAA,oBA9aA,kCA8aA;AAGA,WAAA,IAAA,CAAA,IAAA,KAAA,gBAAA,EAAA;AACA,YAAA,GAAA,GAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AACA,YAAA,EAAA,GAAA,GAAA,CAAA,EAAA;AACA,YAAA,gBAAA,GAAA,GAAA,CAAA,gBAAA;AACA,YAAA,eAAA,GAAA,GAAA,CAAA,eAAA;AAEA,YAAA,UAAA,GAAA,IAAA;;AACA,YAAA,gBAAA,EAAA;AACA,UAAA,UAAA,GAAA,KAAA,iBAAA,CAAA,SAAA,CAAA,EAAA,CAAA;AACA;;AACA,YAAA,eAAA,EAAA;AACA,UAAA,UAAA,GAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,EAAA,CAAA;AACA;;AACA,YAAA,CAAA,eAAA,IAAA,CAAA,gBAAA,EAAA;AACA,UAAA,UAAA,GAAA,KAAA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA;AACA;;AAEA,YAAA,MAAA,GAAA,UAAA,CAAA,QAAA,CAAA,aAAA,CAAA,UAAA,IAAA,MAAA;AACA,YAAA,IAAA,GAAA,UAAA,CAAA,QAAA,CAAA,MAAA,CAAA,IAAA;;AAEA,YAAA,MAAA,EAAA;AACA,cAAA,QAAA,GAAA,KAAA;;AACA,eAAA,IAAA,GAAA,IAAA,UAAA,CAAA,aAAA,EAAA;AACA,gBAAA,IAAA,GAAA,UAAA,CAAA,aAAA,CAAA,GAAA,CAAA;;AACA,gBAAA,GAAA,CAAA,OAAA,CAAA,IAAA,KAAA,CAAA,EAAA;AACA,kBAAA,IAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,qBAAA,QAAA,CAAA,KAAA,CAAA,IAAA,GAAA,gBAAA;AACA,uBAAA,KAAA;AACA;AACA;;AACA,gBAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,QAAA,GAAA,IAAA;AACA;;AAEA,gBAAA,CAAA,QAAA,EAAA;AACA,mBAAA,QAAA,CAAA,KAAA,CAAA,IAAA,GAAA,gBAAA;AACA,qBAAA,KAAA;AACA;AACA;AAEA,SApBA,MAoBA;AACA,cAAA,UAAA,CAAA,eAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,iBAAA,QAAA,CAAA,KAAA,CAAA,IAAA,GAAA,UAAA;AACA,mBAAA,KAAA;AACA;AACA;AACA,OAjDA,CAkDA;AACA;;;AACA,WAAA,iBAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,iBAAA,CAAA,QAAA;AACA,WAAA,iBAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,iBAAA,CAAA,SAAA;AACA,WAAA,iBAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,iBAAA,CAAA,MAAA,EAtDA,CAwDA;;AAEA,aAAA,IAAA;AACA,KAzeA;AA0eA,IAAA,iBA1eA,6BA0eA,IA1eA,EA0eA,KA1eA,EA0eA;AACA;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,EAAA;AACA,YAAA,IAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA,cAAA,gBAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA,gBAAA;;AACA,cAAA,gBAAA,IAAA,SAAA,IAAA,gBAAA,IAAA,IAAA,EAAA;AACA,iBAAA,IAAA,CAAA,IAAA,gBAAA,EAAA;AACA,cAAA,gBAAA,CAAA,CAAA,CAAA,GAAA,QAAA,gBAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;AACA;AAEA,KAxfA;AAyfA;AACA,IAAA,UA1fA,wBA0fA;AACA,UAAA,GAAA,GAAA,EAAA;;AACA,UAAA,KAAA,MAAA,EAAA;AAEA,YAAA,IAAA,GAAA,EAAA;AACA,YAAA,MAAA,GAAA,EAAA;;AACA,aAAA,IAAA,CAAA,IAAA,KAAA,aAAA,EAAA;AAEA,cAAA,CAAA,CAAA,OAAA,CAAA,IAAA,KAAA,CAAA,IAAA,KAAA,aAAA,CAAA,CAAA,EAAA,MAAA,IAAA,CAAA,EAAA;AACA,iBAAA,QAAA,CAAA,KAAA,CAAA,CAAA,GAAA,UAAA;AACA;AACA;;AAEA,cAAA,KAAA,aAAA,CAAA,CAAA,EAAA,MAAA,GAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,IAAA,CAAA,KAAA,aAAA,CAAA,CAAA,CAAA;;AACA,YAAA,MAAA,CAAA,CAAA,CAAA,GAAA,KAAA,aAAA,CAAA,CAAA,CAAA;AACA;AACA,SAfA,CAgBA;AACA;;;AACA,aAAA,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,KAAA,YAAA,EAAA,KAAA,OAAA,EAAA,MAAA;AACA,aAAA,MAAA;AACA,OApBA,MAoBA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,KAAA,CAAA,MAAA,EAAA,GAAA,EAAA,KAAA,YAAA,EAAA,KAAA,OAAA;AACA,aAAA,MAAA;AACA,OAHA,MAGA;AACA;AACA,YAAA,KAAA,eAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,QAAA;AACA;AACA;;AACA,QAAA,GAAA,GAAA,KAAA,eAAA,CANA,CAQA;AACA;;AACA,aAAA,KAAA,CAAA,MAAA,EAAA,GAAA,EAAA,KAAA,YAAA,EAAA,KAAA,OAAA;AACA,aAAA,MAAA;AACA;AACA,KAhiBA;AAiiBA;AACA,IAAA,OAAA,EAAA,iBAAA,IAAA,EAAA;AACA;AACA;AAEA,UAAA,IAAA,CAAA,OAAA,CAAA,IAAA,KAAA,CAAA,EAAA;AACA;AACA,YAAA,KAAA,YAAA,CAAA,IAAA,EAAA,MAAA,IAAA,CAAA,IAAA,KAAA,aAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,YAAA,CAAA,IAAA,EAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,QAAA,CAAA,KAAA,CAAA,YAAA;AACA;AACA;AACA,OAVA,CAWA;;;AACA,UAAA,GAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,aAAA,EAAA;AACA,aAAA,aAAA,CAAA,CAAA,EAAA,OAAA,GAAA,KAAA,CADA,CAEA;;AACA,aAAA,YAAA,CAAA,IAAA,EAAA,IAAA,CAAA,KAAA,aAAA,CAAA,CAAA,CAAA,EAHA,CAIA;;AACA,QAAA,GAAA,CAAA,KAAA,aAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAA,CAAA;AACA,OAnBA,CAqBA;;;AACA,UAAA,SAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,QAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,GAAA,CAAA,KAAA,QAAA,CAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,EAAA;AACA,UAAA,SAAA,CAAA,IAAA,CAAA,KAAA,QAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA,WAAA,QAAA,GAAA,SAAA,CA5BA,CA6BA;;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,eAAA,GAAA,EAAA,CA/BA,CAgCA;;AACA,WAAA,oBAAA,CAAA,IAAA;AAGA,KAtkBA;AAukBA,IAAA,MAvkBA,kBAukBA,IAvkBA,EAukBA;AACA;AAEA,UAAA,KAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,YAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,GAAA,GAAA,KAAA,YAAA,CAAA,IAAA,EAAA,CAAA,CAAA;;AACA,YAAA,GAAA,CAAA,OAAA,EAAA;AACA,UAAA,GAAA,CAAA,OAAA,GAAA,KAAA;AACA,eAAA,QAAA,CAAA,IAAA,CAAA,GAAA;AACA,SAHA,MAGA;AACA,UAAA,KAAA,CAAA,IAAA,CAAA,GAAA;AACA;AACA,OAZA,CAaA;;;AACA,WAAA,YAAA,CAAA,IAAA,IAAA,KAAA,CAdA,CAeA;;AACA,WAAA,oBAAA,CAAA,IAAA;AAEA,KAzlBA;;AA0lBA;;;;AAIA,IAAA,oBA9lBA,gCA8lBA,IA9lBA,EA8lBA;AAAA;;AAEA,UAAA,IAAA,GAAA,KAAA,YAAA,CAAA,aAAA,CAAA,UAAA;AACA,UAAA,KAAA,GAAA,KAAA,YAAA;AAEA,UAAA,KAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AACA,MAAA,KAAA,CAAA,KAAA,GAAA,KAAA;;AAEA,UAAA,KAAA,CAAA,IAAA,CAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,aAAA,aAAA,CAAA,IAAA,IAAA,EAAA;AACA,aAAA,cAAA,CAAA,IAAA,IAAA,EAAA;AACA,YAAA,IAAA,GAAA,EAAA;AACA,YAAA,IAAA,GAAA,EAAA;AACA,aAAA,cAAA,CAAA,IAAA,EAAA,IAAA;AACA;AACA,OAhBA,CAkBA;;;AACA,MAAA,UAAA,CAAA,KAAA,IAAA,CAAA,eAAA,EAAA,KAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,CAAA,OAAA,EAAA;AACA;AACA,cAAA,GAAA,CAAA,MAAA,CAAA,IAAA,EAAA,MAAA,IAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA,IAAA,GAAA,aAAA;;AACA,YAAA,MAAA,CAAA,aAAA,CAAA,IAAA,IAAA,EAAA;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,IAAA,IAAA,EAAA;AACA,gBAAA,MAAA,GAAA,EAAA;AACA,gBAAA,KAAA,GAAA,EAAA;;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,KAAA;;AACA;AACA,WARA,MAQA;AACA,gBAAA,GAAA,GAAA,EAAA;;AACA,iBAAA,IAAA,CAAA,IAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA;AACA,cAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,IAAA,EAAA,CAAA,EAAA,EAAA;AACA;;AACA,YAAA,MAAA,CAAA,aAAA,CAAA,IAAA,IAAA,GAAA;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,IAAA,IAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAEA,gBAAA,MAAA,GAAA,EAAA;AACA,gBAAA,MAAA,GAAA,EAAA;;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,MAAA,EAVA,CAYA;;;AACA,YAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA,YAAA,EAAA,IAAA,EAAA,KAAA;AACA;AACA,SAzBA,MAyBA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,OAAA;;AACA;AACA;AACA,OA9BA;AAgCA,KAjpBA;AAmpBA,IAAA,MAnpBA,oBAmpBA;AACA;AACA,WAAA,QAAA;AAEA,WAAA,KAAA,CAAA,OAAA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,KAzpBA;AA2pBA,IAAA,QA3pBA,oBA2pBA,IA3pBA,EA2pBA,UA3pBA,EA2pBA;AACA,WAAA,OAAA,GAAA,UAAA;AACA,KA7pBA;AA+pBA,IAAA,YA/pBA,wBA+pBA,CA/pBA,EA+pBA;AACA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,CAAA,EAAA;AACA;AACA,aAAA,SAAA,GAAA,KAAA;AACA,OAHA,MAGA;AACA,aAAA,SAAA,GAAA,IAAA;AACA;AACA,KAtqBA;AAwqBA,IAAA,QAxqBA,sBAwqBA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,eAAA,GAAA,EAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,KA5qBA;;AA6qBA;;;AAGA,IAAA,gBAhrBA,4BAgrBA,CAhrBA,EAgrBA;AACA,UAAA,OAAA,GAAA,CAAA,CAAA,MAAA,CAAA,OAAA;AACA,UAAA,IAAA,GAAA,CAAA,CAAA,MAAA,CAAA,EAAA;;AACA,UAAA,OAAA,EAAA;AACA;AACA,aAAA,IAAA,CAAA,IAAA,KAAA,YAAA,CAAA,IAAA,CAAA,EAAA;AACA,eAAA,YAAA,CAAA,IAAA,EAAA,CAAA,EAAA,OAAA,GAAA,IAAA;AACA,eAAA,KAAA,CAAA,IAAA,EAAA,CAAA,EAAA,OAAA,GAAA,IAAA;AACA;AACA,OANA,MAMA;AACA,aAAA,IAAA,CAAA,IAAA,KAAA,YAAA,CAAA,IAAA,CAAA,EAAA;AACA,eAAA,YAAA,CAAA,IAAA,EAAA,CAAA,EAAA,OAAA,GAAA,KAAA;AACA,eAAA,KAAA,CAAA,IAAA,EAAA,CAAA,EAAA,OAAA,GAAA,KAAA;AAEA;AACA;AACA;AAhsBA;AApFA,CAAA","sourcesContent":["<template>\r\n\r\n  <a-modal\r\n    :title=\"title\"\r\n    :width=\"1000\"\r\n    :visible=\"visible\"\r\n    :confirmLoading=\"confirmLoading\"\r\n    @ok=\"confirm\"\r\n    @cancel=\"cancel\"\r\n    destroyOnClose\r\n    :okText=\"okText\"\r\n    cancelText=\"取消\">\r\n    <div id=\"pic\" style=\"overflow: auto;\" :style=\"{height: scrHeight}\">\r\n\r\n      <a-layout id=\"components-layout-demo-top-side-2\">\r\n        <a-layout>\r\n          <div v-if=\"endType\">\r\n            <center><h3 style=\"color: red; font-weight: 600; font-size: 20px\">下一节点为结束节点</h3></center>\r\n          </div>\r\n\r\n          <a-layout-sider v-if=\"!endType\" width=\"200\" style=\"background: #fff\">\r\n            <a-menu\r\n              mode=\"inline\"\r\n              :defaultSelectedKeys=\"['1']\"\r\n              :defaultOpenKeys=\"['sub1']\"\r\n              :style=\"{ height: '100%', borderRight: 80 }\">\r\n              <!--...................................................................................................-->\r\n              <a-sub-menu key=\"sub1\">\r\n\r\n                <span slot=\"title\"><a-icon type=\"user\"/>可追加环节</span>\r\n\r\n                <a-menu-item :key=\"item.oaProcActinst.actId\" v-for=\"item in nextsActs\" @click=\"clickAct(item)\">\r\n                  {{item.oaProcActinst.actName}}\r\n                </a-menu-item>\r\n\r\n              </a-sub-menu>\r\n\r\n              <!--...................................................................................................-->\r\n            </a-menu>\r\n          </a-layout-sider>\r\n          <!--.........................//////////////////////////////////////////..........................................................................-->\r\n          <a-layout v-if=\"!endType\" style=\"padding: 2px 2px 2px\">\r\n\r\n            <!--<a-breadcrumb style=\"margin: 16px 0\">-->\r\n            <!--<div>-->\r\n            <!--&nbsp;&nbsp;&nbsp;&nbsp;-->\r\n            <!--<a-radio-group name=\"radioGroup\" @change=\"changeChoice\" :defaultValue=\"1\">-->\r\n            <!--<a-radio :value=\"1\">不限时间</a-radio>-->\r\n            <!--<a-radio :value=\"2\">限制时间</a-radio>-->\r\n            <!--</a-radio-group>-->\r\n            <!--&nbsp;&nbsp;&nbsp;&nbsp; 期望任务办理结束时间:-->\r\n            <!--<a-date-picker @change=\"onChange\" showTime format=\"YYYY-MM-DD HH:mm:ss\"-->\r\n            <!--placeholder=\"请选择结束时间\"/>-->\r\n            <!--</div>-->\r\n            <!--</a-breadcrumb>-->\r\n            <a-layout-content\r\n              :style=\"{ background: '#fff', padding: '10px', margin: 0, minHeight: '280px' }\">\r\n              <!--********************************* 下一办理人选用户(区分：普通/并行/包容网关) [仅记录选择记录] ********************************-->\r\n              <!--可多选 1 数据分类(单选/多选/部门选) -->\r\n              <!--1 普通-->\r\n              <div v-if=\"!isDept\">\r\n                <div v-if=\"!isMul\">\r\n                  <a-table\r\n                    ref=\"table\"\r\n                    size=\"middle\"\r\n                    bordered\r\n                    :pagination=\"false\"\r\n                    :customRow=\"setRowRadio\"\r\n                    rowKey=\"uid\"\r\n                    :columns=\"columns\"\r\n                    :dataSource=\"dataSource\"\r\n                    :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: handleTableChangeMy,type:'radio'}\"\r\n                  >\r\n                  </a-table>\r\n                </div>\r\n                <div v-if=\"isMul\">\r\n                  <a-table\r\n                    ref=\"table\"\r\n                    size=\"middle\"\r\n                    bordered\r\n                    :pagination=\"false\"\r\n                    rowKey=\"uid\"\r\n                    disabled\r\n                    :customRow=\"setRowCheck\"\r\n                    :columns=\"columns\"\r\n                    :dataSource=\"dataSource\"\r\n                    :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: handleTableChangeMy,type:'checkbox'}\"\r\n                  >\r\n                    <!--onSelectChange-->\r\n                  </a-table>\r\n                </div>\r\n              </div>\r\n\r\n              <!--选部门-->\r\n              <div class=\"box\" v-if=\"isDept\">\r\n                <!--左侧部门-->\r\n                <div class=\"left\">\r\n                  <a-table\r\n                    ref=\"table\"\r\n                    size=\"small\"\r\n                    bordered\r\n                    rowKey=\"id\"\r\n                    rowSelection\r\n                    :loading=\"loading\"\r\n                    :columns=\"columns2\"\r\n                    :customRow=\"departClickCheck\"\r\n                    :dataSource=\"mockData\"\r\n                    :pagination=\"ipagination\"\r\n                    :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange}\"\r\n                    @change=\"handleTableChange\"\r\n                  >\r\n                  </a-table>\r\n                </div>\r\n\r\n                <!--右侧选择-->\r\n                <div class=\"right\">\r\n                  <div v-for=\"item in deptsList\">\r\n                    <!--左右布局-->\r\n                    <div class=\"box1\">\r\n                      <div class=\"rightLeft\" style=\"margin-top: 20px;\">\r\n                        <a-button @click=\"toRight(item)\">\r\n                          <a-icon type=\"right\"/>\r\n                          添加到{{item}}\r\n                        </a-button>\r\n                        <a-button @click=\"toLeft(item)\">\r\n                          <a-icon type=\"left\"/>\r\n                          从{{item}}删除\r\n                        </a-button>\r\n                      </div>\r\n\r\n                      <div style=\"width: 100%;display: flex\">\r\n                        <div class=\"rightRight\">\r\n\r\n                          <template>\r\n                            <h4 color=\"red\">{{item}}部门</h4>\r\n                            <a-checkbox :id=\"item\" @change=\"onCheckAllChange\"></a-checkbox>\r\n\r\n                            <a-row v-for=\"i in departSelect[item]\">\r\n                              <a-col :span=\"100\">\r\n                                <a-checkbox :ref=\"item\" :key=\"i.id\" :value=\"i.id+'-'+item\" @change=\"onChangeCheck\">\r\n                                  {{i.departName}}\r\n                                </a-checkbox>\r\n                              </a-col>\r\n                            </a-row>\r\n                          </template>\r\n                        </div>\r\n\r\n                        <div class=\"rightRight1\">\r\n                          <template>\r\n                            <h4 color=\"red\">{{item}}部门用户</h4>\r\n                            <!--<a-button type=\"primary\" size=\"small\" @click=\"queryUser(item)\">【{{item}}】人员</a-button>-->\r\n                            <a-row v-for=\"i in departUsersMsg[item]\">\r\n                              <a-col :span=\"100\">\r\n                                {{i.username}}\r\n                              </a-col>\r\n                            </a-row>\r\n                          </template>\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n            </a-layout-content>\r\n          </a-layout>\r\n        </a-layout>\r\n      </a-layout>\r\n\r\n      <a-modal\r\n        title=\"请确认所选择的节点\"\r\n        :width=\"600\"\r\n        :visible=\"visible2\"\r\n        :confirmLoading=\"confirmLoading\"\r\n        @ok=\"confirm2\"\r\n        @cancel=\"cancel2\"\r\n        destroyOnClose\r\n        okText=\"确认\"\r\n        cancelText=\"继续选择\">\r\n\r\n        <!--:customRow=\"departClickCheck\"-->\r\n        <!--:pagination=\"ipagination\"-->\r\n\r\n        <a-table\r\n          ref=\"table\"\r\n          size=\"small\"\r\n          bordered\r\n          rowKey=\"id\"\r\n          rowSelection\r\n          :loading=\"loading\"\r\n          :customRow=\"customRowMy\"\r\n          :columns=\"columns3\"\r\n          :dataSource=\"actChoice\"\r\n          :pagination=\"false\"\r\n          :rowSelection=\"{selectedRowKeys: selectedRowKeys2,selectedRows:selectedRows2, onChange: onSelectChangeMy2}\"\r\n          @change=\"handleTableChange\"\r\n        >\r\n        </a-table>\r\n\r\n\r\n      </a-modal>\r\n    </div>\r\n\r\n  </a-modal>\r\n\r\n</template>\r\n\r\n<script>\r\n  import {getAction, postAction} from \"../../../api/manage\";\r\n  import {JeecgListMixin} from '@/mixins/JeecgListMixin'\r\n  import DictItemList from \"../../system/DictItemList\";\r\n\r\n\r\n  export default {\r\n    name: \"nextUsers\",\r\n    mixins: [JeecgListMixin],\r\n    components: {DictItemList},\r\n    data() {\r\n      return {\r\n        scrHeight: window.innerHeight - 300 + 'px',\r\n        title: '追加用户',\r\n        okText: '确定',\r\n        //控制组件数据可见\r\n        isMul: false, //下一任务是单选/多选\r\n        isDept: false,\r\n        endType: false,//是否是结束节点\r\n        nextsActs: [],\r\n        endTime: '',\r\n        //穿梭框数据\r\n        mockData: [],\r\n        //部门信息\r\n        deptsList: [],\r\n        //部门选择集合\r\n        departSelect: {},\r\n        //部门对应用户id\r\n        departUsersId: {},\r\n        departUsersMsg: {},\r\n        //环节分类，从属于 排他，并行，包容网关\r\n        gateWayTypeSelect: {\r\n          parallel: {},\r\n          inclusive: {},\r\n          normal: {}//有的话只会存在一个\r\n        },\r\n        typeCount: {\r\n          normal: [],\r\n          inclusive: [],\r\n          parallel: [],\r\n        },\r\n        preCilck: null,\r\n        //当前点击的节点\r\n        currentClick: null,\r\n        timeCheck: false,//是否限制时间\r\n        columns: [\r\n\r\n          {\r\n            title: '用户姓名',\r\n            align: \"center\",\r\n            dataIndex: 'uname'\r\n          }, {\r\n            title: '所在部门',\r\n            align: \"center\",\r\n            dataIndex: 'dname'\r\n          },\r\n          {\r\n            title: '状态',\r\n            align: \"center\",\r\n            dataIndex: 'status'\r\n          },\r\n        ],\r\n        columns2: [\r\n          {\r\n            title: '部门名称',\r\n            align: \"center\",\r\n            dataIndex: 'departName'\r\n          }\r\n        ],\r\n        columns3: [\r\n          {\r\n            title: '部门名称',\r\n            align: \"center\",\r\n            dataIndex: 'name'\r\n          }\r\n        ],\r\n        dataSource: [],\r\n        visible: false,\r\n        visible2: false,\r\n        confirmLoading: false,\r\n        actChoice: [],\r\n        selectedRowKeys2: [],\r\n        selectedRows2: [],\r\n\r\n        urls: {\r\n          departUsetQuery: '/oaBus/taskInAct/deptUsersQuery'\r\n        }\r\n      }\r\n    },\r\n    computed: {},\r\n    methods: {\r\n      statusJudge() {\r\n      },\r\n      //进页面 初始数据\r\n      showNextUsers(nextsActs) {\r\n\r\n        console.log('--->>>>', JSON.stringify(nextsActs))\r\n\r\n\r\n        this.nextsActs = nextsActs\r\n        //统计数量\r\n        for (let i of nextsActs) {\r\n          let inclusiveGateway = i.actMsg.inclusiveGateway\r\n          let parallelGateway = i.actMsg.parallelGateway\r\n          if (inclusiveGateway) {\r\n            this.typeCount.inclusive.push(i)\r\n          } else if (parallelGateway) {\r\n            this.typeCount.parallel.push(i)\r\n          } else {\r\n            this.typeCount.normal.push(i)\r\n          }\r\n          //记录节点\r\n          this.showPreClick(i, false, false, true)\r\n        }\r\n        //---------默认选择 第一个环节----------\r\n        this.clickAct(this.nextsActs[0]);\r\n\r\n        this.visible = true\r\n      },\r\n      handleTableChangeMy(rowKeys, rows) {\r\n        this.onSelectChange(rowKeys, rows)\r\n        //并记录用户\r\n        this.showPreClick(this.currentClick, false, true, false)\r\n      },\r\n      onSelectChangeMy2(rowKeys, rows) {\r\n        this.selectedRowKeys2 = rowKeys\r\n        this.selectedRows2 = rows\r\n      },\r\n      //点击部门行 选中\r\n      departClickCheck(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let rowkeys = this.selectedRowKeys;\r\n              let selectionRows = this.selectionRows;\r\n              if (rowkeys.length > 0 && rowkeys.includes(res.id)) {\r\n                rowkeys.splice(rowkeys.indexOf(res.id), 1);\r\n                selectionRows.splice(rowkeys.indexOf(res), 1);\r\n              } else {\r\n                rowkeys.push(res.id);\r\n                selectionRows.push(res);\r\n              }\r\n              this.selectedRowKeys = rowkeys;\r\n              this.selectionRows = selectionRows;\r\n\r\n            }\r\n          }\r\n        }\r\n      },\r\n      //点击单选行 选中\r\n      setRowRadio(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let keys = [];\r\n              keys.push(res.uid);\r\n              this.selectedRowKeys = keys;\r\n\r\n              //记录用户选择\r\n              this.showPreClick(this.currentClick, false, true, false)\r\n            }\r\n          }\r\n        }\r\n      },\r\n      //点击复选行 选中\r\n      setRowCheck(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let rowkeys = this.selectedRowKeys;\r\n              if (rowkeys.length > 0 && rowkeys.includes(res.uid)) {\r\n                rowkeys.splice(rowkeys.indexOf(res.uid), 1);\r\n              } else {\r\n                rowkeys.push(res.uid);\r\n              }\r\n              this.selectedRowKeys = rowkeys;\r\n\r\n              //记录用户选择\r\n              this.showPreClick(this.currentClick, false, true, false)\r\n            }\r\n          }\r\n        }\r\n      },\r\n      customRowMy(res) {\r\n        return {\r\n          on: {\r\n            click: () => {\r\n              let rowkeys = this.selectedRowKeys2;\r\n              if (rowkeys.length > 0 && rowkeys.includes(res.id)) {\r\n                rowkeys.splice(rowkeys.indexOf(res.id), 1);\r\n              } else {\r\n                rowkeys.push(res.id);\r\n              }\r\n              this.selectedRowKeys2 = rowkeys;\r\n            }\r\n          }\r\n        }\r\n      },\r\n      //部门选\r\n      onChangeCheck(item) {\r\n        var id = (item.target.value).split('-')[0]\r\n        var type = (item.target.value).split('-')[1]\r\n        //修改数据属性(修改选中状态用来向左边传)\r\n        for (var i in  this.departSelect[type]) {\r\n          if (id == this.departSelect[type][i].id) {\r\n            this.departSelect[type][i].checked = true\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       * 记录本次点击\r\n       * 包容，并行：第一次点击：仅记录初始信息 每勾选/变更一次用户 就更新本节点选择\r\n       * 普通[不记录暂时]：每次都是新数据\r\n       * come 标识部门选择的来源(或者change事件过来的) false true\r\n       */\r\n      showPreClick(item, isMock, isChange, isShowNext) {\r\n\r\n\r\n        //TODO 仅标识 @1.1 ###################################### 各种属性判断 #############################################\r\n        //记录当前点击的节点 用于属性填充\r\n        this.currentClick = item\r\n        //是否是多选\r\n        this.isMul = item.actMsg.allowMulti && item.oaProcActinst.multAssignee\r\n        //是否选部门\r\n        this.isDept = (item.oaProcActinst.userOrRole) == 'dept'\r\n\r\n\r\n        //TODO 仅标识 @1.2 ############################################  数据源 ###########################################\r\n        if (!this.isDept) {\r\n          this.dataSource = item.nextUsers\r\n        }\r\n\r\n        //节点性质(普通节点还是并行/包容)\r\n        let isNormal = true\r\n\r\n\r\n        //判断是否是已经记录过\r\n        let haveRecord = false\r\n        let isParallel = item.actMsg.parallelGateway\r\n        let isInclusive = item.actMsg.inclusiveGateway\r\n\r\n        //如果不是并行/包容就 不是普通性质\r\n        if (isParallel || isInclusive) isNormal = false\r\n\r\n        // if (!isNormal) {//不是普通节点 判断是否记录过\r\n        let act = this.gateWayTypeSelect.inclusive[item.actMsg.id]\r\n        let act1 = this.gateWayTypeSelect.parallel[item.actMsg.id]\r\n        let act2 = this.gateWayTypeSelect.normal[item.actMsg.id]\r\n        if (act != undefined || act1 != undefined || act2 != undefined) {\r\n          haveRecord = true\r\n        }\r\n        // }\r\n\r\n\r\n        //TODO 仅标识  @2 ############################################ 数据回显/初始化 ###################################\r\n\r\n        //判断类型是并行还是包容//并记录选择的内容\r\n        let select = {}\r\n        //记录节点属性\r\n        select['activity'] = item\r\n        if (this.isDept) {\r\n          this.selectedRowKeys = []\r\n          this.selectionRows = []\r\n          //部门\r\n          if (haveRecord && !isNormal) {\r\n            let current = null\r\n            //使用已经记录的数据\r\n            if (isMock) {//是穿梭框过来的用选择的数据覆盖记录数据\r\n              // this.deptsList = item.oaProcActinst.deptsList\r\n              select['deptsList'] = this.deptsList\r\n              select['departSelect'] = this.departSelect\r\n              select['departUsersId'] = this.departUsersId\r\n              select['departUsersMsg'] = this.departUsersMsg\r\n              current = select\r\n            } else {//用记录的数据覆盖 显示数据\r\n              //是并行里的还是 包容里的\r\n\r\n              if (isParallel) {\r\n                current = this.gateWayTypeSelect.parallel[item.actMsg.id]\r\n              }\r\n              if (isInclusive) {\r\n                current = this.gateWayTypeSelect.inclusive[item.actMsg.id]\r\n              }\r\n              select = current\r\n              this.deptsList = current.deptsList\r\n              this.departSelect = current.departSelect\r\n              this.departUsersId = current.departUsersId\r\n              this.departUsersMsg = current.departUsersMsg\r\n            }\r\n\r\n            this.mockData = []\r\n\r\n            if (current != undefined && current != null) {\r\n              let ids = []\r\n              for (let k in current.departSelect) {\r\n                for (let u in current.departSelect[k]) {\r\n                  ids.push(current.departSelect[k][u].id)\r\n                }\r\n              }\r\n              for (let i in item.nextUsers) {\r\n                let id = item.nextUsers[i].id\r\n                if (ids.indexOf(id) == -1) {\r\n                  this.mockData.push(item.nextUsers[i])\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if ((isNormal && !isMock) || !haveRecord) {//是普通性质，或者初次点击进入\r\n            this.selectionRows = []\r\n            this.selectedRowKeys = []\r\n            this.deptsList = item.oaProcActinst.deptsList\r\n            select['deptsList'] = item.oaProcActinst.deptsList\r\n            select['departSelect'] = {}\r\n            select['departUsersId'] = {}\r\n            select['departUsersMsg'] = {}\r\n            for (var x in  select.deptsList) {\r\n              //TODO 仅标识*******备选信息用于页面展示\r\n              this.departSelect[this.deptsList [x]] = []\r\n              this.departUsersId[this.deptsList [x]] = []\r\n              this.departUsersMsg[this.deptsList [x]] = []\r\n              //TODO 仅标识******** 记录节点属性用于回显(包容/并行)\r\n              //构造备选集合\r\n              select['departSelect'][select.deptsList [x]] = []\r\n              //部门选择用户集合构造\r\n              select['departUsersId'][select.deptsList [x]] = []\r\n              //备选用户完整信息\r\n              select['departUsersMsg'][select.deptsList [x]] = []\r\n            }\r\n            this.mockData = item.nextUsers\r\n          }\r\n\r\n        } else {//选人的\r\n\r\n\r\n          if (isChange) {//用选择的数据覆盖 记录数据\r\n            select.selectedRowKeys = this.selectedRowKeys\r\n            select.selectionRows = this.selectionRows\r\n          }\r\n          if (haveRecord && !isNormal) {\r\n            //已经记录并且是 (包容/并行)性质 用记录的覆盖\r\n            //是点击进来的还是 通过change事件进来的\r\n            // isChange\r\n            if (!isChange) {//用记录的数据回显 显示数据\r\n              let current = null\r\n              if (isParallel) {\r\n                current = this.gateWayTypeSelect.parallel[item.actMsg.id]\r\n              }\r\n              if (isInclusive) {\r\n                current = this.gateWayTypeSelect.inclusive[item.actMsg.id]\r\n              }\r\n              select = current\r\n              if (current != null && current != undefined) {\r\n                this.selectedRowKeys = current.selectedRowKeys\r\n                this.selectionRows = current.selectionRows\r\n              }\r\n            }\r\n          }\r\n\r\n          //默认选中第一个\r\n          if (this.dataSource.length > 0 && !isShowNext && !isChange) {\r\n            if (this.selectedRowKeys.length == 0 || isNormal) {\r\n              let defaultSelected = []\r\n              defaultSelected.push(this.dataSource[0].uid)\r\n              this.selectedRowKeys = defaultSelected\r\n              select.selectedRowKeys = this.selectedRowKeys\r\n              select.selectionRows = this.selectionRows\r\n            }\r\n          }\r\n          if ((isNormal && !isChange) || !haveRecord) {//普通节点 或者是 初次点击\r\n\r\n            //没有选的情况下默认选中表格第一个\r\n            // this.selectedRowKeys = []\r\n            // this.selectionRows = []\r\n            select.selectedRowKeys = this.selectedRowKeys\r\n            select.selectionRows = this.selectionRows\r\n          }\r\n        }\r\n\r\n        if (isInclusive) {\r\n          this.gateWayTypeSelect.inclusive[item.actMsg.id] = select\r\n        }\r\n        if (isParallel) {\r\n          this.gateWayTypeSelect.parallel[item.actMsg.id] = select\r\n        }\r\n        if (isNormal) {\r\n          this.gateWayTypeSelect.normal = {}\r\n          this.gateWayTypeSelect.normal[item.actMsg.id] = select\r\n        }\r\n\r\n        // ////console.log('----------------网关记录：：：', JSON.stringify(this.gateWayTypeSelect))\r\n      },\r\n      //点击某一节点---选择节点相关信息\r\n      clickAct(item) {\r\n\r\n        /**\r\n         *  (包容/并行网关)展示上一节点的选择信息\r\n         */\r\n        this.showPreClick(item, false, false, false)\r\n\r\n      },\r\n      confirm() {\r\n\r\n        // //时间校验\r\n        // this.timeCheckMethod()\r\n        //校验并行与包容\r\n        let palllen = this.typeCount.parallel.length\r\n        let ialllen = this.typeCount.inclusive.length\r\n        if (palllen == 0 && ialllen == 0) {//非包容/并行\r\n          this.singleType()\r\n        } else {//包容/并行\r\n          this.gateWayCheck()\r\n          // this.moreThanOneType()\r\n        }\r\n      },\r\n      //并行或包容\r\n      moreThanOneType() {\r\n\r\n        this.$emit('confirmNextUsersMore', this.gateWayTypeSelect, this.endTime)\r\n      },\r\n      //时间校验\r\n      timeCheckMethod() {\r\n        if (this.timeCheck) {\r\n          if (this.endTime == '') {\r\n            this.$message.error('请选择办理结束时间')\r\n            return\r\n          }\r\n          if (new Date() > new Date(this.endTime)) {\r\n            this.$message.error('办理结束时间不得小于当前时间')\r\n            return\r\n          }\r\n        }\r\n      },\r\n      confirm2() {\r\n        // console.log('=====================LLLLLLLLLLLLLLLL:::', this.selectedRowKeys2)\r\n\r\n        let isPass = this.moreThanOneUserCheck();\r\n        if (isPass) {\r\n          this.moreThanOneType()\r\n          //关闭\r\n          this.visible2 = false\r\n          this.visible = false\r\n        }\r\n      },\r\n      cancel2() {\r\n        this.visible2 = false\r\n      },\r\n      recordChoice(acts, choices) {\r\n\r\n        for (let i in choices) {\r\n          let act = choices[i]\r\n          let isDept = act.activity.oaProcActinst.userOrRole == 'dept'\r\n          if (isDept) {\r\n            let deptSelect = act.departSelect\r\n            for (let i in deptSelect) {\r\n              if (deptSelect[i].length > 0) {\r\n                acts.push(act.activity.actMsg)\r\n                this.selectedRowKeys2.push(act.activity.actMsg.id)\r\n                break\r\n              }\r\n            }\r\n          } else {\r\n            if (act.selectedRowKeys.length > 0) {\r\n              acts.push(act.activity.actMsg)\r\n              this.selectedRowKeys2.push(act.activity.actMsg.id)\r\n            }\r\n          }\r\n        }\r\n\r\n      },\r\n      //并行网关校验\r\n      parallelCheck(acts) {\r\n        let keys = []\r\n        for (let i in this.gateWayTypeSelect.parallel) {\r\n          keys.push(i)\r\n        }\r\n\r\n        for (let i in acts) {\r\n          keys.splice(keys.indexOf(acts[i].id), 1)\r\n        }\r\n\r\n        if (keys.length > 0) {\r\n          const h = this.$createElement;\r\n\r\n          let names = []\r\n          for (let i of keys) {\r\n            names.push(h('p', `${this.gateWayTypeSelect.parallel[i].activity.actMsg.name}`))\r\n          }\r\n\r\n          let content_ = h('div', {}, names)\r\n\r\n          const modal = this.$error({\r\n            title: '以下节点共属于并行网关，必须选择用户',\r\n            content: content_,\r\n          });\r\n\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      },\r\n      //包容/并行网关校验\r\n      gateWayCheck() {\r\n\r\n        let acts = []\r\n        this.selectedRowKeys2 = []\r\n        this.recordChoice(acts, this.gateWayTypeSelect.parallel)\r\n        this.recordChoice(acts, this.gateWayTypeSelect.inclusive)\r\n        this.recordChoice(acts, this.gateWayTypeSelect.normal)\r\n\r\n        this.selectedRows2 = acts\r\n\r\n        let isShow = this.parallelCheck(acts);\r\n\r\n        if (isShow) {\r\n          this.visible2 = true\r\n          this.actChoice = acts\r\n        }\r\n\r\n      },\r\n      moreThanOneUserCheck() {\r\n\r\n\r\n        for (let i in this.selectedRowKeys2) {\r\n          let act = this.selectedRows2[i]\r\n          let id = act.id\r\n          let inclusiveGateway = act.inclusiveGateway\r\n          let parallelGateway = act.parallelGateway\r\n\r\n          let currentAct = null\r\n          if (inclusiveGateway) {\r\n            currentAct = this.gateWayTypeSelect.inclusive[id]\r\n          }\r\n          if (parallelGateway) {\r\n            currentAct = this.gateWayTypeSelect.parallel[id]\r\n          }\r\n          if (!parallelGateway && !inclusiveGateway) {\r\n            currentAct = this.gateWayTypeSelect.normal[id]\r\n          }\r\n\r\n          let isDept = currentAct.activity.oaProcActinst.userOrRole == 'dept'\r\n          let name = currentAct.activity.actMsg.name\r\n\r\n          if (isDept) {\r\n            let haveUser = false\r\n            for (let i in currentAct.departUsersId) {\r\n              let uids = currentAct.departUsersId[i]\r\n              if (i.indexOf(\"主办\") >= 0) {\r\n                if (uids.length <= 0) {\r\n                  this.$message.error(name + \" 环节，主办部门必须选择用户\")\r\n                  return false\r\n                }\r\n              }\r\n              if (uids.length > 0) {\r\n                haveUser = true\r\n              }\r\n\r\n              if (!haveUser) {\r\n                this.$message.error(name + ' 环节,部门至少选择一组用户')\r\n                return false\r\n              }\r\n            }\r\n\r\n          } else {\r\n            if (currentAct.selectedRowKeys.length <= 0) {\r\n              this.$message.error(name + ' 环节未选择用户')\r\n              return false\r\n            }\r\n          }\r\n        }\r\n        //构造参数\r\n        // keys\r\n        this.constructorParams(this.selectedRowKeys2, this.gateWayTypeSelect.parallel)\r\n        this.constructorParams(this.selectedRowKeys2, this.gateWayTypeSelect.inclusive)\r\n        this.constructorParams(this.selectedRowKeys2, this.gateWayTypeSelect.normal)\r\n\r\n        // console.log('~~~~~~~~~~~~~~~~~~', JSON.stringify(this.gateWayTypeSelect))\r\n\r\n        return true\r\n      },\r\n      constructorParams(keys, tasks) {\r\n        //console.log('-----------keys:::', JSON.stringify(keys))\r\n        for (let k in tasks) {\r\n          if (keys.indexOf(k) < 0) {\r\n            //改变完成条件\r\n            let conditionContext = tasks[k].activity.actMsg.conditionContext\r\n            if (conditionContext != undefined && conditionContext != null) {\r\n              for (let i in conditionContext) {\r\n                conditionContext[i] = 'no-' + conditionContext[i]\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      },\r\n      //非包容/并行网关办理方式\r\n      singleType() {\r\n        var ids = []\r\n        if (this.isDept) {\r\n\r\n          let ids = []\r\n          let depMSg = {}\r\n          for (let i in this.departUsersId) {\r\n\r\n            if (i.indexOf(\"主办\") >= 0 && this.departUsersId[i].length == 0) {\r\n              this.$message.error(i + \"部门必须选择用户\")\r\n              return\r\n            }\r\n\r\n            if (this.departUsersId[i].length > 0) {\r\n              ids.push(this.departUsersId[i])\r\n              depMSg[i] = this.departUsersId[i]\r\n            }\r\n          }\r\n          // ////console.log('==========部门：：：', ids, JSON.stringify(this.currentClick))\r\n          //校验\r\n          this.$emit('func', ids, this.currentClick, this.endTime, depMSg)\r\n          this.cancel()\r\n        } else if (this.endType) {\r\n          this.$emit('func', ids, this.currentClick, this.endTime)\r\n          this.cancel()\r\n        } else {\r\n          //办理人校验\r\n          if (this.selectedRowKeys.length <= 0) {\r\n            this.$message.error(\"请选择办理人\")\r\n            return\r\n          }\r\n          ids = this.selectedRowKeys\r\n\r\n          // ////console.log('------普通：' + ids, JSON.stringify(this.currentClick))\r\n          //办理流程\r\n          this.$emit('func', ids, this.currentClick, this.endTime)\r\n          this.cancel()\r\n        }\r\n      },\r\n      //穿梭方法实现\r\n      toRight: function (item) {\r\n        //从部门列表中移除--添加到对应的list中\r\n        //1 主办部门只能有一个\r\n\r\n        if (item.indexOf(\"主办\") >= 0) {\r\n          //判断是否已经有元素了\r\n          if (((this.departSelect[item].length == 0 && this.selectionRows.length > 1)) || (this.departSelect[item].length > 0)) {\r\n            this.$message.error(\"主办部门只允许有一个\")\r\n            return\r\n          }\r\n        }\r\n        //2 添加到右边--移除左边\r\n        var del = {}\r\n        for (var i in this.selectionRows) {\r\n          this.selectionRows[i].checked = false\r\n          //右边\r\n          this.departSelect[item].push(this.selectionRows[i])\r\n          //移除元素\r\n          del[this.selectionRows[i].id] = 1\r\n        }\r\n\r\n        //移除元素(采用重新赋值的方式)\r\n        var mockData2 = []\r\n        for (var j = 0; j < this.mockData.length; j++) {\r\n          if (del[this.mockData[j].id] != 1) {\r\n            mockData2.push(this.mockData[j])\r\n          }\r\n        }\r\n        this.mockData = mockData2\r\n        //清空所选\r\n        this.selectionRows = []\r\n        this.selectedRowKeys = []\r\n        // 更新用户显示\r\n        this.currentDeptUserQuery(item)\r\n\r\n\r\n      },\r\n      toLeft(item) {\r\n        //添加到部门列表中--从list中移除\r\n\r\n        var right = []\r\n        for (var i in this.departSelect[item]) {\r\n          var itt = this.departSelect[item][i]\r\n          if (itt.checked) {\r\n            itt.checked = false\r\n            this.mockData.push(itt)\r\n          } else {\r\n            right.push(itt)\r\n          }\r\n        }\r\n        //改变右边\r\n        this.departSelect[item] = right\r\n        // 更新用户显示\r\n        this.currentDeptUserQuery(item)\r\n\r\n      },\r\n      /**\r\n       * 选中部门的用户查询\r\n       * @param item\r\n       */\r\n      currentDeptUserQuery(item) {\r\n\r\n        var role = this.currentClick.oaProcActinst.candidates\r\n        var depts = this.departSelect\r\n\r\n        var param = {}\r\n        param.role = role\r\n        param.depts = depts\r\n\r\n        if (depts[item].length == 0) {\r\n          this.departUsersId[item] = []\r\n          this.departUsersMsg[item] = []\r\n          let keys = []\r\n          let rows = []\r\n          this.onSelectChange(keys, rows)\r\n          return\r\n        }\r\n\r\n        //查询部门对应的用户id 分组\r\n        postAction(this.urls.departUsetQuery, param).then(res => {\r\n          if (res.success) {\r\n            // ////console.log('-------------->>>', JSON.stringify(res.result[item]))\r\n            if (res.result[item].length == 0) {\r\n              this.$message.error('所选' + item + '部门没有对应角色的用户')\r\n              this.departUsersId[item] = []\r\n              this.departUsersMsg[item] = []\r\n              let keys = []\r\n              let rows = []\r\n              this.onSelectChange(keys, rows)\r\n              return\r\n            } else {\r\n              let ids = []\r\n              for (let i in res.result[item]) {\r\n                ids.push(res.result[item][i].id)\r\n              }\r\n              this.departUsersId[item] = ids\r\n              this.departUsersMsg[item] = res.result[item]\r\n\r\n              let keys = []\r\n              let rows = []\r\n              this.onSelectChange(keys, rows)\r\n\r\n              //记录用户选择\r\n              this.showPreClick(this.currentClick, true, false)\r\n            }\r\n          } else {\r\n            this.$message.error(res.message)\r\n            return\r\n          }\r\n        })\r\n\r\n      }\r\n      ,\r\n      cancel() {\r\n        //初始数据\r\n        this.dataInit()\r\n\r\n        this.$emit('close');\r\n        this.visible = false;\r\n      }\r\n      ,\r\n      onChange(date, dateString) {\r\n        this.endTime = dateString\r\n      }\r\n      ,\r\n      changeChoice(e) {\r\n        if (e.target.value == 1) {\r\n          //不限时间\r\n          this.timeCheck = false\r\n        } else {\r\n          this.timeCheck = true\r\n        }\r\n      }\r\n      ,\r\n      dataInit() {\r\n        this.selectionRows = []\r\n        this.selectedRowKeys = []\r\n        this.endTime = ''\r\n      },\r\n      /**\r\n       * 全选/不选\r\n       */\r\n      onCheckAllChange(e) {\r\n        let checked = e.target.checked\r\n        let type = e.target.id\r\n        if (checked) {\r\n          //修改数据属性\r\n          for (var i in  this.departSelect[type]) {\r\n            this.departSelect[type][i].checked = true\r\n            this.$refs[type][i].checked = true\r\n          }\r\n        } else {\r\n          for (var i in  this.departSelect[type]) {\r\n            this.departSelect[type][i].checked = false\r\n            this.$refs[type][i].checked = false\r\n\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n  }\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  .box {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n\r\n    .left {\r\n      width: 30%;\r\n    }\r\n\r\n    .right {\r\n      width: 69%;\r\n      height: 400px;\r\n      /*background: #dddddd;*/\r\n      overflow-y: scroll;\r\n\r\n\r\n      .box1 {\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: flex-start;\r\n        justify-content: space-between;\r\n        /*background: darkcyan;*/\r\n\r\n        .rightRight {\r\n          /*width: 90%;*/\r\n          width: 50%;\r\n          height: 120px;\r\n          /*background: #fff;*/\r\n          margin-left: 150px;\r\n          margin-right: 1px;\r\n          margin-top: 12px;\r\n          overflow-y: scroll;\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    .rightRight1 {\r\n      /*width: 90%;*/\r\n      width: 50%;\r\n      height: 120px;\r\n      /*background: #fff;*/\r\n      margin-left: 1px;\r\n      margin-right: 10px;\r\n      margin-top: 10px;\r\n      overflow-y: scroll;\r\n    }\r\n\r\n\r\n    .rightLeft {\r\n      width: 5%;\r\n    }\r\n\r\n\r\n  }\r\n</style>"],"sourceRoot":"src/views/mytask/modules"}]}