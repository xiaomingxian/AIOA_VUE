{"remainingRequest":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\table\\StandardTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\table\\StandardTable.vue","mtime":1568535214000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883000},{"path":"D:\\project\\workspaceideaIU\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1568345696000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:\\\\project\\\\workspaceideaIU\\\\jeecg-boot\\\\ant-design-vue-jeecg\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"StandardTable\",\n  // props: ['bordered', 'loading', 'columns', 'data', 'rowKey', 'pagination', 'selectedRows'],\n  props: {\n    /**\n     * 数据加载函数，返回值必须是 Promise\n     * 默认情况下必须传递 data 参数；\n     *    如果使用本地数据渲染表格，业务代码中将获取本地数据包装为 Promise 即可。\n     *\n     * currentData 用于向外暴露表格当前渲染的数据，\n     * 业务开发中也可以直接修改 currentData，从而重新渲染表格（仅推荐用于客户端排序、数据过滤等场景）\n     */\n    data: {\n      type: Function,\n      required: true\n    },\n    dataSource: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n\n    /*      pagination: {\n            type: Object,\n            default () {\n              return {}\n            }\n          },*/\n    pageSize: {\n      type: Number,\n      default: 10\n    },\n    pageNum: {\n      type: Number,\n      default: 1\n    },\n    pageSizeOptions: {\n      type: Array,\n      default: function _default() {\n        return ['10', '20', '30', '40', '50'];\n      }\n    },\n    responseParamsName: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * 表格大小风格，default, middle, small\n     */\n    size: {\n      type: String,\n      default: 'default'\n    },\n    rowKey: {\n      type: String,\n      default: ''\n    },\n    selectedRows: {\n      type: Array,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      needTotalList: [],\n      selectedRowKeys: [],\n      loading: true,\n      total: 0,\n      pageNumber: this.pageNum,\n      currentPageSize: this.pageSize,\n      defaultCurrent: 1,\n      sortParams: {},\n      current: [],\n      pagination: {},\n      paramsName: {}\n    };\n  },\n  created: function created() {\n    //数据请求参数配置\n    this.paramsName = Object.assign({}, {\n      pageNumber: \"pageNo\",\n      pageSize: \"pageSize\",\n      total: \"totalCount\",\n      results: \"data\",\n      sortColumns: \"sortColumns\"\n    }, this.responseParamsName);\n    this.needTotalList = this.initTotalList(this.columns); // load data\n\n    this.loadData({\n      pageNum: this.pageNumber\n    });\n  },\n  methods: {\n    updateSelect: function updateSelect(selectedRowKeys, selectedRows) {\n      this.selectedRowKeys = selectedRowKeys;\n      var list = this.needTotalList;\n      this.needTotalList = list.map(function (item) {\n        return _objectSpread({}, item, {\n          total: selectedRows.reduce(function (sum, val) {\n            return sum + val[item.dataIndex];\n          }, 0)\n        });\n      });\n      this.$emit('change', selectedRowKeys, selectedRows);\n    },\n    initTotalList: function initTotalList(columns) {\n      var totalList = [];\n      columns.forEach(function (column) {\n        if (column.needTotal) {\n          totalList.push(_objectSpread({}, column, {\n            total: 0\n          }));\n        }\n      });\n      return totalList;\n    },\n    loadData: function loadData(params) {\n      var that = this;\n      that.loading = true;\n      params = Object.assign({}, params);\n      var remoteParams = Object.assign({}, that.sortParams);\n      remoteParams[that.paramsName.pageNumber] = params.pageNum || that.pageNumber;\n      remoteParams[that.paramsName.pageSize] = params.pageSize || that.currentPageSize;\n\n      if (params.pageNum) {\n        that.pageNumber = params.pageNum;\n      }\n\n      if (params.pageSize) {\n        that.currentPageSize = params.pageSize;\n      }\n\n      var dataPromise = that.data(remoteParams);\n      dataPromise.then(function (response) {\n        if (!response) {\n          that.loading = false;\n          return;\n        }\n\n        var results = response[that.paramsName.results];\n        results = results instanceof Array && results || [];\n        that.current = results;\n        that.$emit(\"update:currentData\", that.current.slice());\n        that.$emit(\"dataloaded\", that.current.slice());\n        that.total = response[that.paramsName.total] * 1;\n        that.pagination = that.pager();\n        that.loading = false;\n      }, function () {\n        // error callback\n        that.loading = false;\n      });\n    },\n    // eslint-disable-next-line\n    onPagerChange: function onPagerChange(page, pageSize) {\n      this.pageNumber = page;\n      this.loadData({\n        pageNum: page\n      });\n    },\n    onPagerSizeChange: function onPagerSizeChange(current, size) {\n      this.currentPageSize = size;\n      /*\n      if (current === this.pageNumber) this.loadData()\n      console.log('page-size-change', current, size)\n      */\n    },\n    onClearSelected: function onClearSelected() {\n      this.selectedRowKeys = [];\n      this.updateSelect([], []);\n    },\n    pager: function pager() {\n      return {\n        total: this.total,\n        showTotal: function showTotal(total) {\n          return \"\\u5171\\u6709 \".concat(total, \" \\u6761\");\n        },\n        showSizeChanger: true,\n        pageSizeOptions: this.pageSizeOptions,\n        pageSize: this.pageSize,\n        defaultCurrent: this.defaultCurrent,\n        onChange: this.onPagerChange,\n        onShowSizeChange: this.onPagerSizeChange\n      };\n    }\n  },\n  watch: {\n    'selectedRows': function selectedRows(_selectedRows) {\n      this.needTotalList = this.needTotalList.map(function (item) {\n        return _objectSpread({}, item, {\n          total: _selectedRows.reduce(function (sum, val) {\n            return sum + val[item.dataIndex];\n          }, 0)\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["StandardTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"standard-table\">\r\n    <div class=\"alert\">\r\n      <a-alert type=\"info\" :show-icon=\"true\">\r\n        <div slot=\"message\">\r\n          已选择&nbsp;<a style=\"font-weight: 600\">{{ selectedRows.length }}</a>&nbsp;&nbsp;\r\n          <template v-for=\"(item, index) in needTotalList\" v-if=\"item.needTotal\">\r\n            {{ item.title }} 总计&nbsp;\r\n            <a :key=\"index\" style=\"font-weight: 600\">\r\n              {{ item.customRender ? item.customRender(item.total) : item.total }}\r\n            </a>&nbsp;&nbsp;\r\n          </template>\r\n          <a style=\"margin-left: 24px\" @click=\"onClearSelected\">清空</a>\r\n        </div>\r\n      </a-alert>\r\n    </div>\r\n    <a-table\r\n      :size=\"size\"\r\n      :bordered=\"bordered\"\r\n      :loading=\"loading\"\r\n      :columns=\"columns\"\r\n      :dataSource=\"current\"\r\n      :rowKey=\"rowKey\"\r\n      :pagination=\"pagination\"\r\n      :rowSelection=\"{ selectedRowKeys: selectedRowKeys, onChange: updateSelect }\"\r\n    >\r\n    </a-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: \"StandardTable\",\r\n    // props: ['bordered', 'loading', 'columns', 'data', 'rowKey', 'pagination', 'selectedRows'],\r\n    props: {\r\n\r\n      /**\r\n       * 数据加载函数，返回值必须是 Promise\r\n       * 默认情况下必须传递 data 参数；\r\n       *    如果使用本地数据渲染表格，业务代码中将获取本地数据包装为 Promise 即可。\r\n       *\r\n       * currentData 用于向外暴露表格当前渲染的数据，\r\n       * 业务开发中也可以直接修改 currentData，从而重新渲染表格（仅推荐用于客户端排序、数据过滤等场景）\r\n       */\r\n      data: {\r\n        type: Function,\r\n        required: true\r\n      },\r\n      dataSource: {\r\n        type: Array,\r\n        default () {\r\n          return []\r\n        }\r\n      },\r\n      columns: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n/*      pagination: {\r\n        type: Object,\r\n        default () {\r\n          return {}\r\n        }\r\n      },*/\r\n      pageSize: {\r\n        type: Number,\r\n        default: 10\r\n      },\r\n      pageNum: {\r\n        type: Number,\r\n        default: 1\r\n      },\r\n      pageSizeOptions: {\r\n        type: Array,\r\n        default () {\r\n          return ['10', '20', '30', '40', '50']\r\n        }\r\n      },\r\n      responseParamsName: {\r\n        type: Object,\r\n        default () {\r\n          return {}\r\n        }\r\n      },\r\n      bordered: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      /**\r\n       * 表格大小风格，default, middle, small\r\n       */\r\n      size: {\r\n        type: String,\r\n        default: 'default'\r\n      },\r\n      rowKey: {\r\n        type: String,\r\n        default: ''\r\n      },\r\n      selectedRows: {\r\n        type: Array,\r\n        default: null\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        needTotalList: [],\r\n        selectedRowKeys: [],\r\n\r\n        loading: true,\r\n\r\n        total: 0,\r\n        pageNumber: this.pageNum,\r\n        currentPageSize: this.pageSize,\r\n        defaultCurrent: 1,\r\n        sortParams: {},\r\n\r\n        current: [],\r\n        pagination: {},\r\n        paramsName: {},\r\n      }\r\n    },\r\n    created () {\r\n      //数据请求参数配置\r\n      this.paramsName = Object.assign(\r\n        {},\r\n        {\r\n          pageNumber: \"pageNo\",\r\n          pageSize: \"pageSize\",\r\n          total: \"totalCount\",\r\n          results: \"data\",\r\n          sortColumns: \"sortColumns\"\r\n        },\r\n        this.responseParamsName\r\n      );\r\n\r\n      this.needTotalList = this.initTotalList(this.columns)\r\n\r\n      // load data\r\n      this.loadData( { pageNum: this.pageNumber } )\r\n    },\r\n    methods: {\r\n      updateSelect (selectedRowKeys, selectedRows) {\r\n        this.selectedRowKeys = selectedRowKeys\r\n        let list = this.needTotalList\r\n        this.needTotalList = list.map(item => {\r\n          return {\r\n            ...item,\r\n            total: selectedRows.reduce((sum, val) => {\r\n              return sum + val[item.dataIndex]\r\n            }, 0)\r\n          }\r\n        })\r\n        this.$emit('change', selectedRowKeys, selectedRows)\r\n      },\r\n      initTotalList (columns) {\r\n        const totalList = []\r\n        columns.forEach(column => {\r\n          if (column.needTotal) {\r\n            totalList.push({ ...column, total: 0 })\r\n          }\r\n        })\r\n        return totalList\r\n      },\r\n\r\n      loadData (params) {\r\n        let that = this\r\n        that.loading = true\r\n        params = Object.assign({}, params)\r\n        const remoteParams = Object.assign({}, that.sortParams)\r\n        remoteParams[that.paramsName.pageNumber] = params.pageNum || that.pageNumber\r\n        remoteParams[that.paramsName.pageSize] = params.pageSize || that.currentPageSize\r\n\r\n        if (params.pageNum) {\r\n          that.pageNumber = params.pageNum\r\n        }\r\n        if (params.pageSize) {\r\n          that.currentPageSize = params.pageSize\r\n        }\r\n\r\n        let dataPromise = that.data(remoteParams)\r\n\r\n        dataPromise.then( response => {\r\n          if (!response) {\r\n            that.loading = false\r\n            return\r\n          }\r\n          let results = response[that.paramsName.results]\r\n          results = (results instanceof Array && results) || []\r\n\r\n          that.current = results\r\n\r\n          that.$emit(\"update:currentData\", that.current.slice())\r\n          that.$emit(\"dataloaded\", that.current.slice())\r\n\r\n          that.total = response[that.paramsName.total] * 1\r\n          that.pagination = that.pager()\r\n          that.loading = false\r\n        }, () => {\r\n          // error callback\r\n          that.loading = false\r\n        })\r\n      },\r\n      // eslint-disable-next-line\r\n      onPagerChange (page, pageSize) {\r\n        this.pageNumber = page\r\n        this.loadData({ pageNum: page })\r\n      },\r\n      onPagerSizeChange (current, size) {\r\n        this.currentPageSize = size\r\n        /*\r\n        if (current === this.pageNumber) this.loadData()\r\n        console.log('page-size-change', current, size)\r\n        */\r\n      },\r\n      onClearSelected () {\r\n        this.selectedRowKeys = []\r\n        this.updateSelect([], [])\r\n      },\r\n      pager () {\r\n        return {\r\n          total: this.total,\r\n          showTotal: total => `共有 ${total} 条`,\r\n          showSizeChanger: true,\r\n          pageSizeOptions: this.pageSizeOptions,\r\n          pageSize: this.pageSize,\r\n          defaultCurrent: this.defaultCurrent,\r\n          onChange: this.onPagerChange,\r\n          onShowSizeChange: this.onPagerSizeChange\r\n        }\r\n      }\r\n    },\r\n    watch: {\r\n      'selectedRows': function (selectedRows) {\r\n        this.needTotalList = this.needTotalList.map(item => {\r\n          return {\r\n            ...item,\r\n            total: selectedRows.reduce( (sum, val) => {\r\n              return sum + val[item.dataIndex]\r\n            }, 0)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n    .alert {\r\n        margin-bottom: 16px;\r\n    }\r\n</style>"],"sourceRoot":"src/components/table"}]}