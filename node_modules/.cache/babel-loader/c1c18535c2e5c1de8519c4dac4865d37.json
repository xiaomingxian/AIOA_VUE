{"remainingRequest":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\dict\\JDictSelectUtil.js","dependencies":[{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\dict\\JDictSelectUtil.js","mtime":1568535197959},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1568345883562},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1568345858740},{"path":"D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1568345873200}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _asyncToGenerator from \"D:\\\\ProgramFiles\\\\ideaIUWork\\\\jeecg-boot\\\\ant-design-vue-jeecg\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/**\r\n * 字典 util\r\n * author: scott\r\n * date: 20190109\r\n */\nimport { ajaxGetDictItems } from '@/api/api';\nimport { getAction } from '@/api/manage';\n/**\r\n * 获取字典数组\r\n * @param dictCode 字典Code\r\n * @return List<Map>\r\n */\n\nexport function initDictOptions(_x) {\n  return _initDictOptions.apply(this, arguments);\n}\n/**\r\n * 字典值替换文本通用方法\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\n\nfunction _initDictOptions() {\n  _initDictOptions = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(dictCode) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (dictCode) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", '字典Code不能为空!');\n\n          case 2:\n            _context.next = 4;\n            return ajaxGetDictItems(dictCode);\n\n          case 4:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initDictOptions.apply(this, arguments);\n}\n\nexport function filterDictText(dictOptions, text) {\n  var re = \"\";\n  dictOptions.forEach(function (option) {\n    if (text === option.value) {\n      re = option.text;\n    }\n  });\n  return re;\n}\n/**\r\n * 字典值替换文本通用方法(多选)\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\n\nexport function filterMultiDictText(dictOptions, text) {\n  if (!text) {\n    return \"\";\n  }\n\n  var re = \"\";\n  var arr = text.split(\",\");\n  dictOptions.forEach(function (option) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === option.value) {\n        re += option.text + \",\";\n        break;\n      }\n    }\n  });\n\n  if (re == \"\") {\n    return \"\";\n  }\n\n  return re.substring(0, re.length - 1);\n}\n/**\r\n * 翻译字段值对应的文本\r\n * @param children\r\n * @returns string\r\n */\n\nexport function ajaxFilterDictText(_x2, _x3) {\n  return _ajaxFilterDictText.apply(this, arguments);\n}\n\nfunction _ajaxFilterDictText() {\n  _ajaxFilterDictText = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(dictCode, key) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (dictCode) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", '字典Code不能为空!');\n\n          case 2:\n            if (key) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", '');\n\n          case 4:\n            _context2.next = 6;\n            return getAction(\"/sys/dict/getDictText/\".concat(dictCode, \"/\").concat(key));\n\n          case 6:\n            res = _context2.sent;\n\n            if (!res.success) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", res.result);\n\n          case 11:\n            return _context2.abrupt(\"return\", '');\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _ajaxFilterDictText.apply(this, arguments);\n}",{"version":3,"sources":["D:\\ProgramFiles\\ideaIUWork\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\dict\\JDictSelectUtil.js"],"names":["ajaxGetDictItems","getAction","initDictOptions","dictCode","res","filterDictText","dictOptions","text","re","forEach","option","value","filterMultiDictText","arr","split","i","length","substring","ajaxFilterDictText","key","success","result"],"mappings":";;;;;AAAA;;;;;AAMA,SAAQA,gBAAR,QAA+B,WAA/B;AACA,SAAQC,SAAR,QAAwB,cAAxB;AAEA;;;;;;AAKA,gBAAsBC,eAAtB;AAAA;AAAA;AASA;;;;;;;;;;0BATO,iBAA+BC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAA,QADA;AAAA;AAAA;AAAA;;AAAA,6CAEI,aAFJ;;AAAA;AAAA;AAAA,mBAKWH,gBAAgB,CAACG,QAAD,CAL3B;;AAAA;AAKDC,YAAAA,GALC;AAAA,6CAMEA,GANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeP,OAAO,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,IAArC,EAA2C;AAChD,MAAIC,EAAE,GAAG,EAAT;AACAF,EAAAA,WAAW,CAACG,OAAZ,CAAoB,UAAUC,MAAV,EAAkB;AACpC,QAAIH,IAAI,KAAKG,MAAM,CAACC,KAApB,EAA2B;AACzBH,MAAAA,EAAE,GAAGE,MAAM,CAACH,IAAZ;AACD;AACF,GAJD;AAKA,SAAOC,EAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASI,mBAAT,CAA6BN,WAA7B,EAA0CC,IAA1C,EAAgD;AACrD,MAAG,CAACA,IAAJ,EAAS;AACP,WAAO,EAAP;AACD;;AACD,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIK,GAAG,GAAGN,IAAI,CAACO,KAAL,CAAW,GAAX,CAAV;AACAR,EAAAA,WAAW,CAACG,OAAZ,CAAoB,UAAUC,MAAV,EAAkB;AACpC,SAAI,IAAIK,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,GAAG,CAACG,MAAlB,EAAyBD,CAAC,EAA1B,EAA6B;AAC3B,UAAIF,GAAG,CAACE,CAAD,CAAH,KAAWL,MAAM,CAACC,KAAtB,EAA6B;AAC3BH,QAAAA,EAAE,IAAIE,MAAM,CAACH,IAAP,GAAY,GAAlB;AACA;AACD;AACF;AACF,GAPD;;AAQA,MAAGC,EAAE,IAAE,EAAP,EAAU;AACR,WAAO,EAAP;AACD;;AACD,SAAOA,EAAE,CAACS,SAAH,CAAa,CAAb,EAAeT,EAAE,CAACQ,MAAH,GAAU,CAAzB,CAAP;AACD;AAED;;;;;;AAKA,gBAAsBE,kBAAtB;AAAA;AAAA;;;;;0BAAO,kBAAkCf,QAAlC,EAA4CgB,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAhB,QADA;AAAA;AAAA;AAAA;;AAAA,8CAEI,aAFJ;;AAAA;AAAA,gBAKAgB,GALA;AAAA;AAAA;AAAA;;AAAA,8CAMI,EANJ;;AAAA;AAAA;AAAA,mBASWlB,SAAS,iCAA0BE,QAA1B,cAAsCgB,GAAtC,EATpB;;AAAA;AASDf,YAAAA,GATC;;AAAA,iBAUDA,GAAG,CAACgB,OAVH;AAAA;AAAA;AAAA;;AAAA,8CAYIhB,GAAG,CAACiB,MAZR;;AAAA;AAAA,8CAcI,EAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\r\n * 字典 util\r\n * author: scott\r\n * date: 20190109\r\n */\r\n\r\nimport {ajaxGetDictItems} from '@/api/api'\r\nimport {getAction} from '@/api/manage'\r\n\r\n/**\r\n * 获取字典数组\r\n * @param dictCode 字典Code\r\n * @return List<Map>\r\n */\r\nexport async function initDictOptions(dictCode) {\r\n  if (!dictCode) {\r\n    return '字典Code不能为空!';\r\n  }\r\n  //获取字典数组\r\n  let res = await ajaxGetDictItems(dictCode);\r\n  return res;\r\n}\r\n\r\n/**\r\n * 字典值替换文本通用方法\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\r\nexport function filterDictText(dictOptions, text) {\r\n  let re = \"\";\r\n  dictOptions.forEach(function (option) {\r\n    if (text === option.value) {\r\n      re = option.text;\r\n    }\r\n  });\r\n  return re;\r\n}\r\n\r\n/**\r\n * 字典值替换文本通用方法(多选)\r\n * @param dictOptions  字典数组\r\n * @param text  字典值\r\n * @return String\r\n */\r\nexport function filterMultiDictText(dictOptions, text) {\r\n  if(!text){\r\n    return \"\"\r\n  }\r\n  let re = \"\";\r\n  let arr = text.split(\",\")\r\n  dictOptions.forEach(function (option) {\r\n    for(let i=0;i<arr.length;i++){\r\n      if (arr[i] === option.value) {\r\n        re += option.text+\",\";\r\n        break;\r\n      }\r\n    }\r\n  });\r\n  if(re==\"\"){\r\n    return \"\";\r\n  }\r\n  return re.substring(0,re.length-1);\r\n}\r\n\r\n/**\r\n * 翻译字段值对应的文本\r\n * @param children\r\n * @returns string\r\n */\r\nexport async function ajaxFilterDictText(dictCode, key) {\r\n  if (!dictCode) {\r\n    return '字典Code不能为空!';\r\n  }\r\n  //console.log(`key : ${key}`);\r\n  if (!key) {\r\n    return '';\r\n  }\r\n  //通过请求读取字典文本\r\n  let res = await getAction(`/sys/dict/getDictText/${dictCode}/${key}`);\r\n  if (res.success) {\r\n    // console.log('restult: '+ res.result);\r\n    return res.result;\r\n  } else {\r\n    return '';\r\n  }\r\n}"]}]}